// Code generated by create_version. DO NOT EDIT.
// Copyright 2020 Envoyproxy Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// Package sotw provides an implementation of GRPC SoTW (State of The World) part of XDS server
package sotw

import (
	"context"
	"errors"
	"strconv"
	"sync/atomic"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	core "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	discovery "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	"github.com/envoyproxy/go-control-plane/pkg/cache/v3"
	"github.com/envoyproxy/go-control-plane/pkg/resource/v3"
)

type Server interface {
	StreamHandler(stream Stream, typeURL string) error
}

type Callbacks interface {
	// OnStreamOpen is called once an xDS stream is open with a stream ID and the type URL (or "" for ADS).
	// Returning an error will end processing and close the stream. OnStreamClosed will still be called.
	OnStreamOpen(context.Context, int64, string) error
	// OnStreamClosed is called immediately prior to closing an xDS stream with a stream ID.
	OnStreamClosed(int64)
	// OnStreamRequest is called once a request is received on a stream.
	// Returning an error will end processing and close the stream. OnStreamClosed will still be called.
	OnStreamRequest(int64, *discovery.DiscoveryRequest) error
	// OnStreamResponse is called immediately prior to sending a response on a stream.
	OnStreamResponse(int64, *discovery.DiscoveryRequest, *discovery.DiscoveryResponse)
}

// Options for modifying the behavior of the server.
type ServerOption func(*server)

// NewServer creates handlers from a config watcher and callbacks.
func NewServer(ctx context.Context, config cache.ConfigWatcher, callbacks Callbacks, opts ...ServerOption) Server {
	out := &server{
		cache:         config,
		callbacks:     callbacks,
		ctx:           ctx,
		xdsBufferSize: 1,
		muxBufferSize: 8,
		unordered:     true,
	}
	for _, opt := range opts {
		opt(out)
	}
	return out
}

// WithADSBufferSize changes the size of the response channel for ADS handlers
// from the default 8. The size must be at least the number of different types
// on ADS to prevent dead locks between cache write and server read.
func WithADSBufferSize(size int) ServerOption {
	return func(s *server) {
		s.muxBufferSize = size
	}
}

// WithXDSBufferSize changes the size of the response channel for each xDS handler
// from the default 1. This buffer must be increased to support deferred cancellations
// for caches that can emit responses after cancel is called.
func WithXDSBufferSize(size int) ServerOption {
	return func(s *server) {
		s.xdsBufferSize = size
	}
}

// WithOrdered enables reuse of the channel between watches which preserves the
// ordering of responses in the server stream. Because of sharing, there is a
// risk of a blocked channel if watch is responded twice (e.g. if cancellation
// is asynchronous).
// The default is to create a new channel of size 1 for all well-known type
// watches.
func WithOrdered() ServerOption {
	return func(s *server) {
		s.unordered = false
	}
}

type server struct {
	cache         cache.ConfigWatcher
	callbacks     Callbacks
	ctx           context.Context
	xdsBufferSize int
	muxBufferSize int
	unordered     bool

	// streamCount for counting bi-di streams
	streamCount int64
}

// Generic RPC stream.
type Stream interface {
	grpc.ServerStream

	Send(*discovery.DiscoveryResponse) error
	Recv() (*discovery.DiscoveryRequest, error)
}

// watches for all xDS resource types
type watches struct {
	responses     chan cache.Response
	cancellations map[string]func()
	nonces        map[string]string

	// Per-type channels for unordered watches
	endpoints chan cache.Response
	clusters  chan cache.Response
	routes    chan cache.Response
	listeners chan cache.Response
	secrets   chan cache.Response
	runtimes  chan cache.Response
}

// Initialize all watches
func (values *watches) Init(bufferSize int) {
	values.responses = make(chan cache.Response, bufferSize)
	values.cancellations = make(map[string]func())
	values.nonces = make(map[string]string)
}

// Cancel all watches
func (values *watches) Cancel() {
	for _, cancel := range values.cancellations {
		if cancel != nil {
			cancel()
		}
	}
}

// Enumerated receiver channels for well-known types. This is needed because
// Golang does not support dynamic range in select{}.
type typeChannels struct {
}

// process handles a bi-di stream request
func (s *server) process(stream Stream, reqCh <-chan *discovery.DiscoveryRequest, defaultTypeURL string) error {
	// increment stream count
	streamID := atomic.AddInt64(&s.streamCount, 1)

	// unique nonce generator for req-resp pairs per xDS stream; the server
	// ignores stale nonces. nonce is only modified within send() function.
	var streamNonce int64

	// a collection of stack allocated watches per request type
	var values watches
	bufferSize := s.xdsBufferSize
	if defaultTypeURL == resource.AnyType {
		bufferSize = s.muxBufferSize
	}
	values.Init(bufferSize)
	defer func() {
		values.Cancel()
		if s.callbacks != nil {
			s.callbacks.OnStreamClosed(streamID)
		}
	}()

	// sends a response by serializing to protobuf Any
	send := func(resp cache.Response) (string, error) {
		if resp == nil {
			return "", errors.New("missing response")
		}

		out, err := resp.GetDiscoveryResponse()
		if err != nil {
			return "", err
		}

		// increment nonce
		streamNonce = streamNonce + 1
		out.Nonce = strconv.FormatInt(streamNonce, 10)
		if s.callbacks != nil {
			s.callbacks.OnStreamResponse(streamID, resp.GetRequest(), out)
		}
		return out.Nonce, stream.Send(out)
	}

	process := func(resp cache.Response) error {
		nonce, err := send(resp)
		if err != nil {
			return err
		}
		typeUrl := resp.GetRequest().TypeUrl
		values.nonces[typeUrl] = nonce
		values.cancellations[typeUrl] = nil
		return nil
	}

	processAll := func() error {
		for {
			select {
			case resp := <-values.responses:
				if err := process(resp); err != nil {
					return err
				}
			default:
				return nil
			}
		}
	}

	if s.callbacks != nil {
		if err := s.callbacks.OnStreamOpen(stream.Context(), streamID, defaultTypeURL); err != nil {
			return err
		}
	}

	// node may only be set on the first discovery request
	var node = &core.Node{}

	for {
		select {
		case <-s.ctx.Done():
			return nil
		// config watcher can send the requested resources types in any order
		case resp := <-values.responses:
			if err := process(resp); err != nil {
				return err
			}
		// legacy per-type watch channels
		case resp := <-values.endpoints:
			if err := process(resp); err != nil {
				return err
			}
		case resp := <-values.clusters:
			if err := process(resp); err != nil {
				return err
			}
		case resp := <-values.routes:
			if err := process(resp); err != nil {
				return err
			}
		case resp := <-values.listeners:
			if err := process(resp); err != nil {
				return err
			}
		case resp := <-values.secrets:
			if err := process(resp); err != nil {
				return err
			}
		case resp := <-values.runtimes:
			if err := process(resp); err != nil {
				return err
			}

		case req, more := <-reqCh:
			// input stream ended or errored out
			if !more {
				return nil
			}
			if req == nil {
				return status.Errorf(codes.Unavailable, "empty request")
			}

			// node field in discovery request is delta-compressed
			if req.Node != nil {
				node = req.Node
			} else {
				req.Node = node
			}

			// nonces can be reused across streams; we verify nonce only if nonce is not initialized
			nonce := req.GetResponseNonce()

			// type URL is required for ADS but is implicit for xDS
			if defaultTypeURL == resource.AnyType {
				if req.TypeUrl == "" {
					return status.Errorf(codes.InvalidArgument, "type URL is required for ADS")
				}
			} else if req.TypeUrl == "" {
				req.TypeUrl = defaultTypeURL
			}

			if s.callbacks != nil {
				if err := s.callbacks.OnStreamRequest(streamID, req); err != nil {
					return err
				}
			}

			typeUrl := req.TypeUrl
			responseNonce, seen := values.nonces[typeUrl]
			if !seen || responseNonce == nonce {
				if cancel, seen := values.cancellations[typeUrl]; seen && cancel != nil {
					cancel()
					// Some responses may have made it to the channel prior to cancel,
					// hence drain it to avoid channel buffer overrun.
					if err := processAll(); err != nil {
						return err
					}
				}
				value := values.responses
				if s.unordered {
					switch typeUrl {
					case resource.EndpointType:
						values.endpoints = make(chan cache.Response, 1)
						value = values.endpoints
					case resource.ClusterType:
						values.clusters = make(chan cache.Response, 1)
						value = values.clusters
					case resource.RouteType:
						values.routes = make(chan cache.Response, 1)
						value = values.routes
					case resource.ListenerType:
						values.listeners = make(chan cache.Response, 1)
						value = values.listeners
					case resource.SecretType:
						values.secrets = make(chan cache.Response, 1)
						value = values.secrets
					case resource.RuntimeType:
						values.runtimes = make(chan cache.Response, 1)
						value = values.runtimes
					}
				}
				values.cancellations[typeUrl] = s.cache.CreateWatch(req, value)
			}
		}
	}
}

// StreamHandler converts a blocking read call to channels and initiates stream processing
func (s *server) StreamHandler(stream Stream, typeURL string) error {
	// a channel for receiving incoming requests
	reqCh := make(chan *discovery.DiscoveryRequest)
	reqStop := int32(0)
	go func() {
		for {
			req, err := stream.Recv()
			if atomic.LoadInt32(&reqStop) != 0 {
				return
			}
			if err != nil {
				close(reqCh)
				return
			}
			select {
			case reqCh <- req:
			case <-s.ctx.Done():
				return
			}
		}
	}()

	err := s.process(stream, reqCh, typeURL)

	// prevents writing to a closed channel if send failed on blocked recv
	// TODO(kuat) figure out how to unblock recv through gRPC API
	atomic.StoreInt32(&reqStop, 1)

	return err
}
