// Code generated by protoc-gen-validate
// source: envoy/data/tap/v2alpha/http.proto
// DO NOT EDIT!!!

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on HttpBufferedTrace with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HttpBufferedTrace) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpBufferedTraceValidationError{
				Field:  "Request",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpBufferedTraceValidationError{
				Field:  "Response",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// HttpBufferedTraceValidationError is the validation error returned by
// HttpBufferedTrace.Validate if the designated constraints aren't met.
type HttpBufferedTraceValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e HttpBufferedTraceValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpBufferedTrace.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = HttpBufferedTraceValidationError{}

// Validate checks the field values on HttpStreamedTraceSegment with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpStreamedTraceSegment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TraceId

	switch m.MessagePiece.(type) {

	case *HttpStreamedTraceSegment_RequestHeaders:

		if v, ok := interface{}(m.GetRequestHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					Field:  "RequestHeaders",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_RequestBodyChunk:

		if v, ok := interface{}(m.GetRequestBodyChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					Field:  "RequestBodyChunk",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_RequestTrailers:

		if v, ok := interface{}(m.GetRequestTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					Field:  "RequestTrailers",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_ResponseHeaders:

		if v, ok := interface{}(m.GetResponseHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					Field:  "ResponseHeaders",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_ResponseBodyChunk:

		if v, ok := interface{}(m.GetResponseBodyChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					Field:  "ResponseBodyChunk",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_ResponseTrailers:

		if v, ok := interface{}(m.GetResponseTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					Field:  "ResponseTrailers",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// HttpStreamedTraceSegmentValidationError is the validation error returned by
// HttpStreamedTraceSegment.Validate if the designated constraints aren't met.
type HttpStreamedTraceSegmentValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e HttpStreamedTraceSegmentValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpStreamedTraceSegment.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = HttpStreamedTraceSegmentValidationError{}

// Validate checks the field values on HttpBufferedTrace_Message with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpBufferedTrace_Message) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetHeaders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpBufferedTrace_MessageValidationError{
					Field:  fmt.Sprintf("Headers[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpBufferedTrace_MessageValidationError{
				Field:  "Body",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	for idx, item := range m.GetTrailers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpBufferedTrace_MessageValidationError{
					Field:  fmt.Sprintf("Trailers[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// HttpBufferedTrace_MessageValidationError is the validation error returned by
// HttpBufferedTrace_Message.Validate if the designated constraints aren't met.
type HttpBufferedTrace_MessageValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e HttpBufferedTrace_MessageValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpBufferedTrace_Message.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = HttpBufferedTrace_MessageValidationError{}
