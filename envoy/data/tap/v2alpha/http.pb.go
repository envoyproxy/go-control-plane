// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/data/tap/v2alpha/http.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A fully buffered HTTP trace message.
type HttpBufferedTrace struct {
	// Request headers.
	RequestHeaders []*core.HeaderValue `protobuf:"bytes,2,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	// Response headers.
	ResponseHeaders      []*core.HeaderValue `protobuf:"bytes,3,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HttpBufferedTrace) Reset()         { *m = HttpBufferedTrace{} }
func (m *HttpBufferedTrace) String() string { return proto.CompactTextString(m) }
func (*HttpBufferedTrace) ProtoMessage()    {}
func (*HttpBufferedTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_eb5d1a1ad62c5dd3, []int{0}
}
func (m *HttpBufferedTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpBufferedTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpBufferedTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HttpBufferedTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpBufferedTrace.Merge(dst, src)
}
func (m *HttpBufferedTrace) XXX_Size() int {
	return m.Size()
}
func (m *HttpBufferedTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpBufferedTrace.DiscardUnknown(m)
}

var xxx_messageInfo_HttpBufferedTrace proto.InternalMessageInfo

func (m *HttpBufferedTrace) GetRequestHeaders() []*core.HeaderValue {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

func (m *HttpBufferedTrace) GetResponseHeaders() []*core.HeaderValue {
	if m != nil {
		return m.ResponseHeaders
	}
	return nil
}

func init() {
	proto.RegisterType((*HttpBufferedTrace)(nil), "envoy.data.tap.v2alpha.HttpBufferedTrace")
}
func (m *HttpBufferedTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpBufferedTrace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestHeaders) > 0 {
		for _, msg := range m.RequestHeaders {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHttp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResponseHeaders) > 0 {
		for _, msg := range m.ResponseHeaders {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHttp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintHttp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HttpBufferedTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestHeaders) > 0 {
		for _, e := range m.RequestHeaders {
			l = e.Size()
			n += 1 + l + sovHttp(uint64(l))
		}
	}
	if len(m.ResponseHeaders) > 0 {
		for _, e := range m.ResponseHeaders {
			l = e.Size()
			n += 1 + l + sovHttp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHttp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHttp(x uint64) (n int) {
	return sovHttp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HttpBufferedTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpBufferedTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpBufferedTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHeaders = append(m.RequestHeaders, &core.HeaderValue{})
			if err := m.RequestHeaders[len(m.RequestHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseHeaders = append(m.ResponseHeaders, &core.HeaderValue{})
			if err := m.ResponseHeaders[len(m.ResponseHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHttp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHttp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHttp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHttp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHttp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHttp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHttp   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("envoy/data/tap/v2alpha/http.proto", fileDescriptor_http_eb5d1a1ad62c5dd3)
}

var fileDescriptor_http_eb5d1a1ad62c5dd3 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0x59, 0x03, 0x16, 0x2b, 0x18, 0xbd, 0x42, 0x44, 0x64, 0x51, 0xb1, 0xb0, 0x9a, 0x85,
	0xf5, 0x0d, 0xd2, 0x18, 0x5b, 0x11, 0x5b, 0x99, 0xe4, 0x26, 0xdc, 0x41, 0xc8, 0x8e, 0xb3, 0x73,
	0x8b, 0x79, 0x22, 0x5f, 0xc5, 0xd2, 0x47, 0x90, 0x7b, 0x12, 0xc9, 0xed, 0x69, 0x65, 0x91, 0x76,
	0xf8, 0xbe, 0x6f, 0xf8, 0xed, 0x35, 0x6d, 0x72, 0xdc, 0xfa, 0x1a, 0x15, 0xbd, 0x22, 0xfb, 0x1c,
	0x70, 0xcd, 0x0d, 0xfa, 0x46, 0x95, 0x81, 0x25, 0x6a, 0xac, 0xce, 0x06, 0x04, 0x76, 0x08, 0x28,
	0x32, 0x8c, 0xc8, 0xc5, 0x65, 0x51, 0x91, 0x5b, 0x9f, 0x83, 0x5f, 0x46, 0x21, 0xbf, 0xc0, 0x44,
	0xc5, 0xba, 0xf9, 0x30, 0xf6, 0x74, 0xae, 0xca, 0xb3, 0x6e, 0xb5, 0x22, 0xa1, 0xfa, 0x59, 0x70,
	0x49, 0xd5, 0x83, 0x9d, 0x0a, 0xbd, 0x75, 0x94, 0xf4, 0xb5, 0x21, 0xac, 0x49, 0xd2, 0xf9, 0xc1,
	0xd5, 0xe4, 0xee, 0x28, 0x38, 0x28, 0x5f, 0x90, 0x5b, 0xc8, 0x01, 0x76, 0x35, 0x98, 0x0f, 0xc4,
	0x0b, 0xae, 0x3b, 0x7a, 0x3a, 0x1e, 0xb5, 0x72, 0x4b, 0xd5, 0xa3, 0x3d, 0x11, 0x4a, 0x1c, 0x37,
	0x89, 0xfe, 0x4a, 0x93, 0xbd, 0x4a, 0xd3, 0x5f, 0x6f, 0x4c, 0xcd, 0xc2, 0x67, 0xef, 0xcc, 0x57,
	0xef, 0xcc, 0x77, 0xef, 0x8c, 0xbd, 0x6d, 0x63, 0x09, 0xb0, 0xc4, 0xf7, 0x2d, 0xfc, 0xbf, 0x7d,
	0x71, 0x38, 0x8c, 0xbc, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x29, 0x31, 0x2d, 0x6f, 0x3f, 0x01,
	0x00, 0x00,
}
