// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/data/cluster/v2alpha/outlier_detection_event.proto

package envoy_data_cluster_v2alpha

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Type of ejection that took place
type OutlierEjectionType int32

const (
	// In case upstream host returns certain number of consecutive 5xx.
	// If
	// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is *false*, all type of errors are treated as HTTP 5xx errors.
	// See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
	// details.
	OutlierEjectionType_CONSECUTIVE_5XX OutlierEjectionType = 0
	// In case upstream host returns certain number of consecutive gateway errors
	OutlierEjectionType_CONSECUTIVE_GATEWAY_FAILURE OutlierEjectionType = 1
	// Runs over aggregated success rate statistics from every host in cluster
	// and selects hosts for which ratio of successful replies deviates from other hosts
	// in the cluster.
	// If
	// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is *false*, all errors (externally and locally generated) are used to calculate success rate
	// statistics. See :ref:`Cluster outlier detection <arch_overview_outlier_detection>`
	// documentation for details.
	OutlierEjectionType_SUCCESS_RATE OutlierEjectionType = 2
	// Consecutive local origin failures: Connection failures, resets, timeouts, etc
	// This type of ejection happens only when
	// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is set to *true*.
	// See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
	OutlierEjectionType_CONSECUTIVE_LOCAL_ORIGIN_FAILURE OutlierEjectionType = 3
	// Runs over aggregated success rate statistics for local origin failures
	// for all hosts in the cluster and selects hosts for which success rate deviates from other
	// hosts in the cluster. This type of ejection happens only when
	// :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
	// is set to *true*.
	// See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
	OutlierEjectionType_SUCCESS_RATE_LOCAL_ORIGIN OutlierEjectionType = 4
)

var OutlierEjectionType_name = map[int32]string{
	0: "CONSECUTIVE_5XX",
	1: "CONSECUTIVE_GATEWAY_FAILURE",
	2: "SUCCESS_RATE",
	3: "CONSECUTIVE_LOCAL_ORIGIN_FAILURE",
	4: "SUCCESS_RATE_LOCAL_ORIGIN",
}

var OutlierEjectionType_value = map[string]int32{
	"CONSECUTIVE_5XX":                  0,
	"CONSECUTIVE_GATEWAY_FAILURE":      1,
	"SUCCESS_RATE":                     2,
	"CONSECUTIVE_LOCAL_ORIGIN_FAILURE": 3,
	"SUCCESS_RATE_LOCAL_ORIGIN":        4,
}

func (x OutlierEjectionType) String() string {
	return proto.EnumName(OutlierEjectionType_name, int32(x))
}

func (OutlierEjectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e03c92c55863094, []int{0}
}

// Represents possible action applied to upstream host
type Action int32

const (
	// In case host was excluded from service
	Action_EJECT Action = 0
	// In case host was brought back into service
	Action_UNEJECT Action = 1
)

var Action_name = map[int32]string{
	0: "EJECT",
	1: "UNEJECT",
}

var Action_value = map[string]int32{
	"EJECT":   0,
	"UNEJECT": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e03c92c55863094, []int{1}
}

type OutlierDetectionEvent struct {
	// In case of eject represents type of ejection that took place.
	Type OutlierEjectionType `protobuf:"varint,1,opt,name=type,proto3,enum=envoy.data.cluster.v2alpha.OutlierEjectionType" json:"type,omitempty"`
	// Timestamp for event.
	Timestamp *time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp,omitempty"`
	// The time in seconds since the last action (either an ejection or unejection) took place.
	SecsSinceLastAction *types.UInt64Value `protobuf:"bytes,3,opt,name=secs_since_last_action,json=secsSinceLastAction,proto3" json:"secs_since_last_action,omitempty"`
	// The :ref:`cluster <envoy_api_msg_Cluster>` that owns the ejected host.
	ClusterName string `protobuf:"bytes,4,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The URL of the ejected host. E.g., ``tcp://1.2.3.4:80``.
	UpstreamUrl string `protobuf:"bytes,5,opt,name=upstream_url,json=upstreamUrl,proto3" json:"upstream_url,omitempty"`
	// The action that took place.
	Action Action `protobuf:"varint,6,opt,name=action,proto3,enum=envoy.data.cluster.v2alpha.Action" json:"action,omitempty"`
	// If ``action`` is ``eject``, specifies the number of times the host has been ejected (local to
	// that Envoy and gets reset if the host gets removed from the upstream cluster for any reason and
	// then re-added).
	NumEjections uint32 `protobuf:"varint,7,opt,name=num_ejections,json=numEjections,proto3" json:"num_ejections,omitempty"`
	// If ``action`` is ``eject``, specifies if the ejection was enforced. ``true`` means the host was
	// ejected. ``false`` means the event was logged but the host was not actually ejected.
	Enforced bool `protobuf:"varint,8,opt,name=enforced,proto3" json:"enforced,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*OutlierDetectionEvent_EjectSuccessRateEvent
	//	*OutlierDetectionEvent_EjectConsecutiveEvent
	Event                isOutlierDetectionEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *OutlierDetectionEvent) Reset()         { *m = OutlierDetectionEvent{} }
func (m *OutlierDetectionEvent) String() string { return proto.CompactTextString(m) }
func (*OutlierDetectionEvent) ProtoMessage()    {}
func (*OutlierDetectionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e03c92c55863094, []int{0}
}
func (m *OutlierDetectionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutlierDetectionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutlierDetectionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutlierDetectionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierDetectionEvent.Merge(m, src)
}
func (m *OutlierDetectionEvent) XXX_Size() int {
	return m.Size()
}
func (m *OutlierDetectionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierDetectionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierDetectionEvent proto.InternalMessageInfo

type isOutlierDetectionEvent_Event interface {
	isOutlierDetectionEvent_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OutlierDetectionEvent_EjectSuccessRateEvent struct {
	EjectSuccessRateEvent *OutlierEjectSuccessRate `protobuf:"bytes,9,opt,name=eject_success_rate_event,json=ejectSuccessRateEvent,proto3,oneof"`
}
type OutlierDetectionEvent_EjectConsecutiveEvent struct {
	EjectConsecutiveEvent *OutlierEjectConsecutive `protobuf:"bytes,10,opt,name=eject_consecutive_event,json=ejectConsecutiveEvent,proto3,oneof"`
}

func (*OutlierDetectionEvent_EjectSuccessRateEvent) isOutlierDetectionEvent_Event() {}
func (*OutlierDetectionEvent_EjectConsecutiveEvent) isOutlierDetectionEvent_Event() {}

func (m *OutlierDetectionEvent) GetEvent() isOutlierDetectionEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *OutlierDetectionEvent) GetType() OutlierEjectionType {
	if m != nil {
		return m.Type
	}
	return OutlierEjectionType_CONSECUTIVE_5XX
}

func (m *OutlierDetectionEvent) GetTimestamp() *time.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *OutlierDetectionEvent) GetSecsSinceLastAction() *types.UInt64Value {
	if m != nil {
		return m.SecsSinceLastAction
	}
	return nil
}

func (m *OutlierDetectionEvent) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *OutlierDetectionEvent) GetUpstreamUrl() string {
	if m != nil {
		return m.UpstreamUrl
	}
	return ""
}

func (m *OutlierDetectionEvent) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_EJECT
}

func (m *OutlierDetectionEvent) GetNumEjections() uint32 {
	if m != nil {
		return m.NumEjections
	}
	return 0
}

func (m *OutlierDetectionEvent) GetEnforced() bool {
	if m != nil {
		return m.Enforced
	}
	return false
}

func (m *OutlierDetectionEvent) GetEjectSuccessRateEvent() *OutlierEjectSuccessRate {
	if x, ok := m.GetEvent().(*OutlierDetectionEvent_EjectSuccessRateEvent); ok {
		return x.EjectSuccessRateEvent
	}
	return nil
}

func (m *OutlierDetectionEvent) GetEjectConsecutiveEvent() *OutlierEjectConsecutive {
	if x, ok := m.GetEvent().(*OutlierDetectionEvent_EjectConsecutiveEvent); ok {
		return x.EjectConsecutiveEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OutlierDetectionEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OutlierDetectionEvent_OneofMarshaler, _OutlierDetectionEvent_OneofUnmarshaler, _OutlierDetectionEvent_OneofSizer, []interface{}{
		(*OutlierDetectionEvent_EjectSuccessRateEvent)(nil),
		(*OutlierDetectionEvent_EjectConsecutiveEvent)(nil),
	}
}

func _OutlierDetectionEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OutlierDetectionEvent)
	// event
	switch x := m.Event.(type) {
	case *OutlierDetectionEvent_EjectSuccessRateEvent:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EjectSuccessRateEvent); err != nil {
			return err
		}
	case *OutlierDetectionEvent_EjectConsecutiveEvent:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EjectConsecutiveEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OutlierDetectionEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _OutlierDetectionEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OutlierDetectionEvent)
	switch tag {
	case 9: // event.eject_success_rate_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OutlierEjectSuccessRate)
		err := b.DecodeMessage(msg)
		m.Event = &OutlierDetectionEvent_EjectSuccessRateEvent{msg}
		return true, err
	case 10: // event.eject_consecutive_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OutlierEjectConsecutive)
		err := b.DecodeMessage(msg)
		m.Event = &OutlierDetectionEvent_EjectConsecutiveEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OutlierDetectionEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OutlierDetectionEvent)
	// event
	switch x := m.Event.(type) {
	case *OutlierDetectionEvent_EjectSuccessRateEvent:
		s := proto.Size(x.EjectSuccessRateEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutlierDetectionEvent_EjectConsecutiveEvent:
		s := proto.Size(x.EjectConsecutiveEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OutlierEjectSuccessRate struct {
	// Host’s success rate at the time of the ejection event on a 0-100 range.
	HostSuccessRate uint32 `protobuf:"varint,1,opt,name=host_success_rate,json=hostSuccessRate,proto3" json:"host_success_rate,omitempty"`
	// Average success rate of the hosts in the cluster at the time of the ejection event on a 0-100
	// range.
	ClusterAverageSuccessRate uint32 `protobuf:"varint,2,opt,name=cluster_average_success_rate,json=clusterAverageSuccessRate,proto3" json:"cluster_average_success_rate,omitempty"`
	// Success rate ejection threshold at the time of the ejection event.
	ClusterSuccessRateEjectionThreshold uint32   `protobuf:"varint,3,opt,name=cluster_success_rate_ejection_threshold,json=clusterSuccessRateEjectionThreshold,proto3" json:"cluster_success_rate_ejection_threshold,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *OutlierEjectSuccessRate) Reset()         { *m = OutlierEjectSuccessRate{} }
func (m *OutlierEjectSuccessRate) String() string { return proto.CompactTextString(m) }
func (*OutlierEjectSuccessRate) ProtoMessage()    {}
func (*OutlierEjectSuccessRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e03c92c55863094, []int{1}
}
func (m *OutlierEjectSuccessRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutlierEjectSuccessRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutlierEjectSuccessRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutlierEjectSuccessRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierEjectSuccessRate.Merge(m, src)
}
func (m *OutlierEjectSuccessRate) XXX_Size() int {
	return m.Size()
}
func (m *OutlierEjectSuccessRate) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierEjectSuccessRate.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierEjectSuccessRate proto.InternalMessageInfo

func (m *OutlierEjectSuccessRate) GetHostSuccessRate() uint32 {
	if m != nil {
		return m.HostSuccessRate
	}
	return 0
}

func (m *OutlierEjectSuccessRate) GetClusterAverageSuccessRate() uint32 {
	if m != nil {
		return m.ClusterAverageSuccessRate
	}
	return 0
}

func (m *OutlierEjectSuccessRate) GetClusterSuccessRateEjectionThreshold() uint32 {
	if m != nil {
		return m.ClusterSuccessRateEjectionThreshold
	}
	return 0
}

type OutlierEjectConsecutive struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutlierEjectConsecutive) Reset()         { *m = OutlierEjectConsecutive{} }
func (m *OutlierEjectConsecutive) String() string { return proto.CompactTextString(m) }
func (*OutlierEjectConsecutive) ProtoMessage()    {}
func (*OutlierEjectConsecutive) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e03c92c55863094, []int{2}
}
func (m *OutlierEjectConsecutive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutlierEjectConsecutive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutlierEjectConsecutive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutlierEjectConsecutive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierEjectConsecutive.Merge(m, src)
}
func (m *OutlierEjectConsecutive) XXX_Size() int {
	return m.Size()
}
func (m *OutlierEjectConsecutive) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierEjectConsecutive.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierEjectConsecutive proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("envoy.data.cluster.v2alpha.OutlierEjectionType", OutlierEjectionType_name, OutlierEjectionType_value)
	proto.RegisterEnum("envoy.data.cluster.v2alpha.Action", Action_name, Action_value)
	proto.RegisterType((*OutlierDetectionEvent)(nil), "envoy.data.cluster.v2alpha.OutlierDetectionEvent")
	proto.RegisterType((*OutlierEjectSuccessRate)(nil), "envoy.data.cluster.v2alpha.OutlierEjectSuccessRate")
	proto.RegisterType((*OutlierEjectConsecutive)(nil), "envoy.data.cluster.v2alpha.OutlierEjectConsecutive")
}

func init() {
	proto.RegisterFile("envoy/data/cluster/v2alpha/outlier_detection_event.proto", fileDescriptor_5e03c92c55863094)
}

var fileDescriptor_5e03c92c55863094 = []byte{
	// 744 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6e, 0xda, 0x4a,
	0x14, 0xc6, 0x33, 0x04, 0x08, 0x4c, 0xc8, 0x0d, 0x77, 0x72, 0x73, 0xe3, 0x70, 0x73, 0x89, 0x45,
	0xae, 0x74, 0x11, 0x0b, 0x5b, 0x4a, 0xda, 0xaa, 0xab, 0x4a, 0x98, 0xb8, 0x09, 0x15, 0x85, 0xd4,
	0x40, 0x9a, 0x2e, 0x2a, 0x6b, 0x62, 0x26, 0x40, 0xe5, 0x7f, 0xf2, 0x8c, 0x69, 0xd9, 0xf6, 0x09,
	0xfa, 0x0c, 0x5d, 0xf5, 0x45, 0x2a, 0x75, 0xd9, 0x37, 0x68, 0xc5, 0x4b, 0xb4, 0xca, 0xaa, 0xf2,
	0xd8, 0x26, 0x26, 0x4d, 0xa2, 0x76, 0x67, 0xcf, 0x9c, 0xdf, 0x77, 0xce, 0xf9, 0xe6, 0xcc, 0xc0,
	0x87, 0xc4, 0x9e, 0x38, 0x53, 0x79, 0x80, 0x19, 0x96, 0x0d, 0xd3, 0xa7, 0x8c, 0x78, 0xf2, 0x64,
	0x1f, 0x9b, 0xee, 0x08, 0xcb, 0x8e, 0xcf, 0xcc, 0x31, 0xf1, 0xf4, 0x01, 0x61, 0xc4, 0x60, 0x63,
	0xc7, 0xd6, 0xc9, 0x84, 0xd8, 0x4c, 0x72, 0x3d, 0x87, 0x39, 0xa8, 0xc4, 0x49, 0x29, 0x20, 0xa5,
	0x88, 0x94, 0x22, 0xb2, 0xb4, 0x3b, 0x74, 0x9c, 0xa1, 0x49, 0x64, 0x1e, 0x79, 0xee, 0x5f, 0xc8,
	0x6c, 0x6c, 0x11, 0xca, 0xb0, 0xe5, 0x86, 0x70, 0xa9, 0x7c, 0x3d, 0xe0, 0xb5, 0x87, 0x5d, 0x97,
	0x78, 0x34, 0xda, 0xdf, 0x9a, 0x60, 0x73, 0x3c, 0xc0, 0x8c, 0xc8, 0xf1, 0x47, 0xb4, 0xf1, 0xd7,
	0xd0, 0x19, 0x3a, 0xfc, 0x53, 0x0e, 0xbe, 0xc2, 0xd5, 0xca, 0xc7, 0x0c, 0xdc, 0xec, 0x84, 0xd5,
	0x1e, 0xc6, 0xc5, 0xaa, 0x41, 0xad, 0xe8, 0x29, 0x4c, 0xb3, 0xa9, 0x4b, 0x04, 0x20, 0x82, 0xea,
	0x1f, 0xfb, 0xb2, 0x74, 0x7b, 0xd1, 0x52, 0x24, 0xa0, 0xbe, 0x0a, 0xf9, 0xde, 0xd4, 0x25, 0x4a,
	0xee, 0x52, 0xc9, 0xbc, 0x05, 0xa9, 0x22, 0xd0, 0xb8, 0x0c, 0x7a, 0x04, 0xf3, 0xf3, 0x56, 0x84,
	0x94, 0x08, 0xaa, 0xab, 0xfb, 0x25, 0x29, 0xec, 0x45, 0x8a, 0x7b, 0x91, 0x7a, 0x71, 0x84, 0x92,
	0x7e, 0xf7, 0x65, 0x17, 0x68, 0x57, 0x08, 0x7a, 0x06, 0xff, 0xa6, 0xc4, 0xa0, 0x3a, 0x1d, 0xdb,
	0x06, 0xd1, 0x4d, 0x4c, 0x99, 0x8e, 0x79, 0x36, 0x61, 0x99, 0x8b, 0xed, 0xfc, 0x24, 0xd6, 0x6f,
	0xda, 0xec, 0xc1, 0xbd, 0x53, 0x6c, 0xfa, 0x44, 0xdb, 0x08, 0xd8, 0x6e, 0x80, 0xb6, 0x30, 0x65,
	0x75, 0x0e, 0xa2, 0x1a, 0x2c, 0x44, 0x9d, 0xe8, 0x36, 0xb6, 0x88, 0x90, 0x16, 0x41, 0x35, 0xaf,
	0xac, 0x5c, 0x2a, 0x69, 0x2f, 0x25, 0x02, 0x6d, 0x35, 0xda, 0x6c, 0x63, 0x8b, 0x04, 0xb1, 0xbe,
	0x4b, 0x99, 0x47, 0xb0, 0xa5, 0xfb, 0x9e, 0x29, 0x64, 0xae, 0xc5, 0xc6, 0x9b, 0x7d, 0xcf, 0x44,
	0x87, 0x30, 0x1b, 0x95, 0x96, 0xe5, 0xde, 0x55, 0xee, 0xf2, 0x2e, 0xac, 0x25, 0x61, 0x57, 0xc4,
	0xa2, 0x3d, 0xb8, 0x66, 0xfb, 0x96, 0x4e, 0x22, 0x53, 0xa9, 0xb0, 0x22, 0x82, 0xea, 0x9a, 0x56,
	0xb0, 0x7d, 0x2b, 0x36, 0x9a, 0xa2, 0x12, 0xcc, 0x11, 0xfb, 0xc2, 0xf1, 0x0c, 0x32, 0x10, 0x72,
	0x22, 0xa8, 0xe6, 0xb4, 0xf9, 0x3f, 0xb2, 0xa1, 0xc0, 0x61, 0x9d, 0xfa, 0x86, 0x41, 0x28, 0xd5,
	0x3d, 0xcc, 0x48, 0x38, 0x88, 0x42, 0x9e, 0x7b, 0x76, 0xf0, 0xab, 0x87, 0xda, 0x0d, 0x15, 0x34,
	0xcc, 0xc8, 0xf1, 0x92, 0xb6, 0x49, 0xae, 0xad, 0x85, 0x03, 0x63, 0xc1, 0xad, 0x30, 0x9f, 0xe1,
	0xd8, 0x94, 0x18, 0x3e, 0x1b, 0x4f, 0xe2, 0x74, 0xf0, 0xf7, 0xd2, 0x35, 0xae, 0x04, 0xe6, 0xe9,
	0x12, 0x6b, 0x3c, 0x9d, 0x52, 0x80, 0x19, 0x2e, 0x8e, 0x96, 0xbf, 0x2b, 0xa0, 0xf2, 0x0d, 0xc0,
	0xad, 0x5b, 0x2a, 0x46, 0x07, 0xf0, 0xcf, 0x91, 0x43, 0x17, 0x7d, 0xe0, 0x63, 0xbd, 0xc6, 0x0f,
	0xb0, 0x96, 0x12, 0x06, 0xda, 0x7a, 0x10, 0x91, 0x84, 0x8e, 0xe1, 0x4e, 0x3c, 0x1c, 0x78, 0x42,
	0x3c, 0x3c, 0x24, 0x8b, 0x7c, 0x6a, 0x91, 0xdf, 0x8e, 0x82, 0xeb, 0x61, 0x6c, 0x52, 0xe9, 0x25,
	0xfc, 0x3f, 0x56, 0x5a, 0x3c, 0x89, 0xe8, 0x14, 0x75, 0x36, 0xf2, 0x08, 0x1d, 0x39, 0xe6, 0x80,
	0x8f, 0x72, 0x42, 0x74, 0x2f, 0xe2, 0x92, 0x56, 0xc7, 0x77, 0x2c, 0x66, 0x2a, 0xdb, 0x8b, 0x8d,
	0x27, 0x7c, 0xaa, 0xbd, 0x07, 0x70, 0xe3, 0x86, 0xbb, 0x89, 0x36, 0xe0, 0x7a, 0xa3, 0xd3, 0xee,
	0xaa, 0x8d, 0x7e, 0xaf, 0x79, 0xaa, 0xea, 0xf7, 0xcf, 0xce, 0x8a, 0x4b, 0x68, 0x17, 0xfe, 0x93,
	0x5c, 0x3c, 0xaa, 0xf7, 0xd4, 0xe7, 0xf5, 0x17, 0xfa, 0xe3, 0x7a, 0xb3, 0xd5, 0xd7, 0xd4, 0x22,
	0x40, 0x45, 0x58, 0xe8, 0xf6, 0x1b, 0x0d, 0xb5, 0xdb, 0xd5, 0xb5, 0x7a, 0x4f, 0x2d, 0xa6, 0xd0,
	0x7f, 0x50, 0x4c, 0x22, 0xad, 0x4e, 0xa3, 0xde, 0xd2, 0x3b, 0x5a, 0xf3, 0xa8, 0xd9, 0x9e, 0x73,
	0xcb, 0xe8, 0x5f, 0xb8, 0x9d, 0xe4, 0x16, 0xc2, 0x8a, 0xe9, 0x9a, 0x08, 0xb3, 0xd1, 0x7d, 0xcc,
	0xc3, 0x8c, 0xfa, 0x44, 0x6d, 0xf4, 0x8a, 0x4b, 0x68, 0x15, 0xae, 0xf4, 0xdb, 0xe1, 0x0f, 0x50,
	0xce, 0x3e, 0xcc, 0xca, 0xe0, 0xd3, 0xac, 0x0c, 0x3e, 0xcf, 0xca, 0xe0, 0xeb, 0xac, 0x0c, 0x60,
	0x75, 0xec, 0x84, 0xb3, 0xe4, 0x7a, 0xce, 0x9b, 0xe9, 0x1d, 0x63, 0xa5, 0x94, 0x6e, 0x7c, 0xdc,
	0x4e, 0x82, 0x37, 0xe2, 0x04, 0x9c, 0x67, 0xf9, 0x63, 0x71, 0xf0, 0x23, 0x00, 0x00, 0xff, 0xff,
	0xea, 0x4d, 0x86, 0x70, 0xcc, 0x05, 0x00, 0x00,
}

func (this *OutlierDetectionEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierDetectionEvent)
	if !ok {
		that2, ok := that.(OutlierDetectionEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Timestamp == nil {
		if this.Timestamp != nil {
			return false
		}
	} else if !this.Timestamp.Equal(*that1.Timestamp) {
		return false
	}
	if !this.SecsSinceLastAction.Equal(that1.SecsSinceLastAction) {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.UpstreamUrl != that1.UpstreamUrl {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.NumEjections != that1.NumEjections {
		return false
	}
	if this.Enforced != that1.Enforced {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OutlierDetectionEvent_EjectSuccessRateEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierDetectionEvent_EjectSuccessRateEvent)
	if !ok {
		that2, ok := that.(OutlierDetectionEvent_EjectSuccessRateEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EjectSuccessRateEvent.Equal(that1.EjectSuccessRateEvent) {
		return false
	}
	return true
}
func (this *OutlierDetectionEvent_EjectConsecutiveEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierDetectionEvent_EjectConsecutiveEvent)
	if !ok {
		that2, ok := that.(OutlierDetectionEvent_EjectConsecutiveEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EjectConsecutiveEvent.Equal(that1.EjectConsecutiveEvent) {
		return false
	}
	return true
}
func (this *OutlierEjectSuccessRate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierEjectSuccessRate)
	if !ok {
		that2, ok := that.(OutlierEjectSuccessRate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HostSuccessRate != that1.HostSuccessRate {
		return false
	}
	if this.ClusterAverageSuccessRate != that1.ClusterAverageSuccessRate {
		return false
	}
	if this.ClusterSuccessRateEjectionThreshold != that1.ClusterSuccessRateEjectionThreshold {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *OutlierEjectConsecutive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutlierEjectConsecutive)
	if !ok {
		that2, ok := that.(OutlierEjectConsecutive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *OutlierDetectionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutlierDetectionEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.Type))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Timestamp, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SecsSinceLastAction != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.SecsSinceLastAction.Size()))
		n2, err := m.SecsSinceLastAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ClusterName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(len(m.ClusterName)))
		i += copy(dAtA[i:], m.ClusterName)
	}
	if len(m.UpstreamUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(len(m.UpstreamUrl)))
		i += copy(dAtA[i:], m.UpstreamUrl)
	}
	if m.Action != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.Action))
	}
	if m.NumEjections != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.NumEjections))
	}
	if m.Enforced {
		dAtA[i] = 0x40
		i++
		if m.Enforced {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Event != nil {
		nn3, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OutlierDetectionEvent_EjectSuccessRateEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EjectSuccessRateEvent != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.EjectSuccessRateEvent.Size()))
		n4, err := m.EjectSuccessRateEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *OutlierDetectionEvent_EjectConsecutiveEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EjectConsecutiveEvent != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.EjectConsecutiveEvent.Size()))
		n5, err := m.EjectConsecutiveEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *OutlierEjectSuccessRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutlierEjectSuccessRate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HostSuccessRate != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.HostSuccessRate))
	}
	if m.ClusterAverageSuccessRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.ClusterAverageSuccessRate))
	}
	if m.ClusterSuccessRateEjectionThreshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOutlierDetectionEvent(dAtA, i, uint64(m.ClusterSuccessRateEjectionThreshold))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OutlierEjectConsecutive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutlierEjectConsecutive) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOutlierDetectionEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OutlierDetectionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOutlierDetectionEvent(uint64(m.Type))
	}
	if m.Timestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Timestamp)
		n += 1 + l + sovOutlierDetectionEvent(uint64(l))
	}
	if m.SecsSinceLastAction != nil {
		l = m.SecsSinceLastAction.Size()
		n += 1 + l + sovOutlierDetectionEvent(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovOutlierDetectionEvent(uint64(l))
	}
	l = len(m.UpstreamUrl)
	if l > 0 {
		n += 1 + l + sovOutlierDetectionEvent(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovOutlierDetectionEvent(uint64(m.Action))
	}
	if m.NumEjections != 0 {
		n += 1 + sovOutlierDetectionEvent(uint64(m.NumEjections))
	}
	if m.Enforced {
		n += 2
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutlierDetectionEvent_EjectSuccessRateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EjectSuccessRateEvent != nil {
		l = m.EjectSuccessRateEvent.Size()
		n += 1 + l + sovOutlierDetectionEvent(uint64(l))
	}
	return n
}
func (m *OutlierDetectionEvent_EjectConsecutiveEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EjectConsecutiveEvent != nil {
		l = m.EjectConsecutiveEvent.Size()
		n += 1 + l + sovOutlierDetectionEvent(uint64(l))
	}
	return n
}
func (m *OutlierEjectSuccessRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostSuccessRate != 0 {
		n += 1 + sovOutlierDetectionEvent(uint64(m.HostSuccessRate))
	}
	if m.ClusterAverageSuccessRate != 0 {
		n += 1 + sovOutlierDetectionEvent(uint64(m.ClusterAverageSuccessRate))
	}
	if m.ClusterSuccessRateEjectionThreshold != 0 {
		n += 1 + sovOutlierDetectionEvent(uint64(m.ClusterSuccessRateEjectionThreshold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OutlierEjectConsecutive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOutlierDetectionEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOutlierDetectionEvent(x uint64) (n int) {
	return sovOutlierDetectionEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutlierDetectionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutlierDetectionEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutlierDetectionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutlierDetectionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OutlierEjectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecsSinceLastAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecsSinceLastAction == nil {
				m.SecsSinceLastAction = &types.UInt64Value{}
			}
			if err := m.SecsSinceLastAction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpstreamUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEjections", wireType)
			}
			m.NumEjections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEjections |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enforced", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enforced = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EjectSuccessRateEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutlierEjectSuccessRate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OutlierDetectionEvent_EjectSuccessRateEvent{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EjectConsecutiveEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutlierEjectConsecutive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OutlierDetectionEvent_EjectConsecutiveEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutlierDetectionEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutlierEjectSuccessRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutlierDetectionEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutlierEjectSuccessRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutlierEjectSuccessRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostSuccessRate", wireType)
			}
			m.HostSuccessRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostSuccessRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAverageSuccessRate", wireType)
			}
			m.ClusterAverageSuccessRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterAverageSuccessRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterSuccessRateEjectionThreshold", wireType)
			}
			m.ClusterSuccessRateEjectionThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterSuccessRateEjectionThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutlierDetectionEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutlierEjectConsecutive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutlierDetectionEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutlierEjectConsecutive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutlierEjectConsecutive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOutlierDetectionEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutlierDetectionEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutlierDetectionEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutlierDetectionEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutlierDetectionEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutlierDetectionEvent
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthOutlierDetectionEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOutlierDetectionEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOutlierDetectionEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthOutlierDetectionEvent
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOutlierDetectionEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutlierDetectionEvent   = fmt.Errorf("proto: integer overflow")
)
