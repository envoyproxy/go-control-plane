// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/extensions/transport_sockets/tls/v4alpha/common.proto

package envoy_extensions_transport_sockets_tls_v4alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v4alpha "github.com/envoyproxy/go-control-plane/envoy/config/core/v4alpha"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TlsParameters_TlsProtocol int32

const (
	TlsParameters_TLS_AUTO TlsParameters_TlsProtocol = 0
	TlsParameters_TLSv1_0  TlsParameters_TlsProtocol = 1
	TlsParameters_TLSv1_1  TlsParameters_TlsProtocol = 2
	TlsParameters_TLSv1_2  TlsParameters_TlsProtocol = 3
	TlsParameters_TLSv1_3  TlsParameters_TlsProtocol = 4
)

var TlsParameters_TlsProtocol_name = map[int32]string{
	0: "TLS_AUTO",
	1: "TLSv1_0",
	2: "TLSv1_1",
	3: "TLSv1_2",
	4: "TLSv1_3",
}

var TlsParameters_TlsProtocol_value = map[string]int32{
	"TLS_AUTO": 0,
	"TLSv1_0":  1,
	"TLSv1_1":  2,
	"TLSv1_2":  3,
	"TLSv1_3":  4,
}

func (x TlsParameters_TlsProtocol) String() string {
	return proto.EnumName(TlsParameters_TlsProtocol_name, int32(x))
}

func (TlsParameters_TlsProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{0, 0}
}

type CertificateValidationContext_TrustChainVerification int32

const (
	CertificateValidationContext_VERIFY_TRUST_CHAIN CertificateValidationContext_TrustChainVerification = 0
	CertificateValidationContext_ACCEPT_UNTRUSTED   CertificateValidationContext_TrustChainVerification = 1
)

var CertificateValidationContext_TrustChainVerification_name = map[int32]string{
	0: "VERIFY_TRUST_CHAIN",
	1: "ACCEPT_UNTRUSTED",
}

var CertificateValidationContext_TrustChainVerification_value = map[string]int32{
	"VERIFY_TRUST_CHAIN": 0,
	"ACCEPT_UNTRUSTED":   1,
}

func (x CertificateValidationContext_TrustChainVerification) String() string {
	return proto.EnumName(CertificateValidationContext_TrustChainVerification_name, int32(x))
}

func (CertificateValidationContext_TrustChainVerification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{4, 0}
}

type TlsParameters struct {
	TlsMinimumProtocolVersion TlsParameters_TlsProtocol `protobuf:"varint,1,opt,name=tls_minimum_protocol_version,json=tlsMinimumProtocolVersion,proto3,enum=envoy.extensions.transport_sockets.tls.v4alpha.TlsParameters_TlsProtocol" json:"tls_minimum_protocol_version,omitempty"`
	TlsMaximumProtocolVersion TlsParameters_TlsProtocol `protobuf:"varint,2,opt,name=tls_maximum_protocol_version,json=tlsMaximumProtocolVersion,proto3,enum=envoy.extensions.transport_sockets.tls.v4alpha.TlsParameters_TlsProtocol" json:"tls_maximum_protocol_version,omitempty"`
	CipherSuites              []string                  `protobuf:"bytes,3,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	EcdhCurves                []string                  `protobuf:"bytes,4,rep,name=ecdh_curves,json=ecdhCurves,proto3" json:"ecdh_curves,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                  `json:"-"`
	XXX_unrecognized          []byte                    `json:"-"`
	XXX_sizecache             int32                     `json:"-"`
}

func (m *TlsParameters) Reset()         { *m = TlsParameters{} }
func (m *TlsParameters) String() string { return proto.CompactTextString(m) }
func (*TlsParameters) ProtoMessage()    {}
func (*TlsParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{0}
}

func (m *TlsParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TlsParameters.Unmarshal(m, b)
}
func (m *TlsParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TlsParameters.Marshal(b, m, deterministic)
}
func (m *TlsParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsParameters.Merge(m, src)
}
func (m *TlsParameters) XXX_Size() int {
	return xxx_messageInfo_TlsParameters.Size(m)
}
func (m *TlsParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsParameters.DiscardUnknown(m)
}

var xxx_messageInfo_TlsParameters proto.InternalMessageInfo

func (m *TlsParameters) GetTlsMinimumProtocolVersion() TlsParameters_TlsProtocol {
	if m != nil {
		return m.TlsMinimumProtocolVersion
	}
	return TlsParameters_TLS_AUTO
}

func (m *TlsParameters) GetTlsMaximumProtocolVersion() TlsParameters_TlsProtocol {
	if m != nil {
		return m.TlsMaximumProtocolVersion
	}
	return TlsParameters_TLS_AUTO
}

func (m *TlsParameters) GetCipherSuites() []string {
	if m != nil {
		return m.CipherSuites
	}
	return nil
}

func (m *TlsParameters) GetEcdhCurves() []string {
	if m != nil {
		return m.EcdhCurves
	}
	return nil
}

type PrivateKeyProvider struct {
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// Types that are valid to be assigned to ConfigType:
	//	*PrivateKeyProvider_TypedConfig
	ConfigType           isPrivateKeyProvider_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PrivateKeyProvider) Reset()         { *m = PrivateKeyProvider{} }
func (m *PrivateKeyProvider) String() string { return proto.CompactTextString(m) }
func (*PrivateKeyProvider) ProtoMessage()    {}
func (*PrivateKeyProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{1}
}

func (m *PrivateKeyProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateKeyProvider.Unmarshal(m, b)
}
func (m *PrivateKeyProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateKeyProvider.Marshal(b, m, deterministic)
}
func (m *PrivateKeyProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKeyProvider.Merge(m, src)
}
func (m *PrivateKeyProvider) XXX_Size() int {
	return xxx_messageInfo_PrivateKeyProvider.Size(m)
}
func (m *PrivateKeyProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKeyProvider.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKeyProvider proto.InternalMessageInfo

func (m *PrivateKeyProvider) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

type isPrivateKeyProvider_ConfigType interface {
	isPrivateKeyProvider_ConfigType()
}

type PrivateKeyProvider_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*PrivateKeyProvider_TypedConfig) isPrivateKeyProvider_ConfigType() {}

func (m *PrivateKeyProvider) GetConfigType() isPrivateKeyProvider_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *PrivateKeyProvider) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*PrivateKeyProvider_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrivateKeyProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrivateKeyProvider_TypedConfig)(nil),
	}
}

type TlsCertificate struct {
	CertificateChain           *v4alpha.DataSource   `protobuf:"bytes,1,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	PrivateKey                 *v4alpha.DataSource   `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PrivateKeyProvider         *PrivateKeyProvider   `protobuf:"bytes,6,opt,name=private_key_provider,json=privateKeyProvider,proto3" json:"private_key_provider,omitempty"`
	Password                   *v4alpha.DataSource   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	OcspStaple                 *v4alpha.DataSource   `protobuf:"bytes,4,opt,name=ocsp_staple,json=ocspStaple,proto3" json:"ocsp_staple,omitempty"`
	SignedCertificateTimestamp []*v4alpha.DataSource `protobuf:"bytes,5,rep,name=signed_certificate_timestamp,json=signedCertificateTimestamp,proto3" json:"signed_certificate_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}              `json:"-"`
	XXX_unrecognized           []byte                `json:"-"`
	XXX_sizecache              int32                 `json:"-"`
}

func (m *TlsCertificate) Reset()         { *m = TlsCertificate{} }
func (m *TlsCertificate) String() string { return proto.CompactTextString(m) }
func (*TlsCertificate) ProtoMessage()    {}
func (*TlsCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{2}
}

func (m *TlsCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TlsCertificate.Unmarshal(m, b)
}
func (m *TlsCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TlsCertificate.Marshal(b, m, deterministic)
}
func (m *TlsCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsCertificate.Merge(m, src)
}
func (m *TlsCertificate) XXX_Size() int {
	return xxx_messageInfo_TlsCertificate.Size(m)
}
func (m *TlsCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_TlsCertificate proto.InternalMessageInfo

func (m *TlsCertificate) GetCertificateChain() *v4alpha.DataSource {
	if m != nil {
		return m.CertificateChain
	}
	return nil
}

func (m *TlsCertificate) GetPrivateKey() *v4alpha.DataSource {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *TlsCertificate) GetPrivateKeyProvider() *PrivateKeyProvider {
	if m != nil {
		return m.PrivateKeyProvider
	}
	return nil
}

func (m *TlsCertificate) GetPassword() *v4alpha.DataSource {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *TlsCertificate) GetOcspStaple() *v4alpha.DataSource {
	if m != nil {
		return m.OcspStaple
	}
	return nil
}

func (m *TlsCertificate) GetSignedCertificateTimestamp() []*v4alpha.DataSource {
	if m != nil {
		return m.SignedCertificateTimestamp
	}
	return nil
}

type TlsSessionTicketKeys struct {
	Keys                 []*v4alpha.DataSource `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TlsSessionTicketKeys) Reset()         { *m = TlsSessionTicketKeys{} }
func (m *TlsSessionTicketKeys) String() string { return proto.CompactTextString(m) }
func (*TlsSessionTicketKeys) ProtoMessage()    {}
func (*TlsSessionTicketKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{3}
}

func (m *TlsSessionTicketKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TlsSessionTicketKeys.Unmarshal(m, b)
}
func (m *TlsSessionTicketKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TlsSessionTicketKeys.Marshal(b, m, deterministic)
}
func (m *TlsSessionTicketKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TlsSessionTicketKeys.Merge(m, src)
}
func (m *TlsSessionTicketKeys) XXX_Size() int {
	return xxx_messageInfo_TlsSessionTicketKeys.Size(m)
}
func (m *TlsSessionTicketKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_TlsSessionTicketKeys.DiscardUnknown(m)
}

var xxx_messageInfo_TlsSessionTicketKeys proto.InternalMessageInfo

func (m *TlsSessionTicketKeys) GetKeys() []*v4alpha.DataSource {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CertificateValidationContext struct {
	TrustedCa                         *v4alpha.DataSource                                 `protobuf:"bytes,1,opt,name=trusted_ca,json=trustedCa,proto3" json:"trusted_ca,omitempty"`
	VerifyCertificateSpki             []string                                            `protobuf:"bytes,3,rep,name=verify_certificate_spki,json=verifyCertificateSpki,proto3" json:"verify_certificate_spki,omitempty"`
	VerifyCertificateHash             []string                                            `protobuf:"bytes,2,rep,name=verify_certificate_hash,json=verifyCertificateHash,proto3" json:"verify_certificate_hash,omitempty"`
	MatchSubjectAltNames              []*v3.StringMatcher                                 `protobuf:"bytes,9,rep,name=match_subject_alt_names,json=matchSubjectAltNames,proto3" json:"match_subject_alt_names,omitempty"`
	RequireOcspStaple                 *wrappers.BoolValue                                 `protobuf:"bytes,5,opt,name=require_ocsp_staple,json=requireOcspStaple,proto3" json:"require_ocsp_staple,omitempty"`
	RequireSignedCertificateTimestamp *wrappers.BoolValue                                 `protobuf:"bytes,6,opt,name=require_signed_certificate_timestamp,json=requireSignedCertificateTimestamp,proto3" json:"require_signed_certificate_timestamp,omitempty"`
	Crl                               *v4alpha.DataSource                                 `protobuf:"bytes,7,opt,name=crl,proto3" json:"crl,omitempty"`
	AllowExpiredCertificate           bool                                                `protobuf:"varint,8,opt,name=allow_expired_certificate,json=allowExpiredCertificate,proto3" json:"allow_expired_certificate,omitempty"`
	TrustChainVerification            CertificateValidationContext_TrustChainVerification `protobuf:"varint,10,opt,name=trust_chain_verification,json=trustChainVerification,proto3,enum=envoy.extensions.transport_sockets.tls.v4alpha.CertificateValidationContext_TrustChainVerification" json:"trust_chain_verification,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}                                            `json:"-"`
	XXX_unrecognized                  []byte                                              `json:"-"`
	XXX_sizecache                     int32                                               `json:"-"`
}

func (m *CertificateValidationContext) Reset()         { *m = CertificateValidationContext{} }
func (m *CertificateValidationContext) String() string { return proto.CompactTextString(m) }
func (*CertificateValidationContext) ProtoMessage()    {}
func (*CertificateValidationContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f93cefe614821da, []int{4}
}

func (m *CertificateValidationContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateValidationContext.Unmarshal(m, b)
}
func (m *CertificateValidationContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateValidationContext.Marshal(b, m, deterministic)
}
func (m *CertificateValidationContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateValidationContext.Merge(m, src)
}
func (m *CertificateValidationContext) XXX_Size() int {
	return xxx_messageInfo_CertificateValidationContext.Size(m)
}
func (m *CertificateValidationContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateValidationContext.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateValidationContext proto.InternalMessageInfo

func (m *CertificateValidationContext) GetTrustedCa() *v4alpha.DataSource {
	if m != nil {
		return m.TrustedCa
	}
	return nil
}

func (m *CertificateValidationContext) GetVerifyCertificateSpki() []string {
	if m != nil {
		return m.VerifyCertificateSpki
	}
	return nil
}

func (m *CertificateValidationContext) GetVerifyCertificateHash() []string {
	if m != nil {
		return m.VerifyCertificateHash
	}
	return nil
}

func (m *CertificateValidationContext) GetMatchSubjectAltNames() []*v3.StringMatcher {
	if m != nil {
		return m.MatchSubjectAltNames
	}
	return nil
}

func (m *CertificateValidationContext) GetRequireOcspStaple() *wrappers.BoolValue {
	if m != nil {
		return m.RequireOcspStaple
	}
	return nil
}

func (m *CertificateValidationContext) GetRequireSignedCertificateTimestamp() *wrappers.BoolValue {
	if m != nil {
		return m.RequireSignedCertificateTimestamp
	}
	return nil
}

func (m *CertificateValidationContext) GetCrl() *v4alpha.DataSource {
	if m != nil {
		return m.Crl
	}
	return nil
}

func (m *CertificateValidationContext) GetAllowExpiredCertificate() bool {
	if m != nil {
		return m.AllowExpiredCertificate
	}
	return false
}

func (m *CertificateValidationContext) GetTrustChainVerification() CertificateValidationContext_TrustChainVerification {
	if m != nil {
		return m.TrustChainVerification
	}
	return CertificateValidationContext_VERIFY_TRUST_CHAIN
}

func init() {
	proto.RegisterEnum("envoy.extensions.transport_sockets.tls.v4alpha.TlsParameters_TlsProtocol", TlsParameters_TlsProtocol_name, TlsParameters_TlsProtocol_value)
	proto.RegisterEnum("envoy.extensions.transport_sockets.tls.v4alpha.CertificateValidationContext_TrustChainVerification", CertificateValidationContext_TrustChainVerification_name, CertificateValidationContext_TrustChainVerification_value)
	proto.RegisterType((*TlsParameters)(nil), "envoy.extensions.transport_sockets.tls.v4alpha.TlsParameters")
	proto.RegisterType((*PrivateKeyProvider)(nil), "envoy.extensions.transport_sockets.tls.v4alpha.PrivateKeyProvider")
	proto.RegisterType((*TlsCertificate)(nil), "envoy.extensions.transport_sockets.tls.v4alpha.TlsCertificate")
	proto.RegisterType((*TlsSessionTicketKeys)(nil), "envoy.extensions.transport_sockets.tls.v4alpha.TlsSessionTicketKeys")
	proto.RegisterType((*CertificateValidationContext)(nil), "envoy.extensions.transport_sockets.tls.v4alpha.CertificateValidationContext")
}

func init() {
	proto.RegisterFile("envoy/extensions/transport_sockets/tls/v4alpha/common.proto", fileDescriptor_2f93cefe614821da)
}

var fileDescriptor_2f93cefe614821da = []byte{
	// 1179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0xaf, 0x6c, 0xc7, 0x71, 0xe8, 0xa4, 0x50, 0xb9, 0xac, 0x51, 0x83, 0xac, 0x73, 0xbd, 0x0e,
	0xc8, 0xa1, 0x90, 0xd6, 0x64, 0x40, 0x37, 0xaf, 0xe8, 0x1a, 0xb9, 0x09, 0x92, 0xfe, 0x49, 0x03,
	0x59, 0x09, 0x30, 0xec, 0x40, 0x30, 0x0a, 0x13, 0x73, 0x91, 0x45, 0x8d, 0xa4, 0xdc, 0xf8, 0x36,
	0xec, 0x34, 0x60, 0xb7, 0xa2, 0xa7, 0x9d, 0x07, 0x6c, 0xdf, 0x60, 0xc3, 0xee, 0x03, 0x76, 0xdd,
	0x27, 0xd8, 0xb1, 0xdf, 0xa1, 0xa7, 0x81, 0xa4, 0x1c, 0x2b, 0x71, 0xda, 0xc5, 0x87, 0xdd, 0x44,
	0xbe, 0xf7, 0xfb, 0xf1, 0xf1, 0xbd, 0xdf, 0x7b, 0x22, 0xf8, 0x82, 0x24, 0x7d, 0x36, 0xf0, 0xc8,
	0x89, 0x24, 0x89, 0xa0, 0x2c, 0x11, 0x9e, 0xe4, 0x38, 0x11, 0x29, 0xe3, 0x12, 0x09, 0x16, 0x1d,
	0x13, 0x29, 0x3c, 0x19, 0x0b, 0xaf, 0xff, 0x29, 0x8e, 0xd3, 0x2e, 0xf6, 0x22, 0xd6, 0xeb, 0xb1,
	0xc4, 0x4d, 0x39, 0x93, 0x0c, 0xba, 0x1a, 0xec, 0x8e, 0xc0, 0xee, 0x18, 0xd8, 0x95, 0xb1, 0x70,
	0x73, 0xf0, 0xe2, 0x6d, 0x73, 0x58, 0xc4, 0x92, 0x43, 0x7a, 0xe4, 0x45, 0x8c, 0x93, 0x53, 0xde,
	0x7d, 0x2c, 0x88, 0x61, 0x5d, 0x6c, 0x1a, 0x2f, 0x39, 0x48, 0x89, 0xd7, 0xc3, 0x32, 0xea, 0x12,
	0xee, 0xf5, 0x57, 0x3d, 0x21, 0x39, 0x4d, 0x8e, 0x72, 0x9f, 0x1b, 0x47, 0x8c, 0x1d, 0xc5, 0xc4,
	0xd3, 0xab, 0xfd, 0xec, 0xd0, 0xc3, 0xc9, 0x20, 0x37, 0x2d, 0x9d, 0x37, 0x09, 0xc9, 0xb3, 0x48,
	0xe6, 0xd6, 0x9b, 0xe7, 0xad, 0x2f, 0x38, 0x4e, 0x53, 0xc2, 0x45, 0x6e, 0x6f, 0x64, 0x07, 0x29,
	0xf6, 0x70, 0x92, 0x30, 0x89, 0xa5, 0xce, 0x87, 0x50, 0x77, 0x93, 0xb4, 0x3f, 0x0c, 0xef, 0x83,
	0x71, 0x0f, 0x89, 0x65, 0x36, 0x24, 0xb8, 0x35, 0x66, 0xee, 0x13, 0xae, 0x92, 0x33, 0x0a, 0x7e,
	0xa1, 0x8f, 0x63, 0x7a, 0x80, 0x25, 0xf1, 0x86, 0x1f, 0xc6, 0xd0, 0x7c, 0x55, 0x01, 0x73, 0x61,
	0x2c, 0x76, 0x30, 0xc7, 0x3d, 0x22, 0x09, 0x17, 0xf0, 0x95, 0x05, 0x96, 0x64, 0x2c, 0x50, 0x8f,
	0x26, 0xb4, 0x97, 0xf5, 0x90, 0xf6, 0x8b, 0x58, 0x8c, 0x72, 0x52, 0xc7, 0x6a, 0x58, 0xcb, 0x57,
	0x57, 0xb6, 0x26, 0xac, 0x84, 0x7b, 0xe6, 0x14, 0xbd, 0xca, 0x89, 0xfd, 0xda, 0x1b, 0x7f, 0xea,
	0x7b, 0xab, 0x64, 0x5b, 0xc1, 0x0d, 0x19, 0x8b, 0x67, 0xe6, 0xdc, 0xa1, 0x75, 0xcf, 0x9c, 0x3a,
	0x0a, 0x0b, 0x9f, 0x5c, 0x1c, 0x56, 0xe9, 0x7f, 0x0e, 0xcb, 0x9c, 0x7b, 0x3e, 0xac, 0x8f, 0xc0,
	0x5c, 0x44, 0xd3, 0x2e, 0xe1, 0x48, 0x64, 0x54, 0x12, 0xe1, 0x94, 0x1b, 0xe5, 0xe5, 0x99, 0x60,
	0xd6, 0x6c, 0x76, 0xf4, 0x1e, 0xfc, 0x10, 0xd4, 0x49, 0x74, 0xd0, 0x45, 0x51, 0xc6, 0xfb, 0x44,
	0x38, 0x15, 0xed, 0x02, 0xd4, 0x56, 0x5b, 0xef, 0x34, 0x9f, 0x83, 0x7a, 0xe1, 0x64, 0x38, 0x0b,
	0x6a, 0xe1, 0xd3, 0x0e, 0x5a, 0xdb, 0x0d, 0x9f, 0xdb, 0x57, 0x60, 0x1d, 0x4c, 0x87, 0x4f, 0x3b,
	0xfd, 0xbb, 0xe8, 0x13, 0xdb, 0x1a, 0x2d, 0xee, 0xda, 0xa5, 0xd1, 0x62, 0xc5, 0x2e, 0x8f, 0x16,
	0xab, 0x76, 0xa5, 0xf5, 0xe0, 0xa7, 0x3f, 0x7f, 0xb8, 0xf9, 0x39, 0xb8, 0x77, 0xd9, 0x64, 0xac,
	0x9e, 0xcd, 0x43, 0xf3, 0xb5, 0x05, 0xe0, 0x0e, 0xa7, 0x7d, 0x2c, 0xc9, 0x13, 0x32, 0xd8, 0xe1,
	0xac, 0x4f, 0x0f, 0x08, 0x87, 0x77, 0xc0, 0x5c, 0x9a, 0x7f, 0xa3, 0x04, 0xf7, 0x88, 0xd6, 0xc2,
	0x8c, 0x3f, 0xfd, 0xc6, 0xaf, 0xf0, 0x52, 0xc3, 0x0a, 0x66, 0x87, 0xd6, 0x6d, 0xdc, 0x23, 0x70,
	0x0d, 0xcc, 0xaa, 0x8e, 0x3a, 0x40, 0xa6, 0xfb, 0x9c, 0x72, 0xc3, 0x5a, 0xae, 0xaf, 0xcc, 0xbb,
	0xa6, 0x1f, 0xdc, 0x61, 0x3f, 0xb8, 0x6b, 0xc9, 0xc0, 0xaf, 0xfe, 0xfe, 0xdb, 0x8f, 0x3f, 0x97,
	0xac, 0xcd, 0x2b, 0x41, 0x5d, 0x63, 0xda, 0x1a, 0xd2, 0x6a, 0xab, 0x7b, 0x3c, 0x00, 0xf7, 0x2f,
	0x7f, 0x8f, 0xf1, 0xa8, 0xfd, 0x39, 0x50, 0x37, 0x11, 0x20, 0x45, 0xfd, 0xb8, 0x52, 0x2b, 0xd9,
	0xe5, 0xa0, 0x6a, 0xb6, 0x9a, 0xaf, 0x2b, 0xe0, 0x6a, 0x18, 0x8b, 0x36, 0xe1, 0x92, 0x1e, 0xd2,
	0x08, 0x4b, 0x02, 0x03, 0x70, 0x2d, 0x1a, 0x2d, 0x51, 0xd4, 0xc5, 0xd4, 0xa8, 0xbe, 0xbe, 0xf2,
	0x71, 0x2e, 0x2f, 0x03, 0x76, 0xd5, 0x3c, 0x39, 0x55, 0xd2, 0x23, 0x2c, 0x71, 0x87, 0x65, 0x3c,
	0x22, 0x81, 0x5d, 0xc0, 0xb7, 0x15, 0x1c, 0x6e, 0x83, 0x7a, 0x6a, 0x22, 0x43, 0xc7, 0x64, 0xa0,
	0xc5, 0x7a, 0x59, 0xb6, 0x61, 0x6e, 0x02, 0x90, 0x9e, 0xde, 0x0d, 0x4a, 0x30, 0x5f, 0xe0, 0x43,
	0xc3, 0xbc, 0x3b, 0x55, 0x4d, 0xec, 0x4f, 0xda, 0x05, 0xe3, 0x59, 0x0b, 0x60, 0x3a, 0x5e, 0xff,
	0x2d, 0x50, 0x4b, 0xb1, 0x10, 0x2f, 0x18, 0x3f, 0xc8, 0xab, 0x39, 0xe1, 0x15, 0x4e, 0xe1, 0x70,
	0x03, 0xd4, 0x59, 0x24, 0x52, 0x24, 0x24, 0x4e, 0x63, 0xe2, 0x54, 0x26, 0x49, 0x2f, 0x50, 0xc8,
	0x8e, 0x06, 0xc2, 0x23, 0xb0, 0x24, 0xe8, 0x51, 0xa2, 0x54, 0x56, 0xa8, 0x99, 0xa4, 0x3d, 0x22,
	0x24, 0xee, 0xa5, 0xce, 0x54, 0xa3, 0x7c, 0x79, 0xe2, 0x45, 0x43, 0x55, 0x10, 0x43, 0x38, 0x24,
	0x6a, 0x7d, 0xa9, 0xa4, 0xd8, 0x02, 0x9f, 0x4d, 0xd4, 0x52, 0x05, 0xa6, 0xe6, 0xaf, 0x16, 0x98,
	0x0f, 0x63, 0xd1, 0x21, 0x42, 0xe1, 0x42, 0xaa, 0x7c, 0x9f, 0x90, 0x81, 0x80, 0x5b, 0xa0, 0x72,
	0x4c, 0x06, 0xc2, 0xb1, 0x26, 0x08, 0xd5, 0xbf, 0xfa, 0xc6, 0x9f, 0x7a, 0x69, 0x95, 0x6a, 0x56,
	0x9e, 0x59, 0x4d, 0xd1, 0x5a, 0x57, 0x41, 0x3e, 0x04, 0x0f, 0x26, 0x0a, 0x72, 0x2c, 0xa2, 0xe6,
	0x3f, 0xd3, 0x60, 0xa9, 0x10, 0xfa, 0x9e, 0xf9, 0x67, 0x50, 0x96, 0xb4, 0x59, 0x22, 0xc9, 0x89,
	0x84, 0x8f, 0x00, 0x90, 0x3c, 0x13, 0x52, 0xa5, 0x1d, 0x4f, 0xd6, 0x1b, 0x33, 0x39, 0xb0, 0x8d,
	0xe1, 0x06, 0x58, 0xe8, 0x13, 0x4e, 0x0f, 0x07, 0x67, 0x6a, 0x27, 0xd2, 0x63, 0x6a, 0xc6, 0xa8,
	0xba, 0x64, 0xfd, 0xa5, 0x55, 0x6b, 0x56, 0x79, 0xa5, 0x71, 0x67, 0xf9, 0x4e, 0xf0, 0xbe, 0x71,
	0x2f, 0x84, 0xd6, 0x49, 0x8f, 0xe9, 0x5b, 0x78, 0xba, 0x58, 0x74, 0x9d, 0xd2, 0x18, 0xcf, 0xc3,
	0x65, 0x74, 0x01, 0xcf, 0x26, 0x16, 0x5d, 0xf8, 0x35, 0x58, 0xd0, 0x7f, 0x7f, 0x24, 0xb2, 0xfd,
	0x6f, 0x48, 0x24, 0x11, 0x8e, 0xa5, 0x9e, 0x73, 0xc2, 0x99, 0xd1, 0xb5, 0xb9, 0x9d, 0x5f, 0x51,
	0xcd, 0x11, 0x37, 0x7f, 0x28, 0xa8, 0x24, 0x76, 0xf4, 0x43, 0xe1, 0x99, 0xd9, 0x08, 0xe6, 0xb5,
	0xa5, 0x63, 0x38, 0xd6, 0x62, 0xa9, 0x86, 0xa1, 0x80, 0x8f, 0xc1, 0x7b, 0x9c, 0x7c, 0x9b, 0x51,
	0x4e, 0x50, 0x51, 0xf8, 0x53, 0x3a, 0x77, 0x8b, 0x63, 0x43, 0xd1, 0x67, 0x2c, 0xde, 0xc3, 0x71,
	0x46, 0x82, 0x6b, 0x39, 0xec, 0xf9, 0x48, 0xf4, 0xc7, 0xe0, 0xf6, 0x90, 0xeb, 0x9d, 0xe2, 0xaf,
	0xfe, 0x27, 0xf9, 0xad, 0x9c, 0xa7, 0xf3, 0x56, 0xe1, 0xc3, 0x7b, 0xa0, 0x1c, 0xf1, 0xd8, 0x99,
	0x9e, 0xa4, 0xc8, 0x0a, 0x01, 0x5b, 0xe0, 0x06, 0x8e, 0x63, 0xf6, 0x02, 0x91, 0x93, 0x94, 0xf2,
	0xb3, 0x41, 0x3a, 0xb5, 0x86, 0xb5, 0x5c, 0x0b, 0x16, 0xb4, 0xc3, 0xba, 0xb1, 0x17, 0x67, 0xf0,
	0x2f, 0x16, 0x70, 0xb4, 0x50, 0xcc, 0xf8, 0x45, 0xba, 0x60, 0xca, 0xa4, 0x7e, 0xf5, 0x40, 0xff,
	0xea, 0xa3, 0x49, 0x87, 0xdc, 0xbb, 0x14, 0xed, 0x86, 0xea, 0x30, 0x3d, 0xab, 0xf7, 0x0a, 0x47,
	0x15, 0x1e, 0x01, 0xd7, 0xe5, 0x85, 0x1e, 0xcd, 0x0d, 0x70, 0xfd, 0x62, 0x2c, 0xbc, 0x0e, 0xe0,
	0xde, 0x7a, 0xb0, 0xb5, 0xf1, 0x15, 0x0a, 0x83, 0xdd, 0x4e, 0x88, 0xda, 0x9b, 0x6b, 0x5b, 0xdb,
	0xf6, 0x15, 0x38, 0x0f, 0xec, 0xb5, 0x76, 0x7b, 0x7d, 0x27, 0x44, 0xbb, 0xdb, 0xda, 0xb2, 0xfe,
	0xc8, 0xb6, 0x5a, 0xcf, 0x54, 0xeb, 0x6e, 0x82, 0x8d, 0xcb, 0xb7, 0xee, 0xbb, 0xee, 0xf3, 0xb8,
	0x52, 0xab, 0xd8, 0x53, 0xc1, 0xb0, 0x2f, 0xce, 0x0b, 0xda, 0xdf, 0xfd, 0xe3, 0xbb, 0xbf, 0xfe,
	0xae, 0x96, 0xec, 0x32, 0xb8, 0x4f, 0x99, 0x49, 0x64, 0xca, 0xd9, 0xc9, 0x60, 0xc2, 0x9c, 0xfa,
	0xf5, 0xb6, 0x7e, 0x9d, 0xeb, 0xa7, 0xcb, 0x8e, 0xb5, 0x5f, 0xd5, 0x12, 0x5b, 0xfd, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0x6b, 0x07, 0x6d, 0xe4, 0x0b, 0x00, 0x00,
}
