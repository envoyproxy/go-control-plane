// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.3
// source: envoy/extensions/quic/connection_id_generator/quic_lb/v3/quic_lb.proto

package quic_lbv3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	v31 "github.com/envoyproxy/go-control-plane/envoy/extensions/transport_sockets/tls/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for a connection ID generator implementation for the QUIC-LB draft RFC for
// routable connection IDs.
//
// Connection IDs always have the length self encoded, as described in
// https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers#name-length-self-description.
//
// See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers for details.
//
// .. warning::
//
//	This is still a work in progress. Performance is expected to be poor. Interoperability testing
//	has not yet been performed.
//
// [#next-free-field: 7]
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use the unencrypted mode. This is useful for testing, but allows for linking different CIDs
	// for the same connection, and leaks information about the valid server IDs in use. This should
	// only be used for testing.
	UnsafeUnencryptedTestingMode bool `protobuf:"varint,1,opt,name=unsafe_unencrypted_testing_mode,json=unsafeUnencryptedTestingMode,proto3" json:"unsafe_unencrypted_testing_mode,omitempty"`
	// Must be at least 1 octet.
	// The length of server_id and nonce_length_bytes must be 18 or less.
	// See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers#name-server-id-allocation.
	ServerId *v3.DataSource `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// If true, indicates that the :ref:`server_id
	// <envoy_v3_api_field_extensions.quic.connection_id_generator.quic_lb.v3.Config.server_id>` is base64 encoded.
	//
	// This can be useful if the ID may contain binary data and must be transmitted as a string, for example in
	// an environment variable.
	ServerIdBase64Encoded bool `protobuf:"varint,6,opt,name=server_id_base64_encoded,json=serverIdBase64Encoded,proto3" json:"server_id_base64_encoded,omitempty"`
	// Optional validation of the expected server ID length. If this is non-zero and the value in “server_id“
	// does not have a matching length, a configuration error is generated. This can be useful for validating
	// that the server ID is valid.
	ExpectedServerIdLength uint32 `protobuf:"varint,3,opt,name=expected_server_id_length,json=expectedServerIdLength,proto3" json:"expected_server_id_length,omitempty"`
	// The nonce length must be at least 4 bytes.
	// The length of server_id and nonce_length_bytes must be 18 bytes or less.
	NonceLengthBytes uint32 `protobuf:"varint,4,opt,name=nonce_length_bytes,json=nonceLengthBytes,proto3" json:"nonce_length_bytes,omitempty"`
	// Configuration to fetch the encryption key and configuration version.
	//
	// The SDS service is for a :ref:`GenericSecret <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.GenericSecret>`.
	// The data should populate :ref:`secrets <envoy_v3_api_field_extensions.transport_sockets.tls.v3.GenericSecret.secrets>`:
	//
	// "encryption_key" must contain the 16 byte encryption key.
	//
	// "configuration_version" must contain a 1 byte unsigned integer of value less than 7.
	// See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers#name-config-rotation.
	EncryptionParameters *v31.SdsSecretConfig `protobuf:"bytes,5,opt,name=encryption_parameters,json=encryptionParameters,proto3" json:"encryption_parameters,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetUnsafeUnencryptedTestingMode() bool {
	if x != nil {
		return x.UnsafeUnencryptedTestingMode
	}
	return false
}

func (x *Config) GetServerId() *v3.DataSource {
	if x != nil {
		return x.ServerId
	}
	return nil
}

func (x *Config) GetServerIdBase64Encoded() bool {
	if x != nil {
		return x.ServerIdBase64Encoded
	}
	return false
}

func (x *Config) GetExpectedServerIdLength() uint32 {
	if x != nil {
		return x.ExpectedServerIdLength
	}
	return 0
}

func (x *Config) GetNonceLengthBytes() uint32 {
	if x != nil {
		return x.NonceLengthBytes
	}
	return 0
}

func (x *Config) GetEncryptionParameters() *v31.SdsSecretConfig {
	if x != nil {
		return x.EncryptionParameters
	}
	return nil
}

var File_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto protoreflect.FileDescriptor

var file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDesc = []byte{
	0x0a, 0x46, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x71, 0x75, 0x69, 0x63, 0x5f, 0x6c, 0x62, 0x2f, 0x76, 0x33, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x5f,
	0x6c, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x6c, 0x62, 0x2e,
	0x76, 0x33, 0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x74, 0x6c, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x78, 0x64, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64,
	0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x45, 0x0a, 0x1f, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65,
	0x55, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x18, 0x12, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x12,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18,
	0x10, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x74, 0x6c, 0x73, 0x2e, 0x76, 0x33,
	0x2e, 0x53, 0x64, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x3a, 0x08, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08, 0x01, 0x42, 0xca, 0x01, 0xba, 0x80, 0xc8,
	0xd1, 0x06, 0x02, 0x10, 0x02, 0x0a, 0x46, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x6c, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x0b, 0x51,
	0x75, 0x69, 0x63, 0x4c, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x69, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x5f, 0x6c, 0x62, 0x2f, 0x76, 0x33, 0x3b, 0x71, 0x75,
	0x69, 0x63, 0x5f, 0x6c, 0x62, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescOnce sync.Once
	file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescData = file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDesc
)

func file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescGZIP() []byte {
	file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescData)
	})
	return file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDescData
}

var file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_goTypes = []interface{}{
	(*Config)(nil),              // 0: envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config
	(*v3.DataSource)(nil),       // 1: envoy.config.core.v3.DataSource
	(*v31.SdsSecretConfig)(nil), // 2: envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig
}
var file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_depIdxs = []int32{
	1, // 0: envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config.server_id:type_name -> envoy.config.core.v3.DataSource
	2, // 1: envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config.encryption_parameters:type_name -> envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_init() }
func file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_init() {
	if File_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_msgTypes,
	}.Build()
	File_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto = out.File
	file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_rawDesc = nil
	file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_goTypes = nil
	file_envoy_extensions_quic_connection_id_generator_quic_lb_v3_quic_lb_proto_depIdxs = nil
}
