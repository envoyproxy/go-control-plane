// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/extensions/compression/gzip/compressor/v3/gzip.proto

package envoy_extensions_compression_gzip_compressor_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Gzip_CompressionStrategy int32

const (
	Gzip_DEFAULT_STRATEGY Gzip_CompressionStrategy = 0
	Gzip_FILTERED         Gzip_CompressionStrategy = 1
	Gzip_HUFFMAN_ONLY     Gzip_CompressionStrategy = 2
	Gzip_RLE              Gzip_CompressionStrategy = 3
	Gzip_FIXED            Gzip_CompressionStrategy = 4
)

var Gzip_CompressionStrategy_name = map[int32]string{
	0: "DEFAULT_STRATEGY",
	1: "FILTERED",
	2: "HUFFMAN_ONLY",
	3: "RLE",
	4: "FIXED",
}

var Gzip_CompressionStrategy_value = map[string]int32{
	"DEFAULT_STRATEGY": 0,
	"FILTERED":         1,
	"HUFFMAN_ONLY":     2,
	"RLE":              3,
	"FIXED":            4,
}

func (x Gzip_CompressionStrategy) String() string {
	return proto.EnumName(Gzip_CompressionStrategy_name, int32(x))
}

func (Gzip_CompressionStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_163c2d1709b71e19, []int{0, 0}
}

type Gzip_CompressionLevel int32

const (
	Gzip_DEFAULT_COMPRESSION Gzip_CompressionLevel = 0
	Gzip_BEST_SPEED          Gzip_CompressionLevel = 1
	Gzip_COMPRESSION_LEVEL_1 Gzip_CompressionLevel = 1
	Gzip_COMPRESSION_LEVEL_2 Gzip_CompressionLevel = 2
	Gzip_COMPRESSION_LEVEL_3 Gzip_CompressionLevel = 3
	Gzip_COMPRESSION_LEVEL_4 Gzip_CompressionLevel = 4
	Gzip_COMPRESSION_LEVEL_5 Gzip_CompressionLevel = 5
	Gzip_COMPRESSION_LEVEL_6 Gzip_CompressionLevel = 6
	Gzip_COMPRESSION_LEVEL_7 Gzip_CompressionLevel = 7
	Gzip_COMPRESSION_LEVEL_8 Gzip_CompressionLevel = 8
	Gzip_COMPRESSION_LEVEL_9 Gzip_CompressionLevel = 9
	Gzip_BEST_COMPRESSION    Gzip_CompressionLevel = 9
)

var Gzip_CompressionLevel_name = map[int32]string{
	0: "DEFAULT_COMPRESSION",
	1: "BEST_SPEED",
	// Duplicate value: 1: "COMPRESSION_LEVEL_1",
	2: "COMPRESSION_LEVEL_2",
	3: "COMPRESSION_LEVEL_3",
	4: "COMPRESSION_LEVEL_4",
	5: "COMPRESSION_LEVEL_5",
	6: "COMPRESSION_LEVEL_6",
	7: "COMPRESSION_LEVEL_7",
	8: "COMPRESSION_LEVEL_8",
	9: "COMPRESSION_LEVEL_9",
	// Duplicate value: 9: "BEST_COMPRESSION",
}

var Gzip_CompressionLevel_value = map[string]int32{
	"DEFAULT_COMPRESSION": 0,
	"BEST_SPEED":          1,
	"COMPRESSION_LEVEL_1": 1,
	"COMPRESSION_LEVEL_2": 2,
	"COMPRESSION_LEVEL_3": 3,
	"COMPRESSION_LEVEL_4": 4,
	"COMPRESSION_LEVEL_5": 5,
	"COMPRESSION_LEVEL_6": 6,
	"COMPRESSION_LEVEL_7": 7,
	"COMPRESSION_LEVEL_8": 8,
	"COMPRESSION_LEVEL_9": 9,
	"BEST_COMPRESSION":    9,
}

func (x Gzip_CompressionLevel) String() string {
	return proto.EnumName(Gzip_CompressionLevel_name, int32(x))
}

func (Gzip_CompressionLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_163c2d1709b71e19, []int{0, 1}
}

type Gzip struct {
	MemoryLevel          *wrappers.UInt32Value    `protobuf:"bytes,1,opt,name=memory_level,json=memoryLevel,proto3" json:"memory_level,omitempty"`
	CompressionLevel     Gzip_CompressionLevel    `protobuf:"varint,2,opt,name=compression_level,json=compressionLevel,proto3,enum=envoy.extensions.compression.gzip.compressor.v3.Gzip_CompressionLevel" json:"compression_level,omitempty"`
	CompressionStrategy  Gzip_CompressionStrategy `protobuf:"varint,3,opt,name=compression_strategy,json=compressionStrategy,proto3,enum=envoy.extensions.compression.gzip.compressor.v3.Gzip_CompressionStrategy" json:"compression_strategy,omitempty"`
	WindowBits           *wrappers.UInt32Value    `protobuf:"bytes,4,opt,name=window_bits,json=windowBits,proto3" json:"window_bits,omitempty"`
	ChunkSize            *wrappers.UInt32Value    `protobuf:"bytes,5,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Gzip) Reset()         { *m = Gzip{} }
func (m *Gzip) String() string { return proto.CompactTextString(m) }
func (*Gzip) ProtoMessage()    {}
func (*Gzip) Descriptor() ([]byte, []int) {
	return fileDescriptor_163c2d1709b71e19, []int{0}
}

func (m *Gzip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gzip.Unmarshal(m, b)
}
func (m *Gzip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gzip.Marshal(b, m, deterministic)
}
func (m *Gzip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gzip.Merge(m, src)
}
func (m *Gzip) XXX_Size() int {
	return xxx_messageInfo_Gzip.Size(m)
}
func (m *Gzip) XXX_DiscardUnknown() {
	xxx_messageInfo_Gzip.DiscardUnknown(m)
}

var xxx_messageInfo_Gzip proto.InternalMessageInfo

func (m *Gzip) GetMemoryLevel() *wrappers.UInt32Value {
	if m != nil {
		return m.MemoryLevel
	}
	return nil
}

func (m *Gzip) GetCompressionLevel() Gzip_CompressionLevel {
	if m != nil {
		return m.CompressionLevel
	}
	return Gzip_DEFAULT_COMPRESSION
}

func (m *Gzip) GetCompressionStrategy() Gzip_CompressionStrategy {
	if m != nil {
		return m.CompressionStrategy
	}
	return Gzip_DEFAULT_STRATEGY
}

func (m *Gzip) GetWindowBits() *wrappers.UInt32Value {
	if m != nil {
		return m.WindowBits
	}
	return nil
}

func (m *Gzip) GetChunkSize() *wrappers.UInt32Value {
	if m != nil {
		return m.ChunkSize
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.extensions.compression.gzip.compressor.v3.Gzip_CompressionStrategy", Gzip_CompressionStrategy_name, Gzip_CompressionStrategy_value)
	proto.RegisterEnum("envoy.extensions.compression.gzip.compressor.v3.Gzip_CompressionLevel", Gzip_CompressionLevel_name, Gzip_CompressionLevel_value)
	proto.RegisterType((*Gzip)(nil), "envoy.extensions.compression.gzip.compressor.v3.Gzip")
}

func init() {
	proto.RegisterFile("envoy/extensions/compression/gzip/compressor/v3/gzip.proto", fileDescriptor_163c2d1709b71e19)
}

var fileDescriptor_163c2d1709b71e19 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x5f, 0x6f, 0x9a, 0x50,
	0x18, 0xc6, 0x0b, 0xa2, 0x96, 0x53, 0xd3, 0x9d, 0x1d, 0x9b, 0x94, 0x34, 0xdb, 0xd2, 0xf5, 0xca,
	0xf4, 0x02, 0x32, 0xdd, 0xff, 0x64, 0x17, 0xa5, 0x42, 0xcb, 0x42, 0xd5, 0x00, 0x36, 0xeb, 0x15,
	0x41, 0x3d, 0x73, 0x64, 0xca, 0x21, 0x70, 0xc4, 0x6a, 0xb2, 0xc4, 0xec, 0x62, 0xc9, 0xbe, 0xd0,
	0x2e, 0xf6, 0x09, 0x76, 0xbb, 0xaf, 0xe3, 0xd5, 0x02, 0xe8, 0x24, 0x2d, 0x4b, 0xda, 0xec, 0x4e,
	0xcf, 0xef, 0x7d, 0xde, 0xf7, 0x79, 0x5f, 0x1e, 0xf0, 0x16, 0x7b, 0x11, 0x99, 0x49, 0xf8, 0x9a,
	0x62, 0x2f, 0x74, 0x89, 0x17, 0x4a, 0x7d, 0x32, 0xf6, 0x03, 0x1c, 0xc6, 0x7f, 0xa4, 0xe1, 0xdc,
	0xf5, 0xff, 0x3e, 0x90, 0x40, 0x8a, 0x1a, 0xc9, 0x93, 0xe8, 0x07, 0x84, 0x12, 0x24, 0x25, 0x5a,
	0x71, 0xa3, 0x15, 0x33, 0x5a, 0x31, 0x29, 0xdc, 0x68, 0xc5, 0xa8, 0x71, 0xf0, 0x64, 0x48, 0xc8,
	0x70, 0x84, 0xa5, 0x44, 0xde, 0x9b, 0x7c, 0x94, 0xa6, 0x81, 0xe3, 0xfb, 0x38, 0x08, 0xd3, 0x86,
	0x07, 0x8f, 0x27, 0x03, 0xdf, 0x91, 0x1c, 0xcf, 0x23, 0xd4, 0xa1, 0x89, 0x99, 0x90, 0x3a, 0x74,
	0xb2, 0xc6, 0x4f, 0x6f, 0xe1, 0x08, 0x07, 0xf1, 0x2c, 0xd7, 0x1b, 0xae, 0x4a, 0xf6, 0x23, 0x67,
	0xe4, 0x0e, 0x1c, 0x8a, 0xa5, 0xf5, 0x8f, 0x14, 0x1c, 0x7d, 0x2f, 0x03, 0xee, 0x6c, 0xee, 0xfa,
	0xe8, 0x3d, 0xa8, 0x8c, 0xf1, 0x98, 0x04, 0x33, 0x7b, 0x84, 0x23, 0x3c, 0x12, 0x98, 0x43, 0xa6,
	0xb6, 0x53, 0x7f, 0x24, 0xa6, 0xd6, 0xc4, 0xb5, 0x35, 0xb1, 0xab, 0x79, 0xb4, 0x51, 0xbf, 0x74,
	0x46, 0x13, 0x2c, 0xf3, 0x4b, 0xb9, 0x74, 0xcc, 0x09, 0x7c, 0x8d, 0x31, 0x76, 0x52, 0xb1, 0x1e,
	0x6b, 0xd1, 0x17, 0xf0, 0x30, 0xb3, 0xf1, 0xaa, 0x21, 0x7b, 0xc8, 0xd4, 0x76, 0xeb, 0xaa, 0x78,
	0xcf, 0xe3, 0x88, 0xb1, 0x3b, 0xf1, 0x74, 0x53, 0x93, 0x8c, 0x90, 0xb7, 0x97, 0x72, 0xf1, 0x2b,
	0xc3, 0x42, 0xc6, 0x80, 0xfd, 0x1b, 0x0c, 0x7d, 0x63, 0xc0, 0x5e, 0x76, 0x7e, 0x48, 0x03, 0x87,
	0xe2, 0xe1, 0x4c, 0x28, 0x24, 0x16, 0xb4, 0xff, 0xb6, 0x60, 0xae, 0x1a, 0x66, 0x5c, 0x54, 0xfb,
	0xb7, 0x31, 0x3a, 0x07, 0x3b, 0x53, 0xd7, 0x1b, 0x90, 0xa9, 0xdd, 0x73, 0x69, 0x28, 0x70, 0x77,
	0x3f, 0xe9, 0x83, 0x1a, 0x6f, 0x80, 0x54, 0x2b, 0xbb, 0x34, 0x44, 0x1a, 0x00, 0xfd, 0x4f, 0x13,
	0xef, 0xb3, 0x1d, 0xba, 0x73, 0x2c, 0x14, 0xef, 0xd0, 0xa8, 0xb2, 0x94, 0xf9, 0xe3, 0xb2, 0xb0,
	0x58, 0x70, 0xb5, 0xc5, 0xa1, 0xc1, 0x27, 0x6a, 0xd3, 0x9d, 0xe3, 0x23, 0x1b, 0x54, 0x73, 0x56,
	0x41, 0x7b, 0x00, 0x36, 0x15, 0xf5, 0xa4, 0xab, 0x5b, 0xb6, 0x69, 0x19, 0x27, 0x96, 0x72, 0x76,
	0x05, 0xb7, 0x50, 0x05, 0x6c, 0xab, 0x9a, 0x6e, 0x29, 0x86, 0xd2, 0x84, 0x0c, 0x82, 0xa0, 0x72,
	0xde, 0x55, 0xd5, 0x8b, 0x93, 0x96, 0xdd, 0x6e, 0xe9, 0x57, 0x90, 0x45, 0x65, 0x50, 0x30, 0x74,
	0x05, 0x16, 0x10, 0x0f, 0x8a, 0xaa, 0xf6, 0x41, 0x69, 0x42, 0xee, 0xe8, 0x07, 0x0b, 0xe0, 0xcd,
	0xef, 0x85, 0xf6, 0x41, 0x75, 0xdd, 0xfe, 0xb4, 0x7d, 0xd1, 0x31, 0x14, 0xd3, 0xd4, 0xda, 0x2d,
	0xb8, 0x85, 0x76, 0x01, 0x90, 0x15, 0xd3, 0xb2, 0xcd, 0x8e, 0x92, 0xcc, 0xd8, 0x07, 0xd5, 0x4c,
	0x81, 0xad, 0x2b, 0x97, 0x8a, 0x6e, 0x3f, 0xfb, 0x17, 0xa8, 0x43, 0x36, 0x1f, 0x34, 0x60, 0x21,
	0x1f, 0x3c, 0x87, 0x5c, 0x3e, 0x78, 0x01, 0x8b, 0xf9, 0xe0, 0x25, 0x2c, 0xe5, 0x83, 0x57, 0xb0,
	0x9c, 0x0f, 0x5e, 0xc3, 0xed, 0x7c, 0xf0, 0x06, 0xf2, 0xf1, 0xa1, 0x93, 0x85, 0xb3, 0x67, 0xe0,
	0x0f, 0x58, 0xc8, 0xc8, 0xd6, 0xcf, 0xc5, 0xaf, 0xdf, 0x25, 0x16, 0xb2, 0xe0, 0x9d, 0x4b, 0xd2,
	0x90, 0xfa, 0x01, 0xb9, 0x9e, 0xdd, 0x37, 0xaf, 0x32, 0x1f, 0x07, 0xb6, 0x13, 0xa7, 0xa2, 0xc3,
	0xf4, 0x4a, 0x49, 0x3c, 0x1a, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xb2, 0x84, 0x6e, 0xd2,
	0x04, 0x00, 0x00,
}
