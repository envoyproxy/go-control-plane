// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/extensions/filters/network/ratelimit/v3/rate_limit.proto

package envoy_extensions_filters_network_ratelimit_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v31 "github.com/envoyproxy/go-control-plane/envoy/config/ratelimit/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/extensions/common/ratelimit/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RateLimit struct {
	StatPrefix           string                      `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	Domain               string                      `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Descriptors          []*v3.RateLimitDescriptor   `protobuf:"bytes,3,rep,name=descriptors,proto3" json:"descriptors,omitempty"`
	Timeout              *duration.Duration          `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	FailureModeDeny      bool                        `protobuf:"varint,5,opt,name=failure_mode_deny,json=failureModeDeny,proto3" json:"failure_mode_deny,omitempty"`
	RateLimitService     *v31.RateLimitServiceConfig `protobuf:"bytes,6,opt,name=rate_limit_service,json=rateLimitService,proto3" json:"rate_limit_service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *RateLimit) Reset()         { *m = RateLimit{} }
func (m *RateLimit) String() string { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()    {}
func (*RateLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38327ef84621b99, []int{0}
}

func (m *RateLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimit.Unmarshal(m, b)
}
func (m *RateLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimit.Marshal(b, m, deterministic)
}
func (m *RateLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimit.Merge(m, src)
}
func (m *RateLimit) XXX_Size() int {
	return xxx_messageInfo_RateLimit.Size(m)
}
func (m *RateLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimit proto.InternalMessageInfo

func (m *RateLimit) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *RateLimit) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RateLimit) GetDescriptors() []*v3.RateLimitDescriptor {
	if m != nil {
		return m.Descriptors
	}
	return nil
}

func (m *RateLimit) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RateLimit) GetFailureModeDeny() bool {
	if m != nil {
		return m.FailureModeDeny
	}
	return false
}

func (m *RateLimit) GetRateLimitService() *v31.RateLimitServiceConfig {
	if m != nil {
		return m.RateLimitService
	}
	return nil
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "envoy.extensions.filters.network.ratelimit.v3.RateLimit")
}

func init() {
	proto.RegisterFile("envoy/extensions/filters/network/ratelimit/v3/rate_limit.proto", fileDescriptor_e38327ef84621b99)
}

var fileDescriptor_e38327ef84621b99 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0x26, 0x6d, 0x9a, 0x6e, 0x24, 0x28, 0xbe, 0x60, 0x72, 0x28, 0x01, 0x2e, 0x16, 0x12,
	0xbb, 0x22, 0x86, 0x03, 0x45, 0xe2, 0x60, 0x72, 0x04, 0x11, 0x99, 0x0f, 0xb0, 0xb6, 0xf1, 0x38,
	0x5a, 0x61, 0xef, 0x58, 0xeb, 0xb5, 0x49, 0xfe, 0x00, 0x71, 0xe4, 0xc8, 0xff, 0xf4, 0xa7, 0x7a,
	0x42, 0xd9, 0xdd, 0x24, 0x4d, 0x23, 0x0e, 0xbd, 0x79, 0x76, 0xe6, 0xbd, 0x79, 0xf3, 0xfc, 0xe8,
	0x27, 0x50, 0x1d, 0xae, 0x39, 0xac, 0x0c, 0xa8, 0x46, 0xa2, 0x6a, 0x78, 0x21, 0x4b, 0x03, 0xba,
	0xe1, 0x0a, 0xcc, 0x4f, 0xd4, 0x3f, 0xb8, 0x16, 0x06, 0x4a, 0x59, 0x49, 0xc3, 0xbb, 0xd8, 0x16,
	0x99, 0xad, 0x58, 0xad, 0xd1, 0x60, 0xf0, 0xc6, 0xe2, 0xd9, 0x1e, 0xcf, 0x3c, 0x9e, 0x79, 0x3c,
	0xdb, 0xe1, 0x59, 0x17, 0x8f, 0x5f, 0xb9, 0x75, 0x0b, 0x54, 0x85, 0x5c, 0xde, 0xa3, 0x2e, 0x1b,
	0xc7, 0x39, 0x7e, 0x77, 0xa4, 0x69, 0x81, 0x55, 0x85, 0xea, 0x58, 0xca, 0x1d, 0x25, 0xe3, 0xcb,
	0x25, 0xe2, 0xb2, 0x04, 0x6e, 0xab, 0xeb, 0xb6, 0xe0, 0x79, 0xab, 0x85, 0x91, 0xa8, 0x7c, 0xff,
	0x45, 0x9b, 0xd7, 0x82, 0x0b, 0xa5, 0xd0, 0xd8, 0xe7, 0x86, 0x77, 0xa0, 0x37, 0xf4, 0x52, 0x2d,
	0xfd, 0xc8, 0xd3, 0x4e, 0x94, 0x32, 0x17, 0x06, 0xf8, 0xf6, 0xc3, 0x35, 0x5e, 0xde, 0xf4, 0xe9,
	0x79, 0x2a, 0x0c, 0x7c, 0xd9, 0xec, 0x0b, 0x22, 0x3a, 0x6a, 0x8c, 0x30, 0x59, 0xad, 0xa1, 0x90,
	0xab, 0x90, 0x4c, 0x48, 0x74, 0x9e, 0x9c, 0xdd, 0x26, 0x27, 0xba, 0x37, 0x21, 0x29, 0xdd, 0xf4,
	0xe6, 0xb6, 0x15, 0x3c, 0xa7, 0x83, 0x1c, 0x2b, 0x21, 0x55, 0xd8, 0x3b, 0x1c, 0xf2, 0xcf, 0x01,
	0xd0, 0x51, 0x0e, 0xcd, 0x42, 0xcb, 0xda, 0xa0, 0x6e, 0xc2, 0xfe, 0xa4, 0x1f, 0x8d, 0xa6, 0x1f,
	0xd8, 0x91, 0xa9, 0xce, 0x80, 0x03, 0x2f, 0xd9, 0x4e, 0xd0, 0x6c, 0xc7, 0x90, 0x0c, 0x6f, 0x93,
	0xd3, 0x3f, 0xa4, 0x37, 0x24, 0xe9, 0x5d, 0xde, 0x20, 0xa6, 0x67, 0x46, 0x56, 0x80, 0xad, 0x09,
	0x4f, 0x26, 0x24, 0x1a, 0x4d, 0x9f, 0x31, 0xe7, 0x16, 0xdb, 0xba, 0xc5, 0x66, 0xde, 0xad, 0x74,
	0x3b, 0x19, 0xbc, 0xa6, 0x4f, 0x0a, 0x21, 0xcb, 0x56, 0x43, 0x56, 0x61, 0x0e, 0x59, 0x0e, 0x6a,
	0x1d, 0x9e, 0x4e, 0x48, 0x34, 0x4c, 0x1f, 0xfb, 0xc6, 0x57, 0xcc, 0x61, 0x06, 0x6a, 0x1d, 0x48,
	0x1a, 0xec, 0xa3, 0x91, 0x35, 0xa0, 0x3b, 0xb9, 0x80, 0x70, 0x60, 0x77, 0xbd, 0xf5, 0xe7, 0xb8,
	0x9f, 0xfe, 0x9f, 0x1b, 0xbe, 0x3b, 0xc8, 0x67, 0x3b, 0x63, 0xcf, 0xf8, 0x4d, 0x7a, 0x17, 0x24,
	0xbd, 0xd0, 0xf7, 0x26, 0xae, 0xae, 0xfe, 0xde, 0xfc, 0xba, 0x7c, 0x4f, 0xe3, 0x03, 0x52, 0x17,
	0xba, 0x83, 0xcc, 0xf9, 0x98, 0x76, 0xd3, 0xfd, 0x92, 0xe4, 0x1b, 0xfd, 0x28, 0xd1, 0xc9, 0xa9,
	0x35, 0xae, 0xd6, 0xec, 0x41, 0xe9, 0x4d, 0x1e, 0xed, 0x98, 0xe6, 0x1b, 0xdb, 0xe6, 0xe4, 0x7a,
	0x60, 0xfd, 0x8b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xa2, 0xc0, 0xc4, 0x47, 0x03, 0x00,
	0x00,
}
