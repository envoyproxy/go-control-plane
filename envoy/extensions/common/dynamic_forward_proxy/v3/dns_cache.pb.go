// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto

package envoy_extensions_common_dynamic_forward_proxy_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/cluster/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DnsCacheConfig struct {
	Name                 string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DnsLookupFamily      v3.Cluster_DnsLookupFamily `protobuf:"varint,2,opt,name=dns_lookup_family,json=dnsLookupFamily,proto3,enum=envoy.config.cluster.v3.Cluster_DnsLookupFamily" json:"dns_lookup_family,omitempty"`
	DnsRefreshRate       *duration.Duration         `protobuf:"bytes,3,opt,name=dns_refresh_rate,json=dnsRefreshRate,proto3" json:"dns_refresh_rate,omitempty"`
	HostTtl              *duration.Duration         `protobuf:"bytes,4,opt,name=host_ttl,json=hostTtl,proto3" json:"host_ttl,omitempty"`
	MaxHosts             *wrappers.UInt32Value      `protobuf:"bytes,5,opt,name=max_hosts,json=maxHosts,proto3" json:"max_hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DnsCacheConfig) Reset()         { *m = DnsCacheConfig{} }
func (m *DnsCacheConfig) String() string { return proto.CompactTextString(m) }
func (*DnsCacheConfig) ProtoMessage()    {}
func (*DnsCacheConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f57893b6dd868364, []int{0}
}

func (m *DnsCacheConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsCacheConfig.Unmarshal(m, b)
}
func (m *DnsCacheConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsCacheConfig.Marshal(b, m, deterministic)
}
func (m *DnsCacheConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsCacheConfig.Merge(m, src)
}
func (m *DnsCacheConfig) XXX_Size() int {
	return xxx_messageInfo_DnsCacheConfig.Size(m)
}
func (m *DnsCacheConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsCacheConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DnsCacheConfig proto.InternalMessageInfo

func (m *DnsCacheConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DnsCacheConfig) GetDnsLookupFamily() v3.Cluster_DnsLookupFamily {
	if m != nil {
		return m.DnsLookupFamily
	}
	return v3.Cluster_AUTO
}

func (m *DnsCacheConfig) GetDnsRefreshRate() *duration.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *DnsCacheConfig) GetHostTtl() *duration.Duration {
	if m != nil {
		return m.HostTtl
	}
	return nil
}

func (m *DnsCacheConfig) GetMaxHosts() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxHosts
	}
	return nil
}

func init() {
	proto.RegisterType((*DnsCacheConfig)(nil), "envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig")
}

func init() {
	proto.RegisterFile("envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto", fileDescriptor_f57893b6dd868364)
}

var fileDescriptor_f57893b6dd868364 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0x9b, 0x74, 0x4b, 0xb7, 0x41, 0x2c, 0x25, 0x17, 0x42, 0x41, 0x55, 0x40, 0x42, 0x5a,
	0xf5, 0x60, 0x57, 0x9b, 0x1b, 0x87, 0x0a, 0x65, 0x57, 0xfc, 0x91, 0x40, 0x2a, 0x11, 0x70, 0x8d,
	0xa6, 0x89, 0xb3, 0x1b, 0xe1, 0x78, 0x22, 0xdb, 0x49, 0x77, 0xaf, 0x9c, 0x78, 0x06, 0x1e, 0x81,
	0x1b, 0x0f, 0xc1, 0x4b, 0xf5, 0x84, 0x6c, 0x67, 0x41, 0x15, 0x7f, 0x04, 0xb7, 0x71, 0xc6, 0xdf,
	0xcf, 0xf3, 0x7d, 0x99, 0xe0, 0x29, 0x13, 0x3d, 0x6e, 0x28, 0x5b, 0x6b, 0x26, 0x54, 0x8d, 0x42,
	0xd1, 0x02, 0x9b, 0x06, 0x05, 0x2d, 0x37, 0x02, 0x9a, 0xba, 0xc8, 0x2b, 0x94, 0x97, 0x20, 0xcb,
	0xbc, 0x95, 0xb8, 0xde, 0xd0, 0x3e, 0xa1, 0xa5, 0x50, 0x79, 0x01, 0xc5, 0x8a, 0x91, 0x56, 0xa2,
	0xc6, 0xf0, 0xd4, 0x12, 0xc8, 0x4f, 0x02, 0x71, 0x04, 0xf2, 0x5b, 0x02, 0xe9, 0x93, 0xa3, 0xc7,
	0xee, 0xcd, 0x02, 0x45, 0x55, 0x2f, 0x69, 0xc1, 0x3b, 0xa5, 0x99, 0x34, 0xe8, 0xa1, 0x74, 0xe0,
	0xa3, 0xe3, 0x25, 0xe2, 0x92, 0x33, 0x6a, 0x4f, 0x17, 0x5d, 0x45, 0xcb, 0x4e, 0x82, 0xae, 0x51,
	0xfc, 0xa9, 0x7f, 0x29, 0xa1, 0x6d, 0x99, 0x54, 0x43, 0xff, 0x61, 0x57, 0xb6, 0x40, 0x41, 0x08,
	0xd4, 0x56, 0xa6, 0x68, 0xcf, 0xa4, 0x99, 0xb0, 0x16, 0xcb, 0xe1, 0xca, 0xdd, 0x1e, 0x78, 0x5d,
	0x82, 0x66, 0x74, 0x5b, 0xb8, 0xc6, 0xa3, 0xaf, 0xbb, 0xc1, 0x64, 0x21, 0xd4, 0xdc, 0xf8, 0x9c,
	0xdb, 0x39, 0xc3, 0xfb, 0xc1, 0x48, 0x40, 0xc3, 0x22, 0x2f, 0xf6, 0xa6, 0x07, 0xe9, 0xfe, 0x55,
	0x3a, 0x92, 0x7e, 0xec, 0x65, 0xf6, 0x63, 0x58, 0x05, 0x77, 0x4c, 0x2e, 0x1c, 0xf1, 0x43, 0xd7,
	0xe6, 0x15, 0x34, 0x35, 0xdf, 0x44, 0x7e, 0xec, 0x4d, 0x27, 0xb3, 0x53, 0xe2, 0x02, 0x72, 0x76,
	0xc9, 0xd6, 0x63, 0x9f, 0x90, 0xf9, 0x50, 0x2e, 0x84, 0x7a, 0x65, 0x85, 0xcf, 0xac, 0x2e, 0x1d,
	0x5f, 0xa5, 0x7b, 0x1f, 0x3d, 0xff, 0xd0, 0xcb, 0x6e, 0x97, 0xd7, 0x5b, 0xe1, 0xeb, 0xe0, 0xd0,
	0xbc, 0x23, 0x59, 0x25, 0x99, 0x5a, 0xe5, 0x12, 0x34, 0x8b, 0x76, 0x63, 0x6f, 0x7a, 0x73, 0x76,
	0x8f, 0xb8, 0x38, 0xc8, 0x36, 0x0e, 0xb2, 0x18, 0xe2, 0xb2, 0xbc, 0x2f, 0x9e, 0x7f, 0xb2, 0x93,
	0x4d, 0x4a, 0xa1, 0x32, 0xa7, 0xcd, 0x40, 0xb3, 0xf0, 0x2c, 0x18, 0xaf, 0x50, 0xe9, 0x5c, 0x6b,
	0x1e, 0x8d, 0xfe, 0x1d, 0xb3, 0x6f, 0x44, 0x6f, 0x35, 0x0f, 0xd3, 0xe0, 0xa0, 0x81, 0x75, 0x6e,
	0x8e, 0x2a, 0xda, 0xb3, 0x80, 0x07, 0xbf, 0x00, 0xde, 0xbd, 0x14, 0x3a, 0x99, 0xbd, 0x07, 0xde,
	0x31, 0x1b, 0xdb, 0x89, 0x1f, 0xef, 0x64, 0xe3, 0x06, 0xd6, 0x2f, 0x8c, 0xec, 0xc9, 0xf3, 0xcf,
	0xdf, 0x3e, 0x1d, 0xa7, 0xc3, 0x22, 0xfe, 0x48, 0xe9, 0xaf, 0x2b, 0x34, 0x03, 0xde, 0xae, 0x80,
	0x5c, 0xff, 0x41, 0xe9, 0x9b, 0xe0, 0xac, 0x46, 0x17, 0xb6, 0xbb, 0xf7, 0xbf, 0x8b, 0x99, 0xde,
	0xda, 0x12, 0xcf, 0xcd, 0xec, 0xe7, 0xde, 0xc5, 0x0d, 0x6b, 0x22, 0xf9, 0x1e, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0xff, 0x35, 0x51, 0x26, 0x03, 0x00, 0x00,
}
