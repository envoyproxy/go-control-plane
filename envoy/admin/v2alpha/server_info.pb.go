// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/admin/v2alpha/server_info.proto

package envoy_admin_v2alpha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ServerInfo_State int32

const (
	// Server is live and serving traffic.
	ServerInfo_LIVE ServerInfo_State = 0
	// Server is draining listeners in response to external health checks failing.
	ServerInfo_DRAINING ServerInfo_State = 1
)

var ServerInfo_State_name = map[int32]string{
	0: "LIVE",
	1: "DRAINING",
}
var ServerInfo_State_value = map[string]int32{
	"LIVE":     0,
	"DRAINING": 1,
}

func (x ServerInfo_State) String() string {
	return proto.EnumName(ServerInfo_State_name, int32(x))
}
func (ServerInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_server_info_e6d2e8866450ad27, []int{0, 0}
}

// Proto representation of the value returned by /server_info, containing
// server version/server status information.
type ServerInfo struct {
	// Server version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// State of the server.
	State ServerInfo_State `protobuf:"varint,2,opt,name=state,proto3,enum=envoy.admin.v2alpha.ServerInfo_State" json:"state,omitempty"`
	// Uptime since current epoch was started.
	UptimeCurrentEpoch *types.Duration `protobuf:"bytes,3,opt,name=uptime_current_epoch,json=uptimeCurrentEpoch" json:"uptime_current_epoch,omitempty"`
	// Uptime since the start of the first epoch.
	UptimeAllEpochs *types.Duration `protobuf:"bytes,4,opt,name=uptime_all_epochs,json=uptimeAllEpochs" json:"uptime_all_epochs,omitempty"`
	// Which restart epoch the server is currently in.
	Epoch                uint32   `protobuf:"varint,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_info_e6d2e8866450ad27, []int{0}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(dst, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServerInfo) GetState() ServerInfo_State {
	if m != nil {
		return m.State
	}
	return ServerInfo_LIVE
}

func (m *ServerInfo) GetUptimeCurrentEpoch() *types.Duration {
	if m != nil {
		return m.UptimeCurrentEpoch
	}
	return nil
}

func (m *ServerInfo) GetUptimeAllEpochs() *types.Duration {
	if m != nil {
		return m.UptimeAllEpochs
	}
	return nil
}

func (m *ServerInfo) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerInfo)(nil), "envoy.admin.v2alpha.ServerInfo")
	proto.RegisterEnum("envoy.admin.v2alpha.ServerInfo_State", ServerInfo_State_name, ServerInfo_State_value)
}
func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerInfo(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerInfo(dAtA, i, uint64(m.State))
	}
	if m.UptimeCurrentEpoch != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServerInfo(dAtA, i, uint64(m.UptimeCurrentEpoch.Size()))
		n1, err := m.UptimeCurrentEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UptimeAllEpochs != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerInfo(dAtA, i, uint64(m.UptimeAllEpochs.Size()))
		n2, err := m.UptimeAllEpochs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintServerInfo(dAtA, i, uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintServerInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovServerInfo(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovServerInfo(uint64(m.State))
	}
	if m.UptimeCurrentEpoch != nil {
		l = m.UptimeCurrentEpoch.Size()
		n += 1 + l + sovServerInfo(uint64(l))
	}
	if m.UptimeAllEpochs != nil {
		l = m.UptimeAllEpochs.Size()
		n += 1 + l + sovServerInfo(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovServerInfo(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServerInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServerInfo(x uint64) (n int) {
	return sovServerInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (ServerInfo_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UptimeCurrentEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UptimeCurrentEpoch == nil {
				m.UptimeCurrentEpoch = &types.Duration{}
			}
			if err := m.UptimeCurrentEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UptimeAllEpochs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UptimeAllEpochs == nil {
				m.UptimeAllEpochs = &types.Duration{}
			}
			if err := m.UptimeAllEpochs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServerInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServerInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServerInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServerInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("envoy/admin/v2alpha/server_info.proto", fileDescriptor_server_info_e6d2e8866450ad27)
}

var fileDescriptor_server_info_e6d2e8866450ad27 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x46, 0xff, 0xe9, 0xdf, 0x68, 0xbd, 0x56, 0xad, 0x63, 0x17, 0xd1, 0x45, 0x0c, 0x85, 0x42,
	0x56, 0x13, 0xa8, 0x4b, 0x57, 0xd5, 0x06, 0x09, 0x4a, 0x17, 0x29, 0xb8, 0x0d, 0xd3, 0x76, 0xd2,
	0x06, 0xa6, 0x33, 0x61, 0x32, 0x09, 0xf8, 0x52, 0x3e, 0x87, 0x4b, 0x1f, 0x41, 0xf2, 0x24, 0xd2,
	0x99, 0x14, 0x37, 0x82, 0xcb, 0x0b, 0xdf, 0x39, 0xf7, 0xc0, 0x98, 0x89, 0x5a, 0xbe, 0x85, 0x74,
	0xbd, 0xcb, 0x45, 0x58, 0x4f, 0x28, 0x2f, 0xb6, 0x34, 0x2c, 0x99, 0xaa, 0x99, 0x4a, 0x73, 0x91,
	0x49, 0x52, 0x28, 0xa9, 0x25, 0xbe, 0x32, 0x33, 0x62, 0x66, 0xa4, 0x9d, 0xdd, 0x78, 0x1b, 0x29,
	0x37, 0x9c, 0x85, 0x66, 0xb2, 0xac, 0xb2, 0x70, 0x5d, 0x29, 0xaa, 0x73, 0x29, 0x2c, 0x34, 0x7a,
	0xef, 0x00, 0x2c, 0x8c, 0x2a, 0x16, 0x99, 0xc4, 0x2e, 0x1c, 0xd7, 0x4c, 0x95, 0xb9, 0x14, 0x2e,
	0xf2, 0x51, 0x70, 0x92, 0x1c, 0x4e, 0x7c, 0x0f, 0x4e, 0xa9, 0xa9, 0x66, 0x6e, 0xc7, 0x47, 0xc1,
	0xf9, 0x64, 0x4c, 0x7e, 0xf9, 0x46, 0x7e, 0x4c, 0x64, 0xb1, 0x1f, 0x27, 0x96, 0xc1, 0xcf, 0x30,
	0xac, 0x0a, 0x9d, 0xef, 0x58, 0xba, 0xaa, 0x94, 0x62, 0x42, 0xa7, 0xac, 0x90, 0xab, 0xad, 0xfb,
	0xdf, 0x47, 0xc1, 0xe9, 0xe4, 0x9a, 0xd8, 0x48, 0x72, 0x88, 0x24, 0xb3, 0x36, 0x32, 0xc1, 0x16,
	0x7b, 0xb4, 0x54, 0xb4, 0x87, 0x70, 0x04, 0x97, 0xad, 0x8c, 0x72, 0x6e, 0x45, 0xa5, 0xdb, 0xfd,
	0xcb, 0x74, 0x61, 0x99, 0x29, 0xe7, 0xc6, 0x52, 0xe2, 0x21, 0x38, 0x36, 0xc2, 0xf1, 0x51, 0x70,
	0x96, 0xd8, 0x63, 0x74, 0x0b, 0x8e, 0x29, 0xc7, 0x3d, 0xe8, 0xbe, 0xc4, 0xaf, 0xd1, 0xe0, 0x1f,
	0xee, 0x43, 0x6f, 0x96, 0x4c, 0xe3, 0x79, 0x3c, 0x7f, 0x1a, 0xa0, 0x87, 0xfe, 0x47, 0xe3, 0xa1,
	0xcf, 0xc6, 0x43, 0x5f, 0x8d, 0x87, 0x96, 0x47, 0xe6, 0xd1, 0xdd, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x09, 0xb3, 0xc9, 0xb9, 0xa3, 0x01, 0x00, 0x00,
}
