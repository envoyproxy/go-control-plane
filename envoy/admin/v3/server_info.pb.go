// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/admin/v3/server_info.proto

package envoy_admin_v3

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/go-control-plane/envoy/annotations"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerInfo_State int32

const (
	ServerInfo_LIVE             ServerInfo_State = 0
	ServerInfo_DRAINING         ServerInfo_State = 1
	ServerInfo_PRE_INITIALIZING ServerInfo_State = 2
	ServerInfo_INITIALIZING     ServerInfo_State = 3
)

var ServerInfo_State_name = map[int32]string{
	0: "LIVE",
	1: "DRAINING",
	2: "PRE_INITIALIZING",
	3: "INITIALIZING",
}

var ServerInfo_State_value = map[string]int32{
	"LIVE":             0,
	"DRAINING":         1,
	"PRE_INITIALIZING": 2,
	"INITIALIZING":     3,
}

func (x ServerInfo_State) String() string {
	return proto.EnumName(ServerInfo_State_name, int32(x))
}

func (ServerInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8736ae14312a45ee, []int{0, 0}
}

type CommandLineOptions_IpVersion int32

const (
	CommandLineOptions_v4 CommandLineOptions_IpVersion = 0
	CommandLineOptions_v6 CommandLineOptions_IpVersion = 1
)

var CommandLineOptions_IpVersion_name = map[int32]string{
	0: "v4",
	1: "v6",
}

var CommandLineOptions_IpVersion_value = map[string]int32{
	"v4": 0,
	"v6": 1,
}

func (x CommandLineOptions_IpVersion) String() string {
	return proto.EnumName(CommandLineOptions_IpVersion_name, int32(x))
}

func (CommandLineOptions_IpVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8736ae14312a45ee, []int{1, 0}
}

type CommandLineOptions_Mode int32

const (
	CommandLineOptions_Serve    CommandLineOptions_Mode = 0
	CommandLineOptions_Validate CommandLineOptions_Mode = 1
	CommandLineOptions_InitOnly CommandLineOptions_Mode = 2
)

var CommandLineOptions_Mode_name = map[int32]string{
	0: "Serve",
	1: "Validate",
	2: "InitOnly",
}

var CommandLineOptions_Mode_value = map[string]int32{
	"Serve":    0,
	"Validate": 1,
	"InitOnly": 2,
}

func (x CommandLineOptions_Mode) String() string {
	return proto.EnumName(CommandLineOptions_Mode_name, int32(x))
}

func (CommandLineOptions_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8736ae14312a45ee, []int{1, 1}
}

type CommandLineOptions_DrainStrategy int32

const (
	CommandLineOptions_Gradual   CommandLineOptions_DrainStrategy = 0
	CommandLineOptions_Immediate CommandLineOptions_DrainStrategy = 1
)

var CommandLineOptions_DrainStrategy_name = map[int32]string{
	0: "Gradual",
	1: "Immediate",
}

var CommandLineOptions_DrainStrategy_value = map[string]int32{
	"Gradual":   0,
	"Immediate": 1,
}

func (x CommandLineOptions_DrainStrategy) String() string {
	return proto.EnumName(CommandLineOptions_DrainStrategy_name, int32(x))
}

func (CommandLineOptions_DrainStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8736ae14312a45ee, []int{1, 2}
}

type ServerInfo struct {
	Version              string              `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	State                ServerInfo_State    `protobuf:"varint,2,opt,name=state,proto3,enum=envoy.admin.v3.ServerInfo_State" json:"state,omitempty"`
	UptimeCurrentEpoch   *duration.Duration  `protobuf:"bytes,3,opt,name=uptime_current_epoch,json=uptimeCurrentEpoch,proto3" json:"uptime_current_epoch,omitempty"`
	UptimeAllEpochs      *duration.Duration  `protobuf:"bytes,4,opt,name=uptime_all_epochs,json=uptimeAllEpochs,proto3" json:"uptime_all_epochs,omitempty"`
	HotRestartVersion    string              `protobuf:"bytes,5,opt,name=hot_restart_version,json=hotRestartVersion,proto3" json:"hot_restart_version,omitempty"`
	CommandLineOptions   *CommandLineOptions `protobuf:"bytes,6,opt,name=command_line_options,json=commandLineOptions,proto3" json:"command_line_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8736ae14312a45ee, []int{0}
}

func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerInfo.Unmarshal(m, b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return xxx_messageInfo_ServerInfo.Size(m)
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServerInfo) GetState() ServerInfo_State {
	if m != nil {
		return m.State
	}
	return ServerInfo_LIVE
}

func (m *ServerInfo) GetUptimeCurrentEpoch() *duration.Duration {
	if m != nil {
		return m.UptimeCurrentEpoch
	}
	return nil
}

func (m *ServerInfo) GetUptimeAllEpochs() *duration.Duration {
	if m != nil {
		return m.UptimeAllEpochs
	}
	return nil
}

func (m *ServerInfo) GetHotRestartVersion() string {
	if m != nil {
		return m.HotRestartVersion
	}
	return ""
}

func (m *ServerInfo) GetCommandLineOptions() *CommandLineOptions {
	if m != nil {
		return m.CommandLineOptions
	}
	return nil
}

type CommandLineOptions struct {
	BaseId                             uint64                           `protobuf:"varint,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	UseDynamicBaseId                   bool                             `protobuf:"varint,31,opt,name=use_dynamic_base_id,json=useDynamicBaseId,proto3" json:"use_dynamic_base_id,omitempty"`
	BaseIdPath                         string                           `protobuf:"bytes,32,opt,name=base_id_path,json=baseIdPath,proto3" json:"base_id_path,omitempty"`
	Concurrency                        uint32                           `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	ConfigPath                         string                           `protobuf:"bytes,3,opt,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	ConfigYaml                         string                           `protobuf:"bytes,4,opt,name=config_yaml,json=configYaml,proto3" json:"config_yaml,omitempty"`
	AllowUnknownStaticFields           bool                             `protobuf:"varint,5,opt,name=allow_unknown_static_fields,json=allowUnknownStaticFields,proto3" json:"allow_unknown_static_fields,omitempty"`
	RejectUnknownDynamicFields         bool                             `protobuf:"varint,26,opt,name=reject_unknown_dynamic_fields,json=rejectUnknownDynamicFields,proto3" json:"reject_unknown_dynamic_fields,omitempty"`
	IgnoreUnknownDynamicFields         bool                             `protobuf:"varint,30,opt,name=ignore_unknown_dynamic_fields,json=ignoreUnknownDynamicFields,proto3" json:"ignore_unknown_dynamic_fields,omitempty"`
	AdminAddressPath                   string                           `protobuf:"bytes,6,opt,name=admin_address_path,json=adminAddressPath,proto3" json:"admin_address_path,omitempty"`
	LocalAddressIpVersion              CommandLineOptions_IpVersion     `protobuf:"varint,7,opt,name=local_address_ip_version,json=localAddressIpVersion,proto3,enum=envoy.admin.v3.CommandLineOptions_IpVersion" json:"local_address_ip_version,omitempty"`
	LogLevel                           string                           `protobuf:"bytes,8,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	ComponentLogLevel                  string                           `protobuf:"bytes,9,opt,name=component_log_level,json=componentLogLevel,proto3" json:"component_log_level,omitempty"`
	LogFormat                          string                           `protobuf:"bytes,10,opt,name=log_format,json=logFormat,proto3" json:"log_format,omitempty"`
	LogFormatEscaped                   bool                             `protobuf:"varint,27,opt,name=log_format_escaped,json=logFormatEscaped,proto3" json:"log_format_escaped,omitempty"`
	LogPath                            string                           `protobuf:"bytes,11,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	ServiceCluster                     string                           `protobuf:"bytes,13,opt,name=service_cluster,json=serviceCluster,proto3" json:"service_cluster,omitempty"`
	ServiceNode                        string                           `protobuf:"bytes,14,opt,name=service_node,json=serviceNode,proto3" json:"service_node,omitempty"`
	ServiceZone                        string                           `protobuf:"bytes,15,opt,name=service_zone,json=serviceZone,proto3" json:"service_zone,omitempty"`
	FileFlushInterval                  *duration.Duration               `protobuf:"bytes,16,opt,name=file_flush_interval,json=fileFlushInterval,proto3" json:"file_flush_interval,omitempty"`
	DrainTime                          *duration.Duration               `protobuf:"bytes,17,opt,name=drain_time,json=drainTime,proto3" json:"drain_time,omitempty"`
	DrainStrategy                      CommandLineOptions_DrainStrategy `protobuf:"varint,33,opt,name=drain_strategy,json=drainStrategy,proto3,enum=envoy.admin.v3.CommandLineOptions_DrainStrategy" json:"drain_strategy,omitempty"`
	ParentShutdownTime                 *duration.Duration               `protobuf:"bytes,18,opt,name=parent_shutdown_time,json=parentShutdownTime,proto3" json:"parent_shutdown_time,omitempty"`
	Mode                               CommandLineOptions_Mode          `protobuf:"varint,19,opt,name=mode,proto3,enum=envoy.admin.v3.CommandLineOptions_Mode" json:"mode,omitempty"`
	DisableHotRestart                  bool                             `protobuf:"varint,22,opt,name=disable_hot_restart,json=disableHotRestart,proto3" json:"disable_hot_restart,omitempty"`
	EnableMutexTracing                 bool                             `protobuf:"varint,23,opt,name=enable_mutex_tracing,json=enableMutexTracing,proto3" json:"enable_mutex_tracing,omitempty"`
	RestartEpoch                       uint32                           `protobuf:"varint,24,opt,name=restart_epoch,json=restartEpoch,proto3" json:"restart_epoch,omitempty"`
	CpusetThreads                      bool                             `protobuf:"varint,25,opt,name=cpuset_threads,json=cpusetThreads,proto3" json:"cpuset_threads,omitempty"`
	DisabledExtensions                 []string                         `protobuf:"bytes,28,rep,name=disabled_extensions,json=disabledExtensions,proto3" json:"disabled_extensions,omitempty"`
	BootstrapVersion                   uint32                           `protobuf:"varint,29,opt,name=bootstrap_version,json=bootstrapVersion,proto3" json:"bootstrap_version,omitempty"`
	HiddenEnvoyDeprecatedMaxStats      uint64                           `protobuf:"varint,20,opt,name=hidden_envoy_deprecated_max_stats,json=hiddenEnvoyDeprecatedMaxStats,proto3" json:"hidden_envoy_deprecated_max_stats,omitempty"`                    // Deprecated: Do not use.
	HiddenEnvoyDeprecatedMaxObjNameLen uint64                           `protobuf:"varint,21,opt,name=hidden_envoy_deprecated_max_obj_name_len,json=hiddenEnvoyDeprecatedMaxObjNameLen,proto3" json:"hidden_envoy_deprecated_max_obj_name_len,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral               struct{}                         `json:"-"`
	XXX_unrecognized                   []byte                           `json:"-"`
	XXX_sizecache                      int32                            `json:"-"`
}

func (m *CommandLineOptions) Reset()         { *m = CommandLineOptions{} }
func (m *CommandLineOptions) String() string { return proto.CompactTextString(m) }
func (*CommandLineOptions) ProtoMessage()    {}
func (*CommandLineOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8736ae14312a45ee, []int{1}
}

func (m *CommandLineOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandLineOptions.Unmarshal(m, b)
}
func (m *CommandLineOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandLineOptions.Marshal(b, m, deterministic)
}
func (m *CommandLineOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandLineOptions.Merge(m, src)
}
func (m *CommandLineOptions) XXX_Size() int {
	return xxx_messageInfo_CommandLineOptions.Size(m)
}
func (m *CommandLineOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandLineOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CommandLineOptions proto.InternalMessageInfo

func (m *CommandLineOptions) GetBaseId() uint64 {
	if m != nil {
		return m.BaseId
	}
	return 0
}

func (m *CommandLineOptions) GetUseDynamicBaseId() bool {
	if m != nil {
		return m.UseDynamicBaseId
	}
	return false
}

func (m *CommandLineOptions) GetBaseIdPath() string {
	if m != nil {
		return m.BaseIdPath
	}
	return ""
}

func (m *CommandLineOptions) GetConcurrency() uint32 {
	if m != nil {
		return m.Concurrency
	}
	return 0
}

func (m *CommandLineOptions) GetConfigPath() string {
	if m != nil {
		return m.ConfigPath
	}
	return ""
}

func (m *CommandLineOptions) GetConfigYaml() string {
	if m != nil {
		return m.ConfigYaml
	}
	return ""
}

func (m *CommandLineOptions) GetAllowUnknownStaticFields() bool {
	if m != nil {
		return m.AllowUnknownStaticFields
	}
	return false
}

func (m *CommandLineOptions) GetRejectUnknownDynamicFields() bool {
	if m != nil {
		return m.RejectUnknownDynamicFields
	}
	return false
}

func (m *CommandLineOptions) GetIgnoreUnknownDynamicFields() bool {
	if m != nil {
		return m.IgnoreUnknownDynamicFields
	}
	return false
}

func (m *CommandLineOptions) GetAdminAddressPath() string {
	if m != nil {
		return m.AdminAddressPath
	}
	return ""
}

func (m *CommandLineOptions) GetLocalAddressIpVersion() CommandLineOptions_IpVersion {
	if m != nil {
		return m.LocalAddressIpVersion
	}
	return CommandLineOptions_v4
}

func (m *CommandLineOptions) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

func (m *CommandLineOptions) GetComponentLogLevel() string {
	if m != nil {
		return m.ComponentLogLevel
	}
	return ""
}

func (m *CommandLineOptions) GetLogFormat() string {
	if m != nil {
		return m.LogFormat
	}
	return ""
}

func (m *CommandLineOptions) GetLogFormatEscaped() bool {
	if m != nil {
		return m.LogFormatEscaped
	}
	return false
}

func (m *CommandLineOptions) GetLogPath() string {
	if m != nil {
		return m.LogPath
	}
	return ""
}

func (m *CommandLineOptions) GetServiceCluster() string {
	if m != nil {
		return m.ServiceCluster
	}
	return ""
}

func (m *CommandLineOptions) GetServiceNode() string {
	if m != nil {
		return m.ServiceNode
	}
	return ""
}

func (m *CommandLineOptions) GetServiceZone() string {
	if m != nil {
		return m.ServiceZone
	}
	return ""
}

func (m *CommandLineOptions) GetFileFlushInterval() *duration.Duration {
	if m != nil {
		return m.FileFlushInterval
	}
	return nil
}

func (m *CommandLineOptions) GetDrainTime() *duration.Duration {
	if m != nil {
		return m.DrainTime
	}
	return nil
}

func (m *CommandLineOptions) GetDrainStrategy() CommandLineOptions_DrainStrategy {
	if m != nil {
		return m.DrainStrategy
	}
	return CommandLineOptions_Gradual
}

func (m *CommandLineOptions) GetParentShutdownTime() *duration.Duration {
	if m != nil {
		return m.ParentShutdownTime
	}
	return nil
}

func (m *CommandLineOptions) GetMode() CommandLineOptions_Mode {
	if m != nil {
		return m.Mode
	}
	return CommandLineOptions_Serve
}

func (m *CommandLineOptions) GetDisableHotRestart() bool {
	if m != nil {
		return m.DisableHotRestart
	}
	return false
}

func (m *CommandLineOptions) GetEnableMutexTracing() bool {
	if m != nil {
		return m.EnableMutexTracing
	}
	return false
}

func (m *CommandLineOptions) GetRestartEpoch() uint32 {
	if m != nil {
		return m.RestartEpoch
	}
	return 0
}

func (m *CommandLineOptions) GetCpusetThreads() bool {
	if m != nil {
		return m.CpusetThreads
	}
	return false
}

func (m *CommandLineOptions) GetDisabledExtensions() []string {
	if m != nil {
		return m.DisabledExtensions
	}
	return nil
}

func (m *CommandLineOptions) GetBootstrapVersion() uint32 {
	if m != nil {
		return m.BootstrapVersion
	}
	return 0
}

// Deprecated: Do not use.
func (m *CommandLineOptions) GetHiddenEnvoyDeprecatedMaxStats() uint64 {
	if m != nil {
		return m.HiddenEnvoyDeprecatedMaxStats
	}
	return 0
}

// Deprecated: Do not use.
func (m *CommandLineOptions) GetHiddenEnvoyDeprecatedMaxObjNameLen() uint64 {
	if m != nil {
		return m.HiddenEnvoyDeprecatedMaxObjNameLen
	}
	return 0
}

func init() {
	proto.RegisterEnum("envoy.admin.v3.ServerInfo_State", ServerInfo_State_name, ServerInfo_State_value)
	proto.RegisterEnum("envoy.admin.v3.CommandLineOptions_IpVersion", CommandLineOptions_IpVersion_name, CommandLineOptions_IpVersion_value)
	proto.RegisterEnum("envoy.admin.v3.CommandLineOptions_Mode", CommandLineOptions_Mode_name, CommandLineOptions_Mode_value)
	proto.RegisterEnum("envoy.admin.v3.CommandLineOptions_DrainStrategy", CommandLineOptions_DrainStrategy_name, CommandLineOptions_DrainStrategy_value)
	proto.RegisterType((*ServerInfo)(nil), "envoy.admin.v3.ServerInfo")
	proto.RegisterType((*CommandLineOptions)(nil), "envoy.admin.v3.CommandLineOptions")
}

func init() { proto.RegisterFile("envoy/admin/v3/server_info.proto", fileDescriptor_8736ae14312a45ee) }

var fileDescriptor_8736ae14312a45ee = []byte{
	// 1242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0x1b, 0xb7,
	0x16, 0x8e, 0xfc, 0x2b, 0xd1, 0x96, 0x3c, 0xa6, 0x9d, 0x9b, 0x89, 0x1d, 0x3b, 0xb2, 0x82, 0xdc,
	0x08, 0x48, 0x22, 0x05, 0xc9, 0x45, 0x70, 0x6f, 0x2e, 0xba, 0xb0, 0x63, 0x25, 0x9d, 0xd6, 0x71,
	0x8c, 0xb1, 0x9b, 0xa2, 0x59, 0x94, 0xa0, 0x86, 0x47, 0x12, 0x53, 0x0e, 0x39, 0x98, 0xe1, 0x28,
	0x56, 0x57, 0x5d, 0xf6, 0x19, 0xfa, 0x20, 0x45, 0xd1, 0x7d, 0x81, 0x6e, 0xdb, 0xa7, 0xe8, 0xaa,
	0x8b, 0x3e, 0x41, 0x41, 0x72, 0x24, 0xd9, 0x71, 0x52, 0x67, 0x65, 0xcc, 0x39, 0xdf, 0xf7, 0xe9,
	0xf0, 0xf0, 0xe3, 0x39, 0x46, 0x75, 0x90, 0x43, 0x35, 0x6a, 0x53, 0x16, 0x73, 0xd9, 0x1e, 0x3e,
	0x6a, 0x67, 0x90, 0x0e, 0x21, 0x25, 0x5c, 0xf6, 0x54, 0x2b, 0x49, 0x95, 0x56, 0xb8, 0x66, 0x11,
	0x2d, 0x8b, 0x68, 0x0d, 0x1f, 0x6d, 0x6c, 0xf7, 0x95, 0xea, 0x0b, 0x68, 0xdb, 0x6c, 0x37, 0xef,
	0xb5, 0x59, 0x9e, 0x52, 0xcd, 0x95, 0x74, 0xf8, 0x8d, 0x5b, 0x85, 0xa2, 0x94, 0x4a, 0xdb, 0x78,
	0xd6, 0x66, 0x90, 0xa4, 0x10, 0x9d, 0x05, 0x6d, 0xe5, 0x2c, 0xa1, 0xe7, 0x30, 0x99, 0xa6, 0x3a,
	0xcf, 0x8a, 0xf4, 0xce, 0x85, 0xf4, 0x10, 0xd2, 0x8c, 0x2b, 0xc9, 0x65, 0xdf, 0x41, 0x1a, 0x7f,
	0xcc, 0x22, 0x74, 0x6c, 0x8b, 0x0d, 0x64, 0x4f, 0x61, 0x1f, 0x2d, 0x16, 0x10, 0xbf, 0x54, 0x2f,
	0x35, 0x2b, 0xe1, 0xf8, 0x13, 0x3f, 0x46, 0xf3, 0x46, 0x1b, 0xfc, 0x99, 0x7a, 0xa9, 0x59, 0x7b,
	0x58, 0x6f, 0x9d, 0x3f, 0x4f, 0x6b, 0x2a, 0xd2, 0x3a, 0x36, 0xb8, 0xd0, 0xc1, 0xf1, 0xe7, 0x68,
	0x3d, 0x4f, 0x34, 0x8f, 0x81, 0x44, 0x79, 0x9a, 0x82, 0xd4, 0x04, 0x12, 0x15, 0x0d, 0xfc, 0xd9,
	0x7a, 0xa9, 0xb9, 0xf4, 0xf0, 0x7a, 0xcb, 0xb5, 0xa1, 0x35, 0x6e, 0x43, 0x6b, 0xbf, 0x68, 0x43,
	0x88, 0x1d, 0xed, 0xa9, 0x63, 0x75, 0x0c, 0x09, 0x77, 0xd0, 0x6a, 0x21, 0x46, 0x85, 0x70, 0x42,
	0x99, 0x3f, 0x77, 0x99, 0xd2, 0x8a, 0xe3, 0xec, 0x0a, 0x61, 0x55, 0x32, 0xdc, 0x42, 0x6b, 0x03,
	0xa5, 0x49, 0x0a, 0x99, 0xa6, 0xa9, 0x26, 0xe3, 0x13, 0xcf, 0xdb, 0x13, 0xaf, 0x0e, 0x94, 0x0e,
	0x5d, 0xe6, 0x55, 0x71, 0xf6, 0x13, 0xb4, 0x1e, 0xa9, 0x38, 0xa6, 0x92, 0x11, 0xc1, 0x25, 0x10,
	0x95, 0xd8, 0x6e, 0xfa, 0x0b, 0xf6, 0x97, 0x1b, 0xef, 0xb6, 0xe2, 0xa9, 0xc3, 0x1e, 0x70, 0x09,
	0x2f, 0x1d, 0x32, 0xc4, 0xd1, 0x85, 0x58, 0xe3, 0x39, 0x9a, 0xb7, 0x9d, 0xc2, 0x65, 0x34, 0x77,
	0x10, 0xbc, 0xea, 0x78, 0x57, 0xf0, 0x32, 0x2a, 0xef, 0x87, 0xbb, 0xc1, 0x61, 0x70, 0xf8, 0xdc,
	0x2b, 0xe1, 0x75, 0xe4, 0x1d, 0x85, 0x1d, 0x12, 0x1c, 0x06, 0x27, 0xc1, 0xee, 0x41, 0xf0, 0xda,
	0x44, 0x67, 0xb0, 0x87, 0x96, 0xcf, 0x45, 0x66, 0x9f, 0xdc, 0xfe, 0xe1, 0x97, 0xef, 0xb7, 0xeb,
	0x68, 0xfb, 0x5c, 0x19, 0x0f, 0xa9, 0x48, 0x06, 0xf4, 0xcc, 0xb5, 0x34, 0x7e, 0xac, 0x21, 0x7c,
	0xb1, 0x34, 0x7c, 0x0d, 0x2d, 0x76, 0x69, 0x06, 0x84, 0x33, 0x7b, 0xe5, 0x73, 0xe1, 0x82, 0xf9,
	0x0c, 0x18, 0xbe, 0x8f, 0xd6, 0xf2, 0x0c, 0x08, 0x1b, 0x49, 0x1a, 0xf3, 0x88, 0x8c, 0x41, 0x37,
	0xeb, 0xa5, 0x66, 0x39, 0xf4, 0xf2, 0x0c, 0xf6, 0x5d, 0x66, 0xcf, 0xc1, 0xeb, 0x68, 0xb9, 0x80,
	0x90, 0x84, 0xea, 0x81, 0x5f, 0xb7, 0xdd, 0x44, 0x4e, 0xec, 0x88, 0xea, 0x01, 0xae, 0xa3, 0xa5,
	0x48, 0x49, 0x67, 0x83, 0x68, 0x64, 0x8d, 0x54, 0x0d, 0xcf, 0x86, 0xf0, 0x4d, 0x8b, 0xe8, 0xf1,
	0xbe, 0x93, 0x98, 0x75, 0x12, 0x2e, 0x64, 0x25, 0xa6, 0x80, 0x11, 0x8d, 0x85, 0xbd, 0xfa, 0x09,
	0xe0, 0x2b, 0x1a, 0x0b, 0xfc, 0x09, 0xda, 0xa4, 0x42, 0xa8, 0xb7, 0x24, 0x97, 0xdf, 0x48, 0xf5,
	0x56, 0x12, 0xe3, 0x42, 0x1e, 0x91, 0x1e, 0x07, 0xc1, 0x32, 0x7b, 0xc5, 0xe5, 0xd0, 0xb7, 0x90,
	0x2f, 0x1c, 0xe2, 0xd8, 0x02, 0x9e, 0xd9, 0x3c, 0xde, 0x45, 0x5b, 0x29, 0xbc, 0x81, 0x48, 0x4f,
	0xf8, 0xe3, 0xe3, 0x17, 0x02, 0x1b, 0x56, 0x60, 0xc3, 0x81, 0x0a, 0x85, 0xa2, 0x0f, 0x53, 0x09,
	0xde, 0x97, 0x2a, 0x85, 0x0f, 0x49, 0x6c, 0x3b, 0x09, 0x07, 0x7a, 0xaf, 0xc4, 0x3d, 0x84, 0xed,
	0x2d, 0x12, 0xca, 0x58, 0x0a, 0x59, 0xe6, 0xba, 0xb1, 0x60, 0x0f, 0xeb, 0xd9, 0xcc, 0xae, 0x4b,
	0xd8, 0x9e, 0x00, 0xf2, 0x85, 0x8a, 0xa8, 0x98, 0xa0, 0x79, 0x32, 0xb1, 0xf4, 0xa2, 0x7d, 0xac,
	0xf7, 0x2e, 0x77, 0x68, 0x2b, 0x48, 0x0a, 0xb7, 0x87, 0x57, 0xad, 0x5a, 0xf1, 0x0b, 0x93, 0x30,
	0xde, 0x44, 0x15, 0xa1, 0xfa, 0x44, 0xc0, 0x10, 0x84, 0x5f, 0xb6, 0xb5, 0x94, 0x85, 0xea, 0x1f,
	0x98, 0x6f, 0xf3, 0xa2, 0x22, 0x15, 0x27, 0x4a, 0x9a, 0x07, 0x3e, 0x85, 0x55, 0xdc, 0x8b, 0x9a,
	0xa4, 0x0e, 0xc6, 0xf8, 0x2d, 0x84, 0x0c, 0xaa, 0xa7, 0xd2, 0x98, 0x6a, 0x1f, 0x59, 0x98, 0x91,
	0x7f, 0x66, 0x03, 0xa6, 0x01, 0xd3, 0x34, 0x81, 0x2c, 0xa2, 0x09, 0x30, 0x7f, 0xd3, 0x39, 0x6f,
	0x02, 0xeb, 0xb8, 0x38, 0xbe, 0x8e, 0x4c, 0x21, 0xae, 0x49, 0x4b, 0x6e, 0x6a, 0x09, 0xe5, 0xfc,
	0x72, 0x07, 0xad, 0x98, 0x51, 0xcc, 0x23, 0x20, 0x91, 0xc8, 0x33, 0x0d, 0xa9, 0x5f, 0xb5, 0x88,
	0x5a, 0x11, 0x7e, 0xea, 0xa2, 0x78, 0x07, 0x2d, 0x8f, 0x81, 0x52, 0x31, 0xf0, 0x6b, 0x16, 0xb5,
	0x54, 0xc4, 0x0e, 0x15, 0x83, 0xb3, 0x90, 0x6f, 0x95, 0x04, 0x7f, 0xe5, 0x1c, 0xe4, 0xb5, 0x92,
	0x80, 0x03, 0xb4, 0xd6, 0xe3, 0x02, 0x48, 0x4f, 0xe4, 0xd9, 0x80, 0x70, 0xa9, 0x21, 0x1d, 0x52,
	0xe1, 0x7b, 0x97, 0x4d, 0xa8, 0x55, 0xc3, 0x7a, 0x66, 0x48, 0x41, 0xc1, 0xc1, 0xff, 0x45, 0x88,
	0xa5, 0x94, 0x4b, 0x62, 0x46, 0x97, 0xbf, 0x7a, 0x99, 0x42, 0xc5, 0x82, 0x4f, 0x78, 0x0c, 0xf8,
	0x4b, 0x54, 0x73, 0xcc, 0x4c, 0xa7, 0x54, 0x43, 0x7f, 0xe4, 0xef, 0x58, 0x17, 0x3c, 0xf8, 0x08,
	0x17, 0xec, 0x1b, 0xe2, 0x71, 0xc1, 0x0b, 0xab, 0xec, 0xec, 0xa7, 0x19, 0xe5, 0x09, 0xb5, 0x23,
	0x3c, 0x1b, 0xe4, 0x9a, 0x19, 0x6b, 0xdb, 0xe2, 0xf0, 0xa5, 0xa3, 0xdc, 0xd1, 0x8e, 0x0b, 0x96,
	0xad, 0xf2, 0xff, 0x68, 0x2e, 0x36, 0x8d, 0x5e, 0xb3, 0xb5, 0xdd, 0xf9, 0x88, 0xda, 0x5e, 0x28,
	0x06, 0xa1, 0x25, 0x19, 0xbb, 0x31, 0x9e, 0xd1, 0xae, 0x00, 0x72, 0x66, 0x90, 0xfb, 0xff, 0xb2,
	0x06, 0x59, 0x2d, 0x52, 0x9f, 0x4e, 0xe6, 0x38, 0x7e, 0x80, 0xd6, 0x41, 0x5a, 0x78, 0x9c, 0x6b,
	0x38, 0x25, 0x3a, 0xa5, 0x11, 0x97, 0x7d, 0xff, 0x9a, 0x25, 0x60, 0x97, 0x7b, 0x61, 0x52, 0x27,
	0x2e, 0x83, 0x6f, 0xa1, 0xea, 0x78, 0x3d, 0xb8, 0x7d, 0xe5, 0xdb, 0x69, 0xb5, 0x5c, 0x04, 0xdd,
	0x3a, 0xba, 0x8d, 0x6a, 0x51, 0x92, 0x67, 0xa0, 0x89, 0x1e, 0xa4, 0x40, 0x59, 0xe6, 0x5f, 0xb7,
	0x82, 0x55, 0x17, 0x3d, 0x71, 0x41, 0xdc, 0x9e, 0x54, 0xcb, 0x08, 0x9c, 0x6a, 0x90, 0x99, 0xdd,
	0x1e, 0x37, 0xea, 0xb3, 0xcd, 0x4a, 0x88, 0xc7, 0xa9, 0xce, 0x24, 0x83, 0xef, 0xa2, 0xd5, 0xae,
	0x52, 0xda, 0xdc, 0xdf, 0xf4, 0x29, 0x6f, 0xd9, 0x02, 0xbc, 0x49, 0x62, 0xfc, 0x2e, 0x43, 0xb4,
	0x33, 0xe0, 0x8c, 0x81, 0x24, 0xb6, 0x85, 0x64, 0xfc, 0x5f, 0x02, 0x30, 0x12, 0xd3, 0x53, 0x3b,
	0xff, 0x32, 0x7f, 0xdd, 0x4c, 0xf6, 0xbd, 0xf2, 0x4f, 0x7f, 0xfe, 0xf5, 0xfb, 0x7c, 0xc9, 0x2f,
	0x85, 0x5b, 0x8e, 0xd2, 0x31, 0x8c, 0xfd, 0x09, 0xe1, 0x05, 0x3d, 0x35, 0xd3, 0x30, 0xc3, 0x5f,
	0xa3, 0xe6, 0x3f, 0x69, 0xaa, 0xee, 0x1b, 0x22, 0x69, 0x0c, 0x44, 0x80, 0xf4, 0xaf, 0xbe, 0x23,
	0xdd, 0xf8, 0x90, 0xf4, 0xcb, 0xee, 0x9b, 0x43, 0x1a, 0xc3, 0x01, 0xc8, 0xc6, 0x26, 0xaa, 0x4c,
	0x07, 0xcb, 0x02, 0x9a, 0x19, 0xfe, 0xc7, 0xbb, 0x62, 0xff, 0x3e, 0xf6, 0x4a, 0x8d, 0xfb, 0x68,
	0xce, 0x5c, 0x35, 0xae, 0xa0, 0x79, 0xbb, 0xbd, 0xdc, 0x5e, 0x7c, 0x45, 0x05, 0x67, 0x54, 0x83,
	0x57, 0x32, 0x5f, 0x81, 0xe4, 0xfa, 0xa5, 0x14, 0x23, 0x6f, 0xa6, 0x71, 0x17, 0x55, 0xcf, 0xb9,
	0x16, 0x2f, 0xa1, 0xc5, 0xe7, 0x29, 0x65, 0x39, 0x15, 0xde, 0x15, 0x5c, 0x45, 0x95, 0x20, 0x8e,
	0x81, 0x71, 0x4b, 0x7d, 0x72, 0xdf, 0xac, 0xca, 0x26, 0xfa, 0xf7, 0xfb, 0x56, 0xe5, 0x45, 0xcb,
	0x7d, 0x36, 0x57, 0x5e, 0xf6, 0xaa, 0x7b, 0xff, 0xfb, 0xf9, 0xbb, 0x5f, 0x7f, 0x5b, 0x98, 0xf1,
	0x66, 0xd0, 0x0d, 0xae, 0x9c, 0x51, 0x93, 0x54, 0x9d, 0x8e, 0xde, 0xf1, 0xec, 0xde, 0xca, 0x74,
	0xd9, 0x1e, 0x99, 0x37, 0x70, 0x54, 0xea, 0x2e, 0xd8, 0xc7, 0xf0, 0xe8, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2b, 0x4b, 0x6a, 0xe1, 0x20, 0x0a, 0x00, 0x00,
}
