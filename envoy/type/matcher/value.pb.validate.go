// Code generated by protoc-gen-validate
// source: envoy/type/matcher/value.proto
// DO NOT EDIT!!!

package matcher

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on ValueMatcher with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ValueMatcher) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchPattern.(type) {

	case *ValueMatcher_NullMatch_:

		if v, ok := interface{}(m.GetNullMatch()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueMatcherValidationError{
					Field:  "NullMatch",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *ValueMatcher_DoubleMatch:

		if v, ok := interface{}(m.GetDoubleMatch()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueMatcherValidationError{
					Field:  "DoubleMatch",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *ValueMatcher_StringMatch:

		if v, ok := interface{}(m.GetStringMatch()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueMatcherValidationError{
					Field:  "StringMatch",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *ValueMatcher_BoolMatch:
		// no validation rules for BoolMatch

	case *ValueMatcher_PresentMatch:
		// no validation rules for PresentMatch

	case *ValueMatcher_ListMatch:

		if v, ok := interface{}(m.GetListMatch()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ValueMatcherValidationError{
					Field:  "ListMatch",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	default:
		return ValueMatcherValidationError{
			Field:  "MatchPattern",
			Reason: "value is required",
		}

	}

	return nil
}

// ValueMatcherValidationError is the validation error returned by
// ValueMatcher.Validate if the designated constraints aren't met.
type ValueMatcherValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ValueMatcherValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueMatcher.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ValueMatcherValidationError{}

// Validate checks the field values on ListMatcher with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListMatcher) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchPattern.(type) {

	case *ListMatcher_OneOf:

		if v, ok := interface{}(m.GetOneOf()).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListMatcherValidationError{
					Field:  "OneOf",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	default:
		return ListMatcherValidationError{
			Field:  "MatchPattern",
			Reason: "value is required",
		}

	}

	return nil
}

// ListMatcherValidationError is the validation error returned by
// ListMatcher.Validate if the designated constraints aren't met.
type ListMatcherValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ListMatcherValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMatcher.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ListMatcherValidationError{}

// Validate checks the field values on ValueMatcher_NullMatch with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValueMatcher_NullMatch) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ValueMatcher_NullMatchValidationError is the validation error returned by
// ValueMatcher_NullMatch.Validate if the designated constraints aren't met.
type ValueMatcher_NullMatchValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ValueMatcher_NullMatchValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValueMatcher_NullMatch.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ValueMatcher_NullMatchValidationError{}
