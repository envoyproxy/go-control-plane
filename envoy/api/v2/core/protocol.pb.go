// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/api/v2/core/protocol.proto

package core

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// [#not-implemented-hide:]
type TcpProtocolOptions struct {
}

func (m *TcpProtocolOptions) Reset()                    { *m = TcpProtocolOptions{} }
func (m *TcpProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*TcpProtocolOptions) ProtoMessage()               {}
func (*TcpProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{0} }

type Http1ProtocolOptions struct {
	// Handle HTTP requests with absolute URLs in the requests. These requests
	// are generally sent by clients to forward/explicit proxies. This allows clients to configure
	// envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
	// *http_proxy* environment variable.
	AllowAbsoluteUrl *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=allow_absolute_url,json=allowAbsoluteUrl" json:"allow_absolute_url,omitempty"`
}

func (m *Http1ProtocolOptions) Reset()                    { *m = Http1ProtocolOptions{} }
func (m *Http1ProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*Http1ProtocolOptions) ProtoMessage()               {}
func (*Http1ProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{1} }

func (m *Http1ProtocolOptions) GetAllowAbsoluteUrl() *google_protobuf.BoolValue {
	if m != nil {
		return m.AllowAbsoluteUrl
	}
	return nil
}

type Http2ProtocolOptions struct {
	// `Maximum table size <http://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
	// (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
	// range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
	// compression.
	HpackTableSize *google_protobuf.UInt32Value `protobuf:"bytes,1,opt,name=hpack_table_size,json=hpackTableSize" json:"hpack_table_size,omitempty"`
	// `Maximum concurrent streams <http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
	// allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
	// and defaults to 2147483647.
	MaxConcurrentStreams *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=max_concurrent_streams,json=maxConcurrentStreams" json:"max_concurrent_streams,omitempty"`
	// This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
	// HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
	// stop the flow of data to the codec buffers.
	InitialStreamWindowSize *google_protobuf.UInt32Value `protobuf:"bytes,3,opt,name=initial_stream_window_size,json=initialStreamWindowSize" json:"initial_stream_window_size,omitempty"`
	// Similar to *initial_stream_window_size*, but for connection-level flow-control
	// window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
	InitialConnectionWindowSize *google_protobuf.UInt32Value `protobuf:"bytes,4,opt,name=initial_connection_window_size,json=initialConnectionWindowSize" json:"initial_connection_window_size,omitempty"`
}

func (m *Http2ProtocolOptions) Reset()                    { *m = Http2ProtocolOptions{} }
func (m *Http2ProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*Http2ProtocolOptions) ProtoMessage()               {}
func (*Http2ProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{2} }

func (m *Http2ProtocolOptions) GetHpackTableSize() *google_protobuf.UInt32Value {
	if m != nil {
		return m.HpackTableSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxConcurrentStreams() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxConcurrentStreams
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialStreamWindowSize() *google_protobuf.UInt32Value {
	if m != nil {
		return m.InitialStreamWindowSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialConnectionWindowSize() *google_protobuf.UInt32Value {
	if m != nil {
		return m.InitialConnectionWindowSize
	}
	return nil
}

// [#not-implemented-hide:]
type GrpcProtocolOptions struct {
	Http2ProtocolOptions *Http2ProtocolOptions `protobuf:"bytes,1,opt,name=http2_protocol_options,json=http2ProtocolOptions" json:"http2_protocol_options,omitempty"`
}

func (m *GrpcProtocolOptions) Reset()                    { *m = GrpcProtocolOptions{} }
func (m *GrpcProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*GrpcProtocolOptions) ProtoMessage()               {}
func (*GrpcProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptorProtocol, []int{3} }

func (m *GrpcProtocolOptions) GetHttp2ProtocolOptions() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpProtocolOptions)(nil), "envoy.api.v2.core.TcpProtocolOptions")
	proto.RegisterType((*Http1ProtocolOptions)(nil), "envoy.api.v2.core.Http1ProtocolOptions")
	proto.RegisterType((*Http2ProtocolOptions)(nil), "envoy.api.v2.core.Http2ProtocolOptions")
	proto.RegisterType((*GrpcProtocolOptions)(nil), "envoy.api.v2.core.GrpcProtocolOptions")
}
func (m *TcpProtocolOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpProtocolOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Http1ProtocolOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Http1ProtocolOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllowAbsoluteUrl != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.AllowAbsoluteUrl.Size()))
		n1, err := m.AllowAbsoluteUrl.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Http2ProtocolOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Http2ProtocolOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HpackTableSize != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.HpackTableSize.Size()))
		n2, err := m.HpackTableSize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MaxConcurrentStreams != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.MaxConcurrentStreams.Size()))
		n3, err := m.MaxConcurrentStreams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.InitialStreamWindowSize != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.InitialStreamWindowSize.Size()))
		n4, err := m.InitialStreamWindowSize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.InitialConnectionWindowSize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.InitialConnectionWindowSize.Size()))
		n5, err := m.InitialConnectionWindowSize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *GrpcProtocolOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrpcProtocolOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Http2ProtocolOptions != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Http2ProtocolOptions.Size()))
		n6, err := m.Http2ProtocolOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TcpProtocolOptions) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Http1ProtocolOptions) Size() (n int) {
	var l int
	_ = l
	if m.AllowAbsoluteUrl != nil {
		l = m.AllowAbsoluteUrl.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Http2ProtocolOptions) Size() (n int) {
	var l int
	_ = l
	if m.HpackTableSize != nil {
		l = m.HpackTableSize.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.MaxConcurrentStreams != nil {
		l = m.MaxConcurrentStreams.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.InitialStreamWindowSize != nil {
		l = m.InitialStreamWindowSize.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.InitialConnectionWindowSize != nil {
		l = m.InitialConnectionWindowSize.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *GrpcProtocolOptions) Size() (n int) {
	var l int
	_ = l
	if m.Http2ProtocolOptions != nil {
		l = m.Http2ProtocolOptions.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TcpProtocolOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpProtocolOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpProtocolOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Http1ProtocolOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Http1ProtocolOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Http1ProtocolOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAbsoluteUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowAbsoluteUrl == nil {
				m.AllowAbsoluteUrl = &google_protobuf.BoolValue{}
			}
			if err := m.AllowAbsoluteUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Http2ProtocolOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Http2ProtocolOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Http2ProtocolOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpackTableSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HpackTableSize == nil {
				m.HpackTableSize = &google_protobuf.UInt32Value{}
			}
			if err := m.HpackTableSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrentStreams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxConcurrentStreams == nil {
				m.MaxConcurrentStreams = &google_protobuf.UInt32Value{}
			}
			if err := m.MaxConcurrentStreams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialStreamWindowSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialStreamWindowSize == nil {
				m.InitialStreamWindowSize = &google_protobuf.UInt32Value{}
			}
			if err := m.InitialStreamWindowSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialConnectionWindowSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialConnectionWindowSize == nil {
				m.InitialConnectionWindowSize = &google_protobuf.UInt32Value{}
			}
			if err := m.InitialConnectionWindowSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrpcProtocolOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrpcProtocolOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrpcProtocolOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http2ProtocolOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Http2ProtocolOptions == nil {
				m.Http2ProtocolOptions = &Http2ProtocolOptions{}
			}
			if err := m.Http2ProtocolOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("envoy/api/v2/core/protocol.proto", fileDescriptorProtocol) }

var fileDescriptorProtocol = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0x15, 0x06, 0x01, 0x32, 0x15, 0xb4, 0x21, 0x6a, 0x47, 0x01, 0x45, 0x55, 0x36, 0x54,
	0x5d, 0x38, 0x22, 0x3d, 0x01, 0x53, 0x09, 0xca, 0x0a, 0x94, 0xb6, 0xb0, 0x42, 0xc6, 0x71, 0x4d,
	0xc7, 0xc2, 0xe3, 0x67, 0x39, 0x4e, 0x52, 0x7a, 0x21, 0xee, 0xc0, 0x8a, 0x25, 0x4b, 0x8e, 0x80,
	0x66, 0xc7, 0x29, 0x82, 0x12, 0x3b, 0x45, 0x4c, 0x47, 0x02, 0x75, 0x67, 0xd9, 0xef, 0xff, 0xbe,
	0x97, 0xbc, 0x87, 0x76, 0xb9, 0x6a, 0xe0, 0x73, 0x46, 0xb5, 0xc8, 0x9a, 0x3c, 0x63, 0x60, 0x78,
	0xa6, 0x0d, 0x58, 0x60, 0x20, 0xf1, 0x70, 0x08, 0xb7, 0x86, 0x0a, 0x4c, 0xb5, 0xc0, 0x4d, 0x8e,
	0xfb, 0x8a, 0x38, 0x39, 0x07, 0x38, 0x97, 0xbe, 0xb2, 0xac, 0x3f, 0x66, 0xad, 0xa1, 0x5a, 0x73,
	0x53, 0xb9, 0x48, 0xbc, 0xd3, 0x50, 0x29, 0xce, 0xa8, 0xe5, 0xd9, 0x78, 0x70, 0x0f, 0x69, 0x84,
	0xc2, 0x13, 0xa6, 0xdf, 0x78, 0xc1, 0x6b, 0x6d, 0x05, 0xa8, 0x2a, 0xfd, 0x80, 0xa2, 0x23, 0x6b,
	0xf5, 0xb3, 0x95, 0xfb, 0xf0, 0x08, 0x85, 0x54, 0x4a, 0x68, 0x09, 0x2d, 0x2b, 0x90, 0xb5, 0xe5,
	0xa4, 0x36, 0x72, 0x1a, 0xec, 0x06, 0x7b, 0xf7, 0xf3, 0x18, 0xbb, 0x1e, 0xf0, 0xd8, 0x03, 0x9e,
	0x01, 0xc8, 0xb7, 0x54, 0xd6, 0xbc, 0xd8, 0x1c, 0x52, 0xcf, 0x7d, 0xe8, 0xd4, 0xc8, 0xf4, 0xcb,
	0xc4, 0x29, 0xf2, 0x55, 0xc5, 0x0b, 0xb4, 0x39, 0xd7, 0x94, 0x7d, 0x22, 0x96, 0x96, 0x92, 0x93,
	0x4a, 0x5c, 0x72, 0x2f, 0x78, 0x72, 0x4d, 0x70, 0xfa, 0x4a, 0xd9, 0x83, 0xdc, 0x29, 0x1e, 0x0c,
	0xa9, 0x93, 0x3e, 0x74, 0x2c, 0x2e, 0x79, 0xc8, 0xd0, 0xf6, 0x82, 0x5e, 0x10, 0x06, 0x8a, 0xd5,
	0xc6, 0x70, 0x65, 0x49, 0x65, 0x0d, 0xa7, 0x8b, 0x6a, 0x7a, 0xeb, 0xdf, 0xb4, 0xd9, 0xc3, 0xaf,
	0xbf, 0xbe, 0x4d, 0xd0, 0xfe, 0xbd, 0x69, 0xd7, 0x75, 0xdd, 0xdd, 0xbd, 0xa0, 0x88, 0x16, 0xf4,
	0xe2, 0xf0, 0x8a, 0x75, 0xec, 0x50, 0xa1, 0x44, 0xb1, 0x50, 0xc2, 0x0a, 0x2a, 0x3d, 0x9d, 0xb4,
	0x42, 0x9d, 0x41, 0xeb, 0xda, 0x9e, 0xfc, 0x87, 0x68, 0xab, 0x17, 0x6d, 0xec, 0x23, 0x2f, 0xea,
	0xba, 0x49, 0xb1, 0xe3, 0x91, 0x4e, 0xf2, 0x6e, 0x00, 0x0e, 0x9f, 0x64, 0x51, 0x32, 0xda, 0x18,
	0x28, 0xc5, 0x59, 0xff, 0xc7, 0xfe, 0x32, 0xde, 0xbe, 0x99, 0xf1, 0xb1, 0xc7, 0x1e, 0x5e, 0x51,
	0xff, 0x58, 0x53, 0x8b, 0x1e, 0xbd, 0x34, 0x9a, 0xad, 0xce, 0xe9, 0x3d, 0xda, 0x9e, 0xf7, 0xf3,
	0x23, 0xe3, 0x72, 0x12, 0x70, 0x2f, 0x7e, 0x5a, 0x4f, 0xf1, 0xb5, 0x2d, 0xc5, 0xeb, 0x06, 0x5e,
	0x44, 0xf3, 0x35, 0xb7, 0xb3, 0x8d, 0xef, 0xcb, 0x24, 0xf8, 0xb1, 0x4c, 0x82, 0x9f, 0xcb, 0x24,
	0x28, 0xef, 0x0c, 0x92, 0x83, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xe2, 0x8b, 0x4d, 0x1c,
	0x03, 0x00, 0x00,
}
