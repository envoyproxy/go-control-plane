// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/rbac/v2alpha/rbac.proto

/*
	Package v2alpha is a generated protocol buffer package.

	It is generated from these files:
		envoy/config/rbac/v2alpha/rbac.proto

	It has these top-level messages:
		RBAC
		Policy
		MapEntryMatch
		IpMatch
		PortMatch
		Permission
		Principal
*/
package v2alpha

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"
import envoy_api_v2_core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
import envoy_type "github.com/envoyproxy/go-control-plane/envoy/type"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Should we do white-list or black-list style access control.
type RBAC_Action int32

const (
	// The policies grant access to principals. The rest is denied. This is white-list style
	// access control. This is the default type.
	RBAC_ALLOW RBAC_Action = 0
	// The policies deny access to principals. The rest is allowed. This is black-list style
	// access control.
	RBAC_DENY RBAC_Action = 1
)

var RBAC_Action_name = map[int32]string{
	0: "ALLOW",
	1: "DENY",
}
var RBAC_Action_value = map[string]int32{
	"ALLOW": 0,
	"DENY":  1,
}

func (x RBAC_Action) String() string {
	return proto.EnumName(RBAC_Action_name, int32(x))
}
func (RBAC_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptorRbac, []int{0, 0} }

// Role Based Access Control (RBAC) provides service-level and method-level access control for a service.
// The RBAC engine authorizes a request by evaluating the request context (expressed in the form of
// :ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`) against the RBAC policies.
//
// RBAC policies are additive. The policies are examined in order. A request is allowed once a matching policy
// is found (suppose the `action` is ALLOW).
//
// Here is an example of RBAC configuration. It has two policies:
// * Service account "cluster.local/ns/default/sa/admin" has full access (empty permission entry means full access)
//   to the service.
// * Any user (empty principal entry means any user) can read ("GET") the service at paths with prefix "/products" or
//   suffix "/reviews" when request header "version" set to either "v1" or "v2".
//
//   action: ALLOW
//   policies:
//     "service-admin":
//       permissions:
//       -
//       principals:
//         authenticated:
//           name: "cluster.local/ns/default/sa/admin"
//     "product-viewer":
//       permissions:
//       - paths: [prefix: "/products", suffix: "/reviews"]
//         methods: ["GET"]
//         conditions:
//         - header:
//             key: "version"
//             values: [simple: "v1", simple: "v2"]
//       principals:
//       -
//
type RBAC struct {
	Action RBAC_Action `protobuf:"varint,1,opt,name=action,proto3,enum=envoy.config.rbac.v2alpha.RBAC_Action" json:"action,omitempty"`
	// Maps from policy name to policy.
	Policies map[string]*Policy `protobuf:"bytes,2,rep,name=policies" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RBAC) Reset()                    { *m = RBAC{} }
func (m *RBAC) String() string            { return proto.CompactTextString(m) }
func (*RBAC) ProtoMessage()               {}
func (*RBAC) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{0} }

func (m *RBAC) GetAction() RBAC_Action {
	if m != nil {
		return m.Action
	}
	return RBAC_ALLOW
}

func (m *RBAC) GetPolicies() map[string]*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

// Policy specifies a role and the principals that are assigned/denied the role.
type Policy struct {
	// Required. The set of permissions that define a role.
	Permissions []*Permission `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
	// Required. List of principals that are assigned/denied the role based on “action”.
	Principals []*Principal `protobuf:"bytes,2,rep,name=principals" json:"principals,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{1} }

func (m *Policy) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Policy) GetPrincipals() []*Principal {
	if m != nil {
		return m.Principals
	}
	return nil
}

// Specifies how to match an entry in a map.
type MapEntryMatch struct {
	// The key to select an entry from the map.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// A list of matched values.
	Values []*envoy_type.StringMatch `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *MapEntryMatch) Reset()                    { *m = MapEntryMatch{} }
func (m *MapEntryMatch) String() string            { return proto.CompactTextString(m) }
func (*MapEntryMatch) ProtoMessage()               {}
func (*MapEntryMatch) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{2} }

func (m *MapEntryMatch) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MapEntryMatch) GetValues() []*envoy_type.StringMatch {
	if m != nil {
		return m.Values
	}
	return nil
}

// Specifies how to match IP addresses.
type IpMatch struct {
	// IP addresses in CIDR notation.
	Cidrs []*envoy_api_v2_core.CidrRange `protobuf:"bytes,1,rep,name=cidrs" json:"cidrs,omitempty"`
}

func (m *IpMatch) Reset()                    { *m = IpMatch{} }
func (m *IpMatch) String() string            { return proto.CompactTextString(m) }
func (*IpMatch) ProtoMessage()               {}
func (*IpMatch) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{3} }

func (m *IpMatch) GetCidrs() []*envoy_api_v2_core.CidrRange {
	if m != nil {
		return m.Cidrs
	}
	return nil
}

// Specifies how to match ports.
type PortMatch struct {
	// Port numbers.
	Ports []uint32 `protobuf:"varint,1,rep,packed,name=ports" json:"ports,omitempty"`
}

func (m *PortMatch) Reset()                    { *m = PortMatch{} }
func (m *PortMatch) String() string            { return proto.CompactTextString(m) }
func (*PortMatch) ProtoMessage()               {}
func (*PortMatch) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{4} }

func (m *PortMatch) GetPorts() []uint32 {
	if m != nil {
		return m.Ports
	}
	return nil
}

// Permission defines a permission to access the service.
type Permission struct {
	// Optional. A list of HTTP paths or gRPC methods.
	// gRPC methods must be presented as fully-qualified name in the form of
	// packageName.serviceName/methodName.
	// If this field is unset, it applies to any path.
	Paths []*envoy_type.StringMatch `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
	// Required. A list of HTTP methods (e.g., "GET", "POST").
	// If this field is unset, it applies to any method.
	Methods []string `protobuf:"bytes,2,rep,name=methods" json:"methods,omitempty"`
	// Optional. Custom conditions.
	Conditions []*Permission_Condition `protobuf:"bytes,3,rep,name=conditions" json:"conditions,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{5} }

func (m *Permission) GetPaths() []*envoy_type.StringMatch {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *Permission) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *Permission) GetConditions() []*Permission_Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

// Definition of a custom condition.
type Permission_Condition struct {
	// Types that are valid to be assigned to ConditionSpec:
	//	*Permission_Condition_Header
	//	*Permission_Condition_DestinationIps
	//	*Permission_Condition_DestinationPorts
	ConditionSpec isPermission_Condition_ConditionSpec `protobuf_oneof:"condition_spec"`
}

func (m *Permission_Condition) Reset()                    { *m = Permission_Condition{} }
func (m *Permission_Condition) String() string            { return proto.CompactTextString(m) }
func (*Permission_Condition) ProtoMessage()               {}
func (*Permission_Condition) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{5, 0} }

type isPermission_Condition_ConditionSpec interface {
	isPermission_Condition_ConditionSpec()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Permission_Condition_Header struct {
	Header *MapEntryMatch `protobuf:"bytes,1,opt,name=header,oneof"`
}
type Permission_Condition_DestinationIps struct {
	DestinationIps *IpMatch `protobuf:"bytes,2,opt,name=destination_ips,json=destinationIps,oneof"`
}
type Permission_Condition_DestinationPorts struct {
	DestinationPorts *PortMatch `protobuf:"bytes,3,opt,name=destination_ports,json=destinationPorts,oneof"`
}

func (*Permission_Condition_Header) isPermission_Condition_ConditionSpec()           {}
func (*Permission_Condition_DestinationIps) isPermission_Condition_ConditionSpec()   {}
func (*Permission_Condition_DestinationPorts) isPermission_Condition_ConditionSpec() {}

func (m *Permission_Condition) GetConditionSpec() isPermission_Condition_ConditionSpec {
	if m != nil {
		return m.ConditionSpec
	}
	return nil
}

func (m *Permission_Condition) GetHeader() *MapEntryMatch {
	if x, ok := m.GetConditionSpec().(*Permission_Condition_Header); ok {
		return x.Header
	}
	return nil
}

func (m *Permission_Condition) GetDestinationIps() *IpMatch {
	if x, ok := m.GetConditionSpec().(*Permission_Condition_DestinationIps); ok {
		return x.DestinationIps
	}
	return nil
}

func (m *Permission_Condition) GetDestinationPorts() *PortMatch {
	if x, ok := m.GetConditionSpec().(*Permission_Condition_DestinationPorts); ok {
		return x.DestinationPorts
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Permission_Condition) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Permission_Condition_OneofMarshaler, _Permission_Condition_OneofUnmarshaler, _Permission_Condition_OneofSizer, []interface{}{
		(*Permission_Condition_Header)(nil),
		(*Permission_Condition_DestinationIps)(nil),
		(*Permission_Condition_DestinationPorts)(nil),
	}
}

func _Permission_Condition_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Permission_Condition)
	// condition_spec
	switch x := m.ConditionSpec.(type) {
	case *Permission_Condition_Header:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *Permission_Condition_DestinationIps:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DestinationIps); err != nil {
			return err
		}
	case *Permission_Condition_DestinationPorts:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DestinationPorts); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Permission_Condition.ConditionSpec has unexpected type %T", x)
	}
	return nil
}

func _Permission_Condition_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Permission_Condition)
	switch tag {
	case 1: // condition_spec.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapEntryMatch)
		err := b.DecodeMessage(msg)
		m.ConditionSpec = &Permission_Condition_Header{msg}
		return true, err
	case 2: // condition_spec.destination_ips
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpMatch)
		err := b.DecodeMessage(msg)
		m.ConditionSpec = &Permission_Condition_DestinationIps{msg}
		return true, err
	case 3: // condition_spec.destination_ports
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortMatch)
		err := b.DecodeMessage(msg)
		m.ConditionSpec = &Permission_Condition_DestinationPorts{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Permission_Condition_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Permission_Condition)
	// condition_spec
	switch x := m.ConditionSpec.(type) {
	case *Permission_Condition_Header:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Permission_Condition_DestinationIps:
		s := proto.Size(x.DestinationIps)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Permission_Condition_DestinationPorts:
		s := proto.Size(x.DestinationPorts)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Principal defines an identity or a group of identities.
type Principal struct {
	// Optional. Authenticated attributes that identify the principal.
	Authenticated *Principal_Authenticated `protobuf:"bytes,1,opt,name=authenticated" json:"authenticated,omitempty"`
	// Optional. Custom attributes that identify the principal.
	Attributes []*Principal_Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Principal) Reset()                    { *m = Principal{} }
func (m *Principal) String() string            { return proto.CompactTextString(m) }
func (*Principal) ProtoMessage()               {}
func (*Principal) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{6} }

func (m *Principal) GetAuthenticated() *Principal_Authenticated {
	if m != nil {
		return m.Authenticated
	}
	return nil
}

func (m *Principal) GetAttributes() []*Principal_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Authentication attributes for principal. These could be filled out inside RBAC filter.
// Or if an authentication filter is used, they can be provided by the authentication filter.
type Principal_Authenticated struct {
	// Optional. The name of the principal. This matches to the "source.principal" field in
	// ":ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`.
	// If unset, it applies to any user.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Principal_Authenticated) Reset()                    { *m = Principal_Authenticated{} }
func (m *Principal_Authenticated) String() string            { return proto.CompactTextString(m) }
func (*Principal_Authenticated) ProtoMessage()               {}
func (*Principal_Authenticated) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{6, 0} }

func (m *Principal_Authenticated) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Definition of a custom attribute to identify the principal.
type Principal_Attribute struct {
	// Types that are valid to be assigned to AttributeSpec:
	//	*Principal_Attribute_Service
	//	*Principal_Attribute_SourceIps
	//	*Principal_Attribute_Header
	AttributeSpec isPrincipal_Attribute_AttributeSpec `protobuf_oneof:"attribute_spec"`
}

func (m *Principal_Attribute) Reset()                    { *m = Principal_Attribute{} }
func (m *Principal_Attribute) String() string            { return proto.CompactTextString(m) }
func (*Principal_Attribute) ProtoMessage()               {}
func (*Principal_Attribute) Descriptor() ([]byte, []int) { return fileDescriptorRbac, []int{6, 1} }

type isPrincipal_Attribute_AttributeSpec interface {
	isPrincipal_Attribute_AttributeSpec()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Principal_Attribute_Service struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}
type Principal_Attribute_SourceIps struct {
	SourceIps *IpMatch `protobuf:"bytes,2,opt,name=source_ips,json=sourceIps,oneof"`
}
type Principal_Attribute_Header struct {
	Header *MapEntryMatch `protobuf:"bytes,3,opt,name=header,oneof"`
}

func (*Principal_Attribute_Service) isPrincipal_Attribute_AttributeSpec()   {}
func (*Principal_Attribute_SourceIps) isPrincipal_Attribute_AttributeSpec() {}
func (*Principal_Attribute_Header) isPrincipal_Attribute_AttributeSpec()    {}

func (m *Principal_Attribute) GetAttributeSpec() isPrincipal_Attribute_AttributeSpec {
	if m != nil {
		return m.AttributeSpec
	}
	return nil
}

func (m *Principal_Attribute) GetService() string {
	if x, ok := m.GetAttributeSpec().(*Principal_Attribute_Service); ok {
		return x.Service
	}
	return ""
}

func (m *Principal_Attribute) GetSourceIps() *IpMatch {
	if x, ok := m.GetAttributeSpec().(*Principal_Attribute_SourceIps); ok {
		return x.SourceIps
	}
	return nil
}

func (m *Principal_Attribute) GetHeader() *MapEntryMatch {
	if x, ok := m.GetAttributeSpec().(*Principal_Attribute_Header); ok {
		return x.Header
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Principal_Attribute) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Principal_Attribute_OneofMarshaler, _Principal_Attribute_OneofUnmarshaler, _Principal_Attribute_OneofSizer, []interface{}{
		(*Principal_Attribute_Service)(nil),
		(*Principal_Attribute_SourceIps)(nil),
		(*Principal_Attribute_Header)(nil),
	}
}

func _Principal_Attribute_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Principal_Attribute)
	// attribute_spec
	switch x := m.AttributeSpec.(type) {
	case *Principal_Attribute_Service:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Service)
	case *Principal_Attribute_SourceIps:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceIps); err != nil {
			return err
		}
	case *Principal_Attribute_Header:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Principal_Attribute.AttributeSpec has unexpected type %T", x)
	}
	return nil
}

func _Principal_Attribute_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Principal_Attribute)
	switch tag {
	case 1: // attribute_spec.service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.AttributeSpec = &Principal_Attribute_Service{x}
		return true, err
	case 2: // attribute_spec.source_ips
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IpMatch)
		err := b.DecodeMessage(msg)
		m.AttributeSpec = &Principal_Attribute_SourceIps{msg}
		return true, err
	case 3: // attribute_spec.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapEntryMatch)
		err := b.DecodeMessage(msg)
		m.AttributeSpec = &Principal_Attribute_Header{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Principal_Attribute_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Principal_Attribute)
	// attribute_spec
	switch x := m.AttributeSpec.(type) {
	case *Principal_Attribute_Service:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Service)))
		n += len(x.Service)
	case *Principal_Attribute_SourceIps:
		s := proto.Size(x.SourceIps)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Principal_Attribute_Header:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*RBAC)(nil), "envoy.config.rbac.v2alpha.RBAC")
	proto.RegisterType((*Policy)(nil), "envoy.config.rbac.v2alpha.Policy")
	proto.RegisterType((*MapEntryMatch)(nil), "envoy.config.rbac.v2alpha.MapEntryMatch")
	proto.RegisterType((*IpMatch)(nil), "envoy.config.rbac.v2alpha.IpMatch")
	proto.RegisterType((*PortMatch)(nil), "envoy.config.rbac.v2alpha.PortMatch")
	proto.RegisterType((*Permission)(nil), "envoy.config.rbac.v2alpha.Permission")
	proto.RegisterType((*Permission_Condition)(nil), "envoy.config.rbac.v2alpha.Permission.Condition")
	proto.RegisterType((*Principal)(nil), "envoy.config.rbac.v2alpha.Principal")
	proto.RegisterType((*Principal_Authenticated)(nil), "envoy.config.rbac.v2alpha.Principal.Authenticated")
	proto.RegisterType((*Principal_Attribute)(nil), "envoy.config.rbac.v2alpha.Principal.Attribute")
	proto.RegisterEnum("envoy.config.rbac.v2alpha.RBAC_Action", RBAC_Action_name, RBAC_Action_value)
}
func (m *RBAC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBAC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.Action))
	}
	if len(m.Policies) > 0 {
		for k, _ := range m.Policies {
			dAtA[i] = 0x12
			i++
			v := m.Policies[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRbac(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRbac(uint64(len(k))) + msgSize
			i = encodeVarintRbac(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRbac(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRbac(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, msg := range m.Permissions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Principals) > 0 {
		for _, msg := range m.Principals {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MapEntryMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapEntryMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cidrs) > 0 {
		for _, msg := range m.Cidrs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortMatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ports) > 0 {
		dAtA3 := make([]byte, len(m.Ports)*10)
		var j2 int
		for _, num := range m.Ports {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRbac(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for _, msg := range m.Paths {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Methods) > 0 {
		for _, s := range m.Methods {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Permission_Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission_Condition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConditionSpec != nil {
		nn4, err := m.ConditionSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *Permission_Condition_Header) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Permission_Condition_DestinationIps) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DestinationIps != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.DestinationIps.Size()))
		n6, err := m.DestinationIps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Permission_Condition_DestinationPorts) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DestinationPorts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.DestinationPorts.Size()))
		n7, err := m.DestinationPorts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Principal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Principal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Authenticated != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.Authenticated.Size()))
		n8, err := m.Authenticated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRbac(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Principal_Authenticated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Principal_Authenticated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRbac(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Principal_Attribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Principal_Attribute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AttributeSpec != nil {
		nn9, err := m.AttributeSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *Principal_Attribute_Service) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintRbac(dAtA, i, uint64(len(m.Service)))
	i += copy(dAtA[i:], m.Service)
	return i, nil
}
func (m *Principal_Attribute_SourceIps) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SourceIps != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.SourceIps.Size()))
		n10, err := m.SourceIps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Principal_Attribute_Header) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Header != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRbac(dAtA, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func encodeVarintRbac(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RBAC) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovRbac(uint64(m.Action))
	}
	if len(m.Policies) > 0 {
		for k, v := range m.Policies {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRbac(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRbac(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRbac(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Policy) Size() (n int) {
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if len(m.Principals) > 0 {
		for _, e := range m.Principals {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *MapEntryMatch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *IpMatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Cidrs) > 0 {
		for _, e := range m.Cidrs {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *PortMatch) Size() (n int) {
	var l int
	_ = l
	if len(m.Ports) > 0 {
		l = 0
		for _, e := range m.Ports {
			l += sovRbac(uint64(e))
		}
		n += 1 + sovRbac(uint64(l)) + l
	}
	return n
}

func (m *Permission) Size() (n int) {
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for _, e := range m.Paths {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if len(m.Methods) > 0 {
		for _, s := range m.Methods {
			l = len(s)
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *Permission_Condition) Size() (n int) {
	var l int
	_ = l
	if m.ConditionSpec != nil {
		n += m.ConditionSpec.Size()
	}
	return n
}

func (m *Permission_Condition_Header) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *Permission_Condition_DestinationIps) Size() (n int) {
	var l int
	_ = l
	if m.DestinationIps != nil {
		l = m.DestinationIps.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *Permission_Condition_DestinationPorts) Size() (n int) {
	var l int
	_ = l
	if m.DestinationPorts != nil {
		l = m.DestinationPorts.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *Principal) Size() (n int) {
	var l int
	_ = l
	if m.Authenticated != nil {
		l = m.Authenticated.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	return n
}

func (m *Principal_Authenticated) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}

func (m *Principal_Attribute) Size() (n int) {
	var l int
	_ = l
	if m.AttributeSpec != nil {
		n += m.AttributeSpec.Size()
	}
	return n
}

func (m *Principal_Attribute_Service) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovRbac(uint64(l))
	return n
}
func (m *Principal_Attribute_SourceIps) Size() (n int) {
	var l int
	_ = l
	if m.SourceIps != nil {
		l = m.SourceIps.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *Principal_Attribute_Header) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}

func sovRbac(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRbac(x uint64) (n int) {
	return sovRbac(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RBAC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBAC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBAC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (RBAC_Action(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = make(map[string]*Policy)
			}
			var mapkey string
			var mapvalue *Policy
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRbac
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRbac
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRbac
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Policy{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRbac(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRbac
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Policies[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, &Permission{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principals = append(m.Principals, &Principal{})
			if err := m.Principals[len(m.Principals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapEntryMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapEntryMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapEntryMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &envoy_type.StringMatch{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cidrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cidrs = append(m.Cidrs, &envoy_api_v2_core.CidrRange{})
			if err := m.Cidrs[len(m.Cidrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ports = append(m.Ports, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRbac
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ports = append(m.Ports, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paths = append(m.Paths, &envoy_type.StringMatch{})
			if err := m.Paths[len(m.Paths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methods = append(m.Methods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Permission_Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission_Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapEntryMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConditionSpec = &Permission_Condition_Header{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConditionSpec = &Permission_Condition_DestinationIps{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConditionSpec = &Permission_Condition_DestinationPorts{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Principal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Principal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Principal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authenticated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authenticated == nil {
				m.Authenticated = &Principal_Authenticated{}
			}
			if err := m.Authenticated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &Principal_Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Principal_Authenticated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authenticated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authenticated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Principal_Attribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeSpec = &Principal_Attribute_Service{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IpMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttributeSpec = &Principal_Attribute_SourceIps{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapEntryMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AttributeSpec = &Principal_Attribute_Header{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRbac(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRbac
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRbac(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRbac = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRbac   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("envoy/config/rbac/v2alpha/rbac.proto", fileDescriptorRbac) }

var fileDescriptorRbac = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0x66, 0x6d, 0x97, 0xb7, 0xea, 0x28, 0x16, 0x68, 0xa5, 0x62, 0x63, 0x0b, 0x03,
	0xf5, 0xb2, 0x44, 0x0a, 0x07, 0x10, 0x12, 0x48, 0x6d, 0x99, 0xd4, 0x49, 0xfb, 0x27, 0xef, 0xc0,
	0x9f, 0x03, 0x93, 0x97, 0x98, 0xd5, 0xa2, 0x4d, 0x2c, 0xc7, 0xad, 0xd4, 0x0f, 0xc0, 0x1d, 0xf1,
	0x05, 0xf8, 0x06, 0x70, 0xe7, 0x84, 0x38, 0x71, 0xe4, 0x23, 0xa0, 0xdd, 0xf8, 0x16, 0x28, 0x76,
	0x92, 0xa5, 0x12, 0x2b, 0x83, 0x9b, 0x1d, 0x3f, 0xcf, 0xef, 0xb5, 0xdf, 0xf7, 0x69, 0x61, 0x8b,
	0x86, 0xd3, 0x68, 0xe6, 0xfa, 0x51, 0xf8, 0x86, 0x9d, 0xb9, 0xe2, 0x94, 0xf8, 0xee, 0xd4, 0x23,
	0x23, 0x3e, 0x24, 0x6a, 0xe3, 0x70, 0x11, 0xc9, 0x08, 0xdd, 0x52, 0x2a, 0x47, 0xab, 0x1c, 0x75,
	0x90, 0xaa, 0xda, 0xab, 0x53, 0x32, 0x62, 0x01, 0x91, 0xd4, 0xcd, 0x16, 0xda, 0xd3, 0xbe, 0xa3,
	0xc9, 0x84, 0x33, 0x77, 0xea, 0xb9, 0x7e, 0x24, 0xa8, 0x4b, 0x82, 0x40, 0xd0, 0x38, 0x4e, 0x05,
	0x6b, 0x5a, 0x20, 0x67, 0x9c, 0xba, 0xb1, 0x14, 0x2c, 0x3c, 0x3b, 0x19, 0x13, 0xe9, 0x0f, 0xf5,
	0xb1, 0xfd, 0xbe, 0x0c, 0x4b, 0xb8, 0xd7, 0xed, 0xa3, 0xa7, 0x50, 0x25, 0xbe, 0x64, 0x51, 0xd8,
	0x32, 0x36, 0x8c, 0xce, 0x8a, 0x77, 0xdf, 0xb9, 0xf4, 0x36, 0x4e, 0x62, 0x70, 0xba, 0x4a, 0x8d,
	0x53, 0x17, 0xda, 0x85, 0x65, 0x1e, 0x8d, 0x98, 0xcf, 0x68, 0xdc, 0x2a, 0x6f, 0x98, 0x9d, 0xba,
	0xb7, 0xfd, 0x37, 0xc2, 0x51, 0xaa, 0xdf, 0x09, 0xa5, 0x98, 0xe1, 0xdc, 0xde, 0x7e, 0x0d, 0x8d,
	0xb9, 0x23, 0xd4, 0x04, 0xf3, 0x2d, 0x9d, 0xa9, 0x8b, 0x59, 0x38, 0x59, 0xa2, 0x87, 0x50, 0x99,
	0x92, 0xd1, 0x84, 0xb6, 0xca, 0x1b, 0x46, 0xa7, 0xee, 0x6d, 0x2e, 0x28, 0xa5, 0x50, 0x33, 0xac,
	0xf5, 0x8f, 0xcb, 0x8f, 0x0c, 0x7b, 0x0d, 0xaa, 0xfa, 0xf2, 0xc8, 0x82, 0x4a, 0x77, 0x6f, 0xef,
	0xf0, 0x79, 0xb3, 0x84, 0x96, 0x61, 0xe9, 0xd9, 0xce, 0xc1, 0xcb, 0xa6, 0x61, 0x7f, 0x36, 0xa0,
	0xaa, 0x4d, 0xe8, 0x18, 0xea, 0x9c, 0x8a, 0x31, 0x8b, 0x63, 0x16, 0x85, 0x71, 0xcb, 0x50, 0xef,
	0xba, 0xb7, 0xa8, 0x58, 0xae, 0xee, 0xc1, 0x97, 0x5f, 0x5f, 0xcd, 0xca, 0x07, 0xa3, 0xbc, 0x6c,
	0xe0, 0x22, 0x05, 0x1d, 0x01, 0x70, 0xc1, 0x42, 0x9f, 0x71, 0x32, 0xca, 0x7a, 0xb5, 0xb5, 0x88,
	0x99, 0x89, 0xe7, 0x90, 0x05, 0x86, 0x8d, 0xa1, 0xb1, 0x4f, 0xb8, 0xea, 0xd5, 0x7e, 0x32, 0xdb,
	0x3f, 0x34, 0xcc, 0x85, 0xaa, 0x6a, 0x40, 0x56, 0x70, 0x35, 0x2d, 0x98, 0xe4, 0xc2, 0x39, 0x56,
	0xb9, 0x50, 0x56, 0x9c, 0xca, 0xec, 0x27, 0x50, 0xdb, 0xe5, 0x9a, 0xe6, 0x41, 0xc5, 0x67, 0x81,
	0xc8, 0xde, 0x7f, 0x3b, 0xb5, 0x12, 0xce, 0x9c, 0xa9, 0xe7, 0x24, 0x99, 0x73, 0xfa, 0x2c, 0x10,
	0x98, 0x84, 0x67, 0x14, 0x6b, 0xa9, 0xbd, 0x09, 0xd6, 0x51, 0x24, 0xa4, 0x06, 0xdc, 0x80, 0x0a,
	0x8f, 0x84, 0xd4, 0x80, 0x06, 0xd6, 0x1b, 0xfb, 0x93, 0x09, 0x70, 0xd1, 0x2f, 0xb4, 0x0d, 0x15,
	0x4e, 0xe4, 0x30, 0xab, 0x72, 0xe9, 0x05, 0xb5, 0x0a, 0xb5, 0xa0, 0x36, 0xa6, 0x72, 0x18, 0x05,
	0xfa, 0x45, 0x16, 0xce, 0xb6, 0xe8, 0x10, 0xc0, 0x8f, 0xc2, 0x80, 0x49, 0x35, 0x33, 0x53, 0xd1,
	0xdc, 0x2b, 0xcd, 0xcc, 0xe9, 0x67, 0x3e, 0x5c, 0x40, 0xb4, 0xdf, 0x95, 0xc1, 0xca, 0x4f, 0x50,
	0x0f, 0xaa, 0x43, 0x4a, 0x02, 0x2a, 0x54, 0x7b, 0xeb, 0x5e, 0x67, 0x01, 0x7a, 0x6e, 0x2a, 0x83,
	0x12, 0x4e, 0x9d, 0x68, 0x1f, 0xae, 0x05, 0x34, 0x96, 0x2c, 0x24, 0x09, 0xf2, 0x84, 0xf1, 0x38,
	0x0d, 0xb2, 0xbd, 0x00, 0x96, 0x8e, 0x63, 0x50, 0xc2, 0x2b, 0x05, 0xf3, 0x2e, 0x8f, 0xd1, 0x31,
	0x5c, 0x2f, 0xe2, 0x74, 0xaf, 0x4d, 0x05, 0x5c, 0x18, 0xac, 0x6c, 0x40, 0x83, 0x12, 0x6e, 0x16,
	0x00, 0xc9, 0xf7, 0xb8, 0xd7, 0x84, 0x95, 0xbc, 0x07, 0x27, 0x31, 0xa7, 0xbe, 0xfd, 0xd1, 0x04,
	0x2b, 0x0f, 0x23, 0x7a, 0x01, 0x0d, 0x32, 0x91, 0x43, 0x1a, 0x4a, 0xe6, 0x13, 0x49, 0x83, 0xb4,
	0x1d, 0xde, 0x55, 0x92, 0xec, 0x74, 0x8b, 0x4e, 0x3c, 0x0f, 0x42, 0x07, 0x00, 0x44, 0x4a, 0xc1,
	0x4e, 0x27, 0x32, 0xcf, 0xab, 0x73, 0x35, 0x6c, 0x66, 0xc3, 0x05, 0x42, 0xfb, 0x2e, 0x34, 0xe6,
	0xea, 0x21, 0x04, 0x4b, 0x21, 0x19, 0xd3, 0xf4, 0xf7, 0xa1, 0xd6, 0xed, 0x6f, 0x06, 0x58, 0xb9,
	0x1d, 0xb5, 0xa1, 0x16, 0x53, 0x31, 0x65, 0x7e, 0x2a, 0x1a, 0x94, 0x70, 0xf6, 0x01, 0xf5, 0x01,
	0xe2, 0x68, 0x22, 0x7c, 0xfa, 0xcf, 0x73, 0xb3, 0xb4, 0x2f, 0x19, 0xd9, 0x45, 0x8a, 0xcc, 0xff,
	0x4d, 0x51, 0x32, 0xa1, 0xfc, 0x95, 0x6a, 0x42, 0xbd, 0x9b, 0xdf, 0xcf, 0xd7, 0x8d, 0x1f, 0xe7,
	0xeb, 0xc6, 0xcf, 0xf3, 0x75, 0xe3, 0x55, 0x2d, 0x05, 0x9c, 0x56, 0xd5, 0x7f, 0xfd, 0x83, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0xd1, 0x8c, 0x42, 0x87, 0x06, 0x00, 0x00,
}
