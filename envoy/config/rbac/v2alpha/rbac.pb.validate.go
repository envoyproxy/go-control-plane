// Code generated by protoc-gen-validate
// source: envoy/config/rbac/v2alpha/rbac.proto
// DO NOT EDIT!!!

package v2alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on RBAC with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *RBAC) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Action

	// no validation rules for Policies

	return nil
}

// RBACValidationError is the validation error returned by RBAC.Validate if the
// designated constraints aren't met.
type RBACValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e RBACValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRBAC.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = RBACValidationError{}

// Validate checks the field values on Policy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Policy) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPermissions()) < 1 {
		return PolicyValidationError{
			Field:  "Permissions",
			Reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					Field:  fmt.Sprintf("Permissions[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	if len(m.GetPrincipals()) < 1 {
		return PolicyValidationError{
			Field:  "Principals",
			Reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPrincipals() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyValidationError{
					Field:  fmt.Sprintf("Principals[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// PolicyValidationError is the validation error returned by Policy.Validate if
// the designated constraints aren't met.
type PolicyValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e PolicyValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicy.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = PolicyValidationError{}

// Validate checks the field values on MapEntryMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MapEntryMatch) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MapEntryMatchValidationError{
					Field:  fmt.Sprintf("Values[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// MapEntryMatchValidationError is the validation error returned by
// MapEntryMatch.Validate if the designated constraints aren't met.
type MapEntryMatchValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e MapEntryMatchValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapEntryMatch.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = MapEntryMatchValidationError{}

// Validate checks the field values on IpMatch with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IpMatch) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCidrs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IpMatchValidationError{
					Field:  fmt.Sprintf("Cidrs[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// IpMatchValidationError is the validation error returned by IpMatch.Validate
// if the designated constraints aren't met.
type IpMatchValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e IpMatchValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIpMatch.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = IpMatchValidationError{}

// Validate checks the field values on PortMatch with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PortMatch) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PortMatchValidationError is the validation error returned by
// PortMatch.Validate if the designated constraints aren't met.
type PortMatchValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e PortMatchValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortMatch.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = PortMatchValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Permission) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionValidationError{
					Field:  fmt.Sprintf("Paths[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionValidationError{
					Field:  fmt.Sprintf("Conditions[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = PermissionValidationError{}

// Validate checks the field values on Principal with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Principal) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAuthenticated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrincipalValidationError{
				Field:  "Authenticated",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrincipalValidationError{
					Field:  fmt.Sprintf("Attributes[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// PrincipalValidationError is the validation error returned by
// Principal.Validate if the designated constraints aren't met.
type PrincipalValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e PrincipalValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = PrincipalValidationError{}

// Validate checks the field values on Permission_Condition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Permission_Condition) Validate() error {
	if m == nil {
		return nil
	}

	switch m.ConditionSpec.(type) {

	case *Permission_Condition_Header:

		if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Permission_ConditionValidationError{
					Field:  "Header",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *Permission_Condition_DestinationIps:

		if v, ok := interface{}(m.GetDestinationIps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Permission_ConditionValidationError{
					Field:  "DestinationIps",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *Permission_Condition_DestinationPorts:

		if v, ok := interface{}(m.GetDestinationPorts()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Permission_ConditionValidationError{
					Field:  "DestinationPorts",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// Permission_ConditionValidationError is the validation error returned by
// Permission_Condition.Validate if the designated constraints aren't met.
type Permission_ConditionValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Permission_ConditionValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission_Condition.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Permission_ConditionValidationError{}

// Validate checks the field values on Principal_Authenticated with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Principal_Authenticated) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// Principal_AuthenticatedValidationError is the validation error returned by
// Principal_Authenticated.Validate if the designated constraints aren't met.
type Principal_AuthenticatedValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Principal_AuthenticatedValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal_Authenticated.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Principal_AuthenticatedValidationError{}

// Validate checks the field values on Principal_Attribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Principal_Attribute) Validate() error {
	if m == nil {
		return nil
	}

	switch m.AttributeSpec.(type) {

	case *Principal_Attribute_Service:
		// no validation rules for Service

	case *Principal_Attribute_SourceIps:

		if v, ok := interface{}(m.GetSourceIps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Principal_AttributeValidationError{
					Field:  "SourceIps",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *Principal_Attribute_Header:

		if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Principal_AttributeValidationError{
					Field:  "Header",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// Principal_AttributeValidationError is the validation error returned by
// Principal_Attribute.Validate if the designated constraints aren't met.
type Principal_AttributeValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Principal_AttributeValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrincipal_Attribute.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Principal_AttributeValidationError{}
