// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/bootstrap/v2/bootstrap.proto

/*
	Package v2 is a generated protocol buffer package.

	It is generated from these files:
		envoy/config/bootstrap/v2/bootstrap.proto

	It has these top-level messages:
		Bootstrap
		Admin
		ClusterManager
		Watchdog
		Runtime
		RuntimeLayer
		LayeredRuntime
*/
package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core1 "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
import envoy_api_v2_core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
import envoy_api_v2_auth "github.com/envoyproxy/go-control-plane/envoy/api/v2/auth"
import envoy_api_v2_core3 "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
import envoy_api_v22 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
import envoy_api_v23 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
import envoy_config_trace_v2 "github.com/envoyproxy/go-control-plane/envoy/config/trace/v2"
import envoy_config_metrics_v2 "github.com/envoyproxy/go-control-plane/envoy/config/metrics/v2"
import envoy_config_overload_v2alpha "github.com/envoyproxy/go-control-plane/envoy/config/overload/v2alpha"
import google_protobuf4 "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Bootstrap :ref:`configuration overview <config_overview_v2_bootstrap>`.
type Bootstrap struct {
	// Node identity to present to the management server and for instance
	// identification purposes (e.g. in generated headers).
	Node *envoy_api_v2_core.Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// Statically specified resources.
	StaticResources *Bootstrap_StaticResources `protobuf:"bytes,2,opt,name=static_resources,json=staticResources" json:"static_resources,omitempty"`
	// xDS configuration sources.
	DynamicResources *Bootstrap_DynamicResources `protobuf:"bytes,3,opt,name=dynamic_resources,json=dynamicResources" json:"dynamic_resources,omitempty"`
	// Configuration for the cluster manager which owns all upstream clusters
	// within the server.
	ClusterManager *ClusterManager `protobuf:"bytes,4,opt,name=cluster_manager,json=clusterManager" json:"cluster_manager,omitempty"`
	// Health discovery service config option.
	// (:ref:`core.ApiConfigSource <envoy_api_msg_core.ApiConfigSource>`)
	HdsConfig *envoy_api_v2_core3.ApiConfigSource `protobuf:"bytes,14,opt,name=hds_config,json=hdsConfig" json:"hds_config,omitempty"`
	// Optional file system path to search for startup flag files.
	FlagsPath string `protobuf:"bytes,5,opt,name=flags_path,json=flagsPath,proto3" json:"flags_path,omitempty"`
	// Optional set of stats sinks.
	StatsSinks []*envoy_config_metrics_v2.StatsSink `protobuf:"bytes,6,rep,name=stats_sinks,json=statsSinks" json:"stats_sinks,omitempty"`
	// Configuration for internal processing of stats.
	StatsConfig *envoy_config_metrics_v2.StatsConfig `protobuf:"bytes,13,opt,name=stats_config,json=statsConfig" json:"stats_config,omitempty"`
	// Optional duration between flushes to configured stats sinks. For
	// performance reasons Envoy latches counters and only flushes counters and
	// gauges at a periodic interval. If not specified the default is 5000ms (5
	// seconds).
	StatsFlushInterval *time.Duration `protobuf:"bytes,7,opt,name=stats_flush_interval,json=statsFlushInterval,stdduration" json:"stats_flush_interval,omitempty"`
	// Optional watchdog configuration.
	Watchdog *Watchdog `protobuf:"bytes,8,opt,name=watchdog" json:"watchdog,omitempty"`
	// Configuration for an external tracing provider. If not specified, no
	// tracing will be performed.
	Tracing *envoy_config_trace_v2.Tracing `protobuf:"bytes,9,opt,name=tracing" json:"tracing,omitempty"`
	// Configuration for the runtime configuration provider (deprecated). If not
	// specified, a “null” provider will be used which will result in all defaults
	// being used.
	Runtime *Runtime `protobuf:"bytes,11,opt,name=runtime" json:"runtime,omitempty"`
	// Configuration for the runtime configuration provider. If not
	// specified, a “null” provider will be used which will result in all defaults
	// being used.
	LayeredRuntime *LayeredRuntime `protobuf:"bytes,17,opt,name=layered_runtime,json=layeredRuntime" json:"layered_runtime,omitempty"`
	// Configuration for the local administration HTTP server.
	Admin *Admin `protobuf:"bytes,12,opt,name=admin" json:"admin,omitempty"`
	// Optional overload manager configuration.
	OverloadManager *envoy_config_overload_v2alpha.OverloadManager `protobuf:"bytes,15,opt,name=overload_manager,json=overloadManager" json:"overload_manager,omitempty"`
	// Enable :ref:`stats for event dispatcher <operations_performance>`, defaults to false.
	// Note that this records a value for each iteration of the event loop on every thread. This
	// should normally be minimal overhead, but when using
	// :ref:`statsd <envoy_api_msg_config.metrics.v2.StatsdSink>`, it will send each observed value
	// over the wire individually because the statsd protocol doesn't have any way to represent a
	// histogram summary. Be aware that this can be a very large volume of data.
	EnableDispatcherStats bool `protobuf:"varint,16,opt,name=enable_dispatcher_stats,json=enableDispatcherStats,proto3" json:"enable_dispatcher_stats,omitempty"`
}

func (m *Bootstrap) Reset()                    { *m = Bootstrap{} }
func (m *Bootstrap) String() string            { return proto.CompactTextString(m) }
func (*Bootstrap) ProtoMessage()               {}
func (*Bootstrap) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{0} }

func (m *Bootstrap) GetNode() *envoy_api_v2_core.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Bootstrap) GetStaticResources() *Bootstrap_StaticResources {
	if m != nil {
		return m.StaticResources
	}
	return nil
}

func (m *Bootstrap) GetDynamicResources() *Bootstrap_DynamicResources {
	if m != nil {
		return m.DynamicResources
	}
	return nil
}

func (m *Bootstrap) GetClusterManager() *ClusterManager {
	if m != nil {
		return m.ClusterManager
	}
	return nil
}

func (m *Bootstrap) GetHdsConfig() *envoy_api_v2_core3.ApiConfigSource {
	if m != nil {
		return m.HdsConfig
	}
	return nil
}

func (m *Bootstrap) GetFlagsPath() string {
	if m != nil {
		return m.FlagsPath
	}
	return ""
}

func (m *Bootstrap) GetStatsSinks() []*envoy_config_metrics_v2.StatsSink {
	if m != nil {
		return m.StatsSinks
	}
	return nil
}

func (m *Bootstrap) GetStatsConfig() *envoy_config_metrics_v2.StatsConfig {
	if m != nil {
		return m.StatsConfig
	}
	return nil
}

func (m *Bootstrap) GetStatsFlushInterval() *time.Duration {
	if m != nil {
		return m.StatsFlushInterval
	}
	return nil
}

func (m *Bootstrap) GetWatchdog() *Watchdog {
	if m != nil {
		return m.Watchdog
	}
	return nil
}

func (m *Bootstrap) GetTracing() *envoy_config_trace_v2.Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *Bootstrap) GetRuntime() *Runtime {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *Bootstrap) GetLayeredRuntime() *LayeredRuntime {
	if m != nil {
		return m.LayeredRuntime
	}
	return nil
}

func (m *Bootstrap) GetAdmin() *Admin {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *Bootstrap) GetOverloadManager() *envoy_config_overload_v2alpha.OverloadManager {
	if m != nil {
		return m.OverloadManager
	}
	return nil
}

func (m *Bootstrap) GetEnableDispatcherStats() bool {
	if m != nil {
		return m.EnableDispatcherStats
	}
	return false
}

type Bootstrap_StaticResources struct {
	// Static :ref:`Listeners <envoy_api_msg_Listener>`. These listeners are
	// available regardless of LDS configuration.
	Listeners []envoy_api_v23.Listener `protobuf:"bytes,1,rep,name=listeners" json:"listeners"`
	// If a network based configuration source is specified for :ref:`cds_config
	// <envoy_api_field_config.bootstrap.v2.Bootstrap.DynamicResources.cds_config>`, it's necessary
	// to have some initial cluster definitions available to allow Envoy to know
	// how to speak to the management server. These cluster definitions may not
	// use :ref:`EDS <arch_overview_dynamic_config_eds>` (i.e. they should be static
	// IP or DNS-based).
	Clusters []envoy_api_v22.Cluster `protobuf:"bytes,2,rep,name=clusters" json:"clusters"`
	// These static secrets can be used by :ref:`SdsSecretConfig
	// <envoy_api_msg_auth.SdsSecretConfig>`
	Secrets []envoy_api_v2_auth.Secret `protobuf:"bytes,3,rep,name=secrets" json:"secrets"`
}

func (m *Bootstrap_StaticResources) Reset()         { *m = Bootstrap_StaticResources{} }
func (m *Bootstrap_StaticResources) String() string { return proto.CompactTextString(m) }
func (*Bootstrap_StaticResources) ProtoMessage()    {}
func (*Bootstrap_StaticResources) Descriptor() ([]byte, []int) {
	return fileDescriptorBootstrap, []int{0, 0}
}

func (m *Bootstrap_StaticResources) GetListeners() []envoy_api_v23.Listener {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func (m *Bootstrap_StaticResources) GetClusters() []envoy_api_v22.Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *Bootstrap_StaticResources) GetSecrets() []envoy_api_v2_auth.Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type Bootstrap_DynamicResources struct {
	// All :ref:`Listeners <envoy_api_msg_Listener>` are provided by a single
	// :ref:`LDS <arch_overview_dynamic_config_lds>` configuration source.
	LdsConfig *envoy_api_v2_core3.ConfigSource `protobuf:"bytes,1,opt,name=lds_config,json=ldsConfig" json:"lds_config,omitempty"`
	// All post-bootstrap :ref:`Cluster <envoy_api_msg_Cluster>` definitions are
	// provided by a single :ref:`CDS <arch_overview_dynamic_config_cds>`
	// configuration source.
	CdsConfig *envoy_api_v2_core3.ConfigSource `protobuf:"bytes,2,opt,name=cds_config,json=cdsConfig" json:"cds_config,omitempty"`
	// A single :ref:`ADS <config_overview_v2_ads>` source may be optionally
	// specified. This must have :ref:`api_type
	// <envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
	// <envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`. Only
	// :ref:`ConfigSources <envoy_api_msg_core.ConfigSource>` that have
	// the :ref:`ads <envoy_api_field_core.ConfigSource.ads>` field set will be
	// streamed on the ADS channel.
	AdsConfig *envoy_api_v2_core3.ApiConfigSource `protobuf:"bytes,3,opt,name=ads_config,json=adsConfig" json:"ads_config,omitempty"`
}

func (m *Bootstrap_DynamicResources) Reset()         { *m = Bootstrap_DynamicResources{} }
func (m *Bootstrap_DynamicResources) String() string { return proto.CompactTextString(m) }
func (*Bootstrap_DynamicResources) ProtoMessage()    {}
func (*Bootstrap_DynamicResources) Descriptor() ([]byte, []int) {
	return fileDescriptorBootstrap, []int{0, 1}
}

func (m *Bootstrap_DynamicResources) GetLdsConfig() *envoy_api_v2_core3.ConfigSource {
	if m != nil {
		return m.LdsConfig
	}
	return nil
}

func (m *Bootstrap_DynamicResources) GetCdsConfig() *envoy_api_v2_core3.ConfigSource {
	if m != nil {
		return m.CdsConfig
	}
	return nil
}

func (m *Bootstrap_DynamicResources) GetAdsConfig() *envoy_api_v2_core3.ApiConfigSource {
	if m != nil {
		return m.AdsConfig
	}
	return nil
}

// Administration interface :ref:`operations documentation
// <operations_admin_interface>`.
type Admin struct {
	// The path to write the access log for the administration server. If no
	// access log is desired specify ‘/dev/null’. This is only required if
	// :ref:`address <envoy_api_field_config.bootstrap.v2.Admin.address>` is set.
	AccessLogPath string `protobuf:"bytes,1,opt,name=access_log_path,json=accessLogPath,proto3" json:"access_log_path,omitempty"`
	// The cpu profiler output path for the administration server. If no profile
	// path is specified, the default is ‘/var/log/envoy/envoy.prof’.
	ProfilePath string `protobuf:"bytes,2,opt,name=profile_path,json=profilePath,proto3" json:"profile_path,omitempty"`
	// The TCP address that the administration server will listen on.
	// If not specified, Envoy will not start an administration server.
	Address *envoy_api_v2_core1.Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *Admin) Reset()                    { *m = Admin{} }
func (m *Admin) String() string            { return proto.CompactTextString(m) }
func (*Admin) ProtoMessage()               {}
func (*Admin) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{1} }

func (m *Admin) GetAccessLogPath() string {
	if m != nil {
		return m.AccessLogPath
	}
	return ""
}

func (m *Admin) GetProfilePath() string {
	if m != nil {
		return m.ProfilePath
	}
	return ""
}

func (m *Admin) GetAddress() *envoy_api_v2_core1.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`.
type ClusterManager struct {
	// Name of the local cluster (i.e., the cluster that owns the Envoy running
	// this configuration). In order to enable :ref:`zone aware routing
	// <arch_overview_load_balancing_zone_aware_routing>` this option must be set.
	// If *local_cluster_name* is defined then :ref:`clusters
	// <envoy_api_msg_Cluster>` must be defined in the :ref:`Bootstrap
	// static cluster resources
	// <envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`. This is unrelated to
	// the :option:`--service-cluster` option which does not `affect zone aware
	// routing <https://github.com/envoyproxy/envoy/issues/774>`_.
	LocalClusterName string `protobuf:"bytes,1,opt,name=local_cluster_name,json=localClusterName,proto3" json:"local_cluster_name,omitempty"`
	// Optional global configuration for outlier detection.
	OutlierDetection *ClusterManager_OutlierDetection `protobuf:"bytes,2,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	// Optional configuration used to bind newly established upstream connections.
	// This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
	UpstreamBindConfig *envoy_api_v2_core1.BindConfig `protobuf:"bytes,3,opt,name=upstream_bind_config,json=upstreamBindConfig" json:"upstream_bind_config,omitempty"`
	// A management server endpoint to stream load stats to via
	// *StreamLoadStats*. This must have :ref:`api_type
	// <envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
	// <envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`.
	LoadStatsConfig *envoy_api_v2_core3.ApiConfigSource `protobuf:"bytes,4,opt,name=load_stats_config,json=loadStatsConfig" json:"load_stats_config,omitempty"`
}

func (m *ClusterManager) Reset()                    { *m = ClusterManager{} }
func (m *ClusterManager) String() string            { return proto.CompactTextString(m) }
func (*ClusterManager) ProtoMessage()               {}
func (*ClusterManager) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{2} }

func (m *ClusterManager) GetLocalClusterName() string {
	if m != nil {
		return m.LocalClusterName
	}
	return ""
}

func (m *ClusterManager) GetOutlierDetection() *ClusterManager_OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *ClusterManager) GetUpstreamBindConfig() *envoy_api_v2_core1.BindConfig {
	if m != nil {
		return m.UpstreamBindConfig
	}
	return nil
}

func (m *ClusterManager) GetLoadStatsConfig() *envoy_api_v2_core3.ApiConfigSource {
	if m != nil {
		return m.LoadStatsConfig
	}
	return nil
}

type ClusterManager_OutlierDetection struct {
	// Specifies the path to the outlier event log.
	EventLogPath string `protobuf:"bytes,1,opt,name=event_log_path,json=eventLogPath,proto3" json:"event_log_path,omitempty"`
}

func (m *ClusterManager_OutlierDetection) Reset()         { *m = ClusterManager_OutlierDetection{} }
func (m *ClusterManager_OutlierDetection) String() string { return proto.CompactTextString(m) }
func (*ClusterManager_OutlierDetection) ProtoMessage()    {}
func (*ClusterManager_OutlierDetection) Descriptor() ([]byte, []int) {
	return fileDescriptorBootstrap, []int{2, 0}
}

func (m *ClusterManager_OutlierDetection) GetEventLogPath() string {
	if m != nil {
		return m.EventLogPath
	}
	return ""
}

// Envoy process watchdog configuration. When configured, this monitors for
// nonresponsive threads and kills the process after the configured thresholds.
type Watchdog struct {
	// The duration after which Envoy counts a nonresponsive thread in the
	// *server.watchdog_miss* statistic. If not specified the default is 200ms.
	MissTimeout *google_protobuf4.Duration `protobuf:"bytes,1,opt,name=miss_timeout,json=missTimeout" json:"miss_timeout,omitempty"`
	// The duration after which Envoy counts a nonresponsive thread in the
	// *server.watchdog_mega_miss* statistic. If not specified the default is
	// 1000ms.
	MegamissTimeout *google_protobuf4.Duration `protobuf:"bytes,2,opt,name=megamiss_timeout,json=megamissTimeout" json:"megamiss_timeout,omitempty"`
	// If a watched thread has been nonresponsive for this duration, assume a
	// programming error and kill the entire Envoy process. Set to 0 to disable
	// kill behavior. If not specified the default is 0 (disabled).
	KillTimeout *google_protobuf4.Duration `protobuf:"bytes,3,opt,name=kill_timeout,json=killTimeout" json:"kill_timeout,omitempty"`
	// If at least two watched threads have been nonresponsive for at least this
	// duration assume a true deadlock and kill the entire Envoy process. Set to 0
	// to disable this behavior. If not specified the default is 0 (disabled).
	MultikillTimeout *google_protobuf4.Duration `protobuf:"bytes,4,opt,name=multikill_timeout,json=multikillTimeout" json:"multikill_timeout,omitempty"`
}

func (m *Watchdog) Reset()                    { *m = Watchdog{} }
func (m *Watchdog) String() string            { return proto.CompactTextString(m) }
func (*Watchdog) ProtoMessage()               {}
func (*Watchdog) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{3} }

func (m *Watchdog) GetMissTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.MissTimeout
	}
	return nil
}

func (m *Watchdog) GetMegamissTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.MegamissTimeout
	}
	return nil
}

func (m *Watchdog) GetKillTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.KillTimeout
	}
	return nil
}

func (m *Watchdog) GetMultikillTimeout() *google_protobuf4.Duration {
	if m != nil {
		return m.MultikillTimeout
	}
	return nil
}

// Runtime :ref:`configuration overview <config_runtime>` (deprecated).
type Runtime struct {
	// The implementation assumes that the file system tree is accessed via a
	// symbolic link. An atomic link swap is used when a new tree should be
	// switched to. This parameter specifies the path to the symbolic link. Envoy
	// will watch the location for changes and reload the file system tree when
	// they happen. If this parameter is not set, there will be no disk based
	// runtime.
	SymlinkRoot string `protobuf:"bytes,1,opt,name=symlink_root,json=symlinkRoot,proto3" json:"symlink_root,omitempty"`
	// Specifies the subdirectory to load within the root directory. This is
	// useful if multiple systems share the same delivery mechanism. Envoy
	// configuration elements can be contained in a dedicated subdirectory.
	Subdirectory string `protobuf:"bytes,2,opt,name=subdirectory,proto3" json:"subdirectory,omitempty"`
	// Specifies an optional subdirectory to load within the root directory. If
	// specified and the directory exists, configuration values within this
	// directory will override those found in the primary subdirectory. This is
	// useful when Envoy is deployed across many different types of servers.
	// Sometimes it is useful to have a per service cluster directory for runtime
	// configuration. See below for exactly how the override directory is used.
	OverrideSubdirectory string `protobuf:"bytes,3,opt,name=override_subdirectory,json=overrideSubdirectory,proto3" json:"override_subdirectory,omitempty"`
	// Static base runtime. This will be :ref:`overridden
	// <config_runtime_layering>` by other runtime layers, e.g.
	// disk or admin. This follows the :ref:`runtime protobuf JSON representation
	// encoding <config_runtime_proto_json>`.
	Base *google_protobuf1.Struct `protobuf:"bytes,4,opt,name=base" json:"base,omitempty"`
}

func (m *Runtime) Reset()                    { *m = Runtime{} }
func (m *Runtime) String() string            { return proto.CompactTextString(m) }
func (*Runtime) ProtoMessage()               {}
func (*Runtime) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{4} }

func (m *Runtime) GetSymlinkRoot() string {
	if m != nil {
		return m.SymlinkRoot
	}
	return ""
}

func (m *Runtime) GetSubdirectory() string {
	if m != nil {
		return m.Subdirectory
	}
	return ""
}

func (m *Runtime) GetOverrideSubdirectory() string {
	if m != nil {
		return m.OverrideSubdirectory
	}
	return ""
}

func (m *Runtime) GetBase() *google_protobuf1.Struct {
	if m != nil {
		return m.Base
	}
	return nil
}

type RuntimeLayer struct {
	// Descriptive name for the runtime layer. This is only used for the runtime
	// :http:get:`/runtime` output.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to LayerSpecifier:
	//	*RuntimeLayer_StaticLayer
	//	*RuntimeLayer_DiskLayer_
	//	*RuntimeLayer_AdminLayer_
	//	*RuntimeLayer_RtdsLayer_
	LayerSpecifier isRuntimeLayer_LayerSpecifier `protobuf_oneof:"layer_specifier"`
}

func (m *RuntimeLayer) Reset()                    { *m = RuntimeLayer{} }
func (m *RuntimeLayer) String() string            { return proto.CompactTextString(m) }
func (*RuntimeLayer) ProtoMessage()               {}
func (*RuntimeLayer) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{5} }

type isRuntimeLayer_LayerSpecifier interface {
	isRuntimeLayer_LayerSpecifier()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RuntimeLayer_StaticLayer struct {
	StaticLayer *google_protobuf1.Struct `protobuf:"bytes,2,opt,name=static_layer,json=staticLayer,oneof"`
}
type RuntimeLayer_DiskLayer_ struct {
	DiskLayer *RuntimeLayer_DiskLayer `protobuf:"bytes,3,opt,name=disk_layer,json=diskLayer,oneof"`
}
type RuntimeLayer_AdminLayer_ struct {
	AdminLayer *RuntimeLayer_AdminLayer `protobuf:"bytes,4,opt,name=admin_layer,json=adminLayer,oneof"`
}
type RuntimeLayer_RtdsLayer_ struct {
	RtdsLayer *RuntimeLayer_RtdsLayer `protobuf:"bytes,5,opt,name=rtds_layer,json=rtdsLayer,oneof"`
}

func (*RuntimeLayer_StaticLayer) isRuntimeLayer_LayerSpecifier() {}
func (*RuntimeLayer_DiskLayer_) isRuntimeLayer_LayerSpecifier()  {}
func (*RuntimeLayer_AdminLayer_) isRuntimeLayer_LayerSpecifier() {}
func (*RuntimeLayer_RtdsLayer_) isRuntimeLayer_LayerSpecifier()  {}

func (m *RuntimeLayer) GetLayerSpecifier() isRuntimeLayer_LayerSpecifier {
	if m != nil {
		return m.LayerSpecifier
	}
	return nil
}

func (m *RuntimeLayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RuntimeLayer) GetStaticLayer() *google_protobuf1.Struct {
	if x, ok := m.GetLayerSpecifier().(*RuntimeLayer_StaticLayer); ok {
		return x.StaticLayer
	}
	return nil
}

func (m *RuntimeLayer) GetDiskLayer() *RuntimeLayer_DiskLayer {
	if x, ok := m.GetLayerSpecifier().(*RuntimeLayer_DiskLayer_); ok {
		return x.DiskLayer
	}
	return nil
}

func (m *RuntimeLayer) GetAdminLayer() *RuntimeLayer_AdminLayer {
	if x, ok := m.GetLayerSpecifier().(*RuntimeLayer_AdminLayer_); ok {
		return x.AdminLayer
	}
	return nil
}

func (m *RuntimeLayer) GetRtdsLayer() *RuntimeLayer_RtdsLayer {
	if x, ok := m.GetLayerSpecifier().(*RuntimeLayer_RtdsLayer_); ok {
		return x.RtdsLayer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RuntimeLayer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RuntimeLayer_OneofMarshaler, _RuntimeLayer_OneofUnmarshaler, _RuntimeLayer_OneofSizer, []interface{}{
		(*RuntimeLayer_StaticLayer)(nil),
		(*RuntimeLayer_DiskLayer_)(nil),
		(*RuntimeLayer_AdminLayer_)(nil),
		(*RuntimeLayer_RtdsLayer_)(nil),
	}
}

func _RuntimeLayer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RuntimeLayer)
	// layer_specifier
	switch x := m.LayerSpecifier.(type) {
	case *RuntimeLayer_StaticLayer:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StaticLayer); err != nil {
			return err
		}
	case *RuntimeLayer_DiskLayer_:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DiskLayer); err != nil {
			return err
		}
	case *RuntimeLayer_AdminLayer_:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdminLayer); err != nil {
			return err
		}
	case *RuntimeLayer_RtdsLayer_:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RtdsLayer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RuntimeLayer.LayerSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RuntimeLayer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RuntimeLayer)
	switch tag {
	case 2: // layer_specifier.static_layer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Struct)
		err := b.DecodeMessage(msg)
		m.LayerSpecifier = &RuntimeLayer_StaticLayer{msg}
		return true, err
	case 3: // layer_specifier.disk_layer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RuntimeLayer_DiskLayer)
		err := b.DecodeMessage(msg)
		m.LayerSpecifier = &RuntimeLayer_DiskLayer_{msg}
		return true, err
	case 4: // layer_specifier.admin_layer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RuntimeLayer_AdminLayer)
		err := b.DecodeMessage(msg)
		m.LayerSpecifier = &RuntimeLayer_AdminLayer_{msg}
		return true, err
	case 5: // layer_specifier.rtds_layer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RuntimeLayer_RtdsLayer)
		err := b.DecodeMessage(msg)
		m.LayerSpecifier = &RuntimeLayer_RtdsLayer_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RuntimeLayer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RuntimeLayer)
	// layer_specifier
	switch x := m.LayerSpecifier.(type) {
	case *RuntimeLayer_StaticLayer:
		s := proto.Size(x.StaticLayer)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RuntimeLayer_DiskLayer_:
		s := proto.Size(x.DiskLayer)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RuntimeLayer_AdminLayer_:
		s := proto.Size(x.AdminLayer)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RuntimeLayer_RtdsLayer_:
		s := proto.Size(x.RtdsLayer)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// :ref:`Disk runtime <config_runtime_local_disk>` layer.
type RuntimeLayer_DiskLayer struct {
	// The implementation assumes that the file system tree is accessed via a
	// symbolic link. An atomic link swap is used when a new tree should be
	// switched to. This parameter specifies the path to the symbolic link.
	// Envoy will watch the location for changes and reload the file system tree
	// when they happen. See documentation on runtime :ref:`atomicity
	// <config_runtime_atomicity>` for further details on how reloads are
	// treated.
	SymlinkRoot string `protobuf:"bytes,1,opt,name=symlink_root,json=symlinkRoot,proto3" json:"symlink_root,omitempty"`
	// Specifies the subdirectory to load within the root directory. This is
	// useful if multiple systems share the same delivery mechanism. Envoy
	// configuration elements can be contained in a dedicated subdirectory.
	Subdirectory string `protobuf:"bytes,3,opt,name=subdirectory,proto3" json:"subdirectory,omitempty"`
	// :ref:`Append <config_runtime_local_disk_service_cluster_subdirs>` the
	// service cluster to the path under symlink root.
	AppendServiceCluster bool `protobuf:"varint,2,opt,name=append_service_cluster,json=appendServiceCluster,proto3" json:"append_service_cluster,omitempty"`
}

func (m *RuntimeLayer_DiskLayer) Reset()         { *m = RuntimeLayer_DiskLayer{} }
func (m *RuntimeLayer_DiskLayer) String() string { return proto.CompactTextString(m) }
func (*RuntimeLayer_DiskLayer) ProtoMessage()    {}
func (*RuntimeLayer_DiskLayer) Descriptor() ([]byte, []int) {
	return fileDescriptorBootstrap, []int{5, 0}
}

func (m *RuntimeLayer_DiskLayer) GetSymlinkRoot() string {
	if m != nil {
		return m.SymlinkRoot
	}
	return ""
}

func (m *RuntimeLayer_DiskLayer) GetSubdirectory() string {
	if m != nil {
		return m.Subdirectory
	}
	return ""
}

func (m *RuntimeLayer_DiskLayer) GetAppendServiceCluster() bool {
	if m != nil {
		return m.AppendServiceCluster
	}
	return false
}

// :ref:`Admin console runtime <config_runtime_admin>` layer.
type RuntimeLayer_AdminLayer struct {
}

func (m *RuntimeLayer_AdminLayer) Reset()         { *m = RuntimeLayer_AdminLayer{} }
func (m *RuntimeLayer_AdminLayer) String() string { return proto.CompactTextString(m) }
func (*RuntimeLayer_AdminLayer) ProtoMessage()    {}
func (*RuntimeLayer_AdminLayer) Descriptor() ([]byte, []int) {
	return fileDescriptorBootstrap, []int{5, 1}
}

// :ref:`Runtime Discovery Service (RTDS) <config_runtime_rtds>` layer.
type RuntimeLayer_RtdsLayer struct {
	// Resource to subscribe to at *rtds_config* for the RTDS layer.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// RTDS configuration source.
	RtdsConfig *envoy_api_v2_core3.ConfigSource `protobuf:"bytes,2,opt,name=rtds_config,json=rtdsConfig" json:"rtds_config,omitempty"`
}

func (m *RuntimeLayer_RtdsLayer) Reset()         { *m = RuntimeLayer_RtdsLayer{} }
func (m *RuntimeLayer_RtdsLayer) String() string { return proto.CompactTextString(m) }
func (*RuntimeLayer_RtdsLayer) ProtoMessage()    {}
func (*RuntimeLayer_RtdsLayer) Descriptor() ([]byte, []int) {
	return fileDescriptorBootstrap, []int{5, 2}
}

func (m *RuntimeLayer_RtdsLayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RuntimeLayer_RtdsLayer) GetRtdsConfig() *envoy_api_v2_core3.ConfigSource {
	if m != nil {
		return m.RtdsConfig
	}
	return nil
}

// Runtime :ref:`configuration overview <config_runtime>`.
type LayeredRuntime struct {
	// The :ref:`layers <config_runtime_layering>` of the runtime. This is ordered
	// such that later layers in the list overlay earlier entries.
	Layers []*RuntimeLayer `protobuf:"bytes,1,rep,name=layers" json:"layers,omitempty"`
}

func (m *LayeredRuntime) Reset()                    { *m = LayeredRuntime{} }
func (m *LayeredRuntime) String() string            { return proto.CompactTextString(m) }
func (*LayeredRuntime) ProtoMessage()               {}
func (*LayeredRuntime) Descriptor() ([]byte, []int) { return fileDescriptorBootstrap, []int{6} }

func (m *LayeredRuntime) GetLayers() []*RuntimeLayer {
	if m != nil {
		return m.Layers
	}
	return nil
}

func init() {
	proto.RegisterType((*Bootstrap)(nil), "envoy.config.bootstrap.v2.Bootstrap")
	proto.RegisterType((*Bootstrap_StaticResources)(nil), "envoy.config.bootstrap.v2.Bootstrap.StaticResources")
	proto.RegisterType((*Bootstrap_DynamicResources)(nil), "envoy.config.bootstrap.v2.Bootstrap.DynamicResources")
	proto.RegisterType((*Admin)(nil), "envoy.config.bootstrap.v2.Admin")
	proto.RegisterType((*ClusterManager)(nil), "envoy.config.bootstrap.v2.ClusterManager")
	proto.RegisterType((*ClusterManager_OutlierDetection)(nil), "envoy.config.bootstrap.v2.ClusterManager.OutlierDetection")
	proto.RegisterType((*Watchdog)(nil), "envoy.config.bootstrap.v2.Watchdog")
	proto.RegisterType((*Runtime)(nil), "envoy.config.bootstrap.v2.Runtime")
	proto.RegisterType((*RuntimeLayer)(nil), "envoy.config.bootstrap.v2.RuntimeLayer")
	proto.RegisterType((*RuntimeLayer_DiskLayer)(nil), "envoy.config.bootstrap.v2.RuntimeLayer.DiskLayer")
	proto.RegisterType((*RuntimeLayer_AdminLayer)(nil), "envoy.config.bootstrap.v2.RuntimeLayer.AdminLayer")
	proto.RegisterType((*RuntimeLayer_RtdsLayer)(nil), "envoy.config.bootstrap.v2.RuntimeLayer.RtdsLayer")
	proto.RegisterType((*LayeredRuntime)(nil), "envoy.config.bootstrap.v2.LayeredRuntime")
}
func (m *Bootstrap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Node.Size()))
		n1, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.StaticResources != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.StaticResources.Size()))
		n2, err := m.StaticResources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DynamicResources != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.DynamicResources.Size()))
		n3, err := m.DynamicResources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ClusterManager != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.ClusterManager.Size()))
		n4, err := m.ClusterManager.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.FlagsPath) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.FlagsPath)))
		i += copy(dAtA[i:], m.FlagsPath)
	}
	if len(m.StatsSinks) > 0 {
		for _, msg := range m.StatsSinks {
			dAtA[i] = 0x32
			i++
			i = encodeVarintBootstrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StatsFlushInterval != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(types.SizeOfStdDuration(*m.StatsFlushInterval)))
		n5, err := types.StdDurationMarshalTo(*m.StatsFlushInterval, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Watchdog != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Watchdog.Size()))
		n6, err := m.Watchdog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Tracing != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Tracing.Size()))
		n7, err := m.Tracing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Runtime != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Runtime.Size()))
		n8, err := m.Runtime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Admin != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Admin.Size()))
		n9, err := m.Admin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.StatsConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.StatsConfig.Size()))
		n10, err := m.StatsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.HdsConfig != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.HdsConfig.Size()))
		n11, err := m.HdsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.OverloadManager != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.OverloadManager.Size()))
		n12, err := m.OverloadManager.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.EnableDispatcherStats {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.EnableDispatcherStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LayeredRuntime != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.LayeredRuntime.Size()))
		n13, err := m.LayeredRuntime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *Bootstrap_StaticResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bootstrap_StaticResources) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for _, msg := range m.Listeners {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBootstrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Clusters) > 0 {
		for _, msg := range m.Clusters {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBootstrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Secrets) > 0 {
		for _, msg := range m.Secrets {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBootstrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Bootstrap_DynamicResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bootstrap_DynamicResources) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LdsConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.LdsConfig.Size()))
		n14, err := m.LdsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.CdsConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.CdsConfig.Size()))
		n15, err := m.CdsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.AdsConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.AdsConfig.Size()))
		n16, err := m.AdsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *Admin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Admin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessLogPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.AccessLogPath)))
		i += copy(dAtA[i:], m.AccessLogPath)
	}
	if len(m.ProfilePath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.ProfilePath)))
		i += copy(dAtA[i:], m.ProfilePath)
	}
	if m.Address != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Address.Size()))
		n17, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ClusterManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterManager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalClusterName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.LocalClusterName)))
		i += copy(dAtA[i:], m.LocalClusterName)
	}
	if m.OutlierDetection != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.OutlierDetection.Size()))
		n18, err := m.OutlierDetection.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.UpstreamBindConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.UpstreamBindConfig.Size()))
		n19, err := m.UpstreamBindConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.LoadStatsConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.LoadStatsConfig.Size()))
		n20, err := m.LoadStatsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ClusterManager_OutlierDetection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterManager_OutlierDetection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventLogPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.EventLogPath)))
		i += copy(dAtA[i:], m.EventLogPath)
	}
	return i, nil
}

func (m *Watchdog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Watchdog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MissTimeout != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.MissTimeout.Size()))
		n21, err := m.MissTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.MegamissTimeout != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.MegamissTimeout.Size()))
		n22, err := m.MegamissTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.KillTimeout != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.KillTimeout.Size()))
		n23, err := m.KillTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.MultikillTimeout != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.MultikillTimeout.Size()))
		n24, err := m.MultikillTimeout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *Runtime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Runtime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SymlinkRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.SymlinkRoot)))
		i += copy(dAtA[i:], m.SymlinkRoot)
	}
	if len(m.Subdirectory) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Subdirectory)))
		i += copy(dAtA[i:], m.Subdirectory)
	}
	if len(m.OverrideSubdirectory) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.OverrideSubdirectory)))
		i += copy(dAtA[i:], m.OverrideSubdirectory)
	}
	if m.Base != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.Base.Size()))
		n25, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *RuntimeLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.LayerSpecifier != nil {
		nn26, err := m.LayerSpecifier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn26
	}
	return i, nil
}

func (m *RuntimeLayer_StaticLayer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StaticLayer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.StaticLayer.Size()))
		n27, err := m.StaticLayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *RuntimeLayer_DiskLayer_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DiskLayer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.DiskLayer.Size()))
		n28, err := m.DiskLayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *RuntimeLayer_AdminLayer_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AdminLayer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.AdminLayer.Size()))
		n29, err := m.AdminLayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *RuntimeLayer_RtdsLayer_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RtdsLayer != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.RtdsLayer.Size()))
		n30, err := m.RtdsLayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *RuntimeLayer_DiskLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeLayer_DiskLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SymlinkRoot) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.SymlinkRoot)))
		i += copy(dAtA[i:], m.SymlinkRoot)
	}
	if m.AppendServiceCluster {
		dAtA[i] = 0x10
		i++
		if m.AppendServiceCluster {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Subdirectory) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Subdirectory)))
		i += copy(dAtA[i:], m.Subdirectory)
	}
	return i, nil
}

func (m *RuntimeLayer_AdminLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeLayer_AdminLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RuntimeLayer_RtdsLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeLayer_RtdsLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.RtdsConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBootstrap(dAtA, i, uint64(m.RtdsConfig.Size()))
		n31, err := m.RtdsConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *LayeredRuntime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LayeredRuntime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Layers) > 0 {
		for _, msg := range m.Layers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBootstrap(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBootstrap(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Bootstrap) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.StaticResources != nil {
		l = m.StaticResources.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.DynamicResources != nil {
		l = m.DynamicResources.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.ClusterManager != nil {
		l = m.ClusterManager.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.FlagsPath)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if len(m.StatsSinks) > 0 {
		for _, e := range m.StatsSinks {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if m.StatsFlushInterval != nil {
		l = types.SizeOfStdDuration(*m.StatsFlushInterval)
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Watchdog != nil {
		l = m.Watchdog.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Tracing != nil {
		l = m.Tracing.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Runtime != nil {
		l = m.Runtime.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Admin != nil {
		l = m.Admin.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.StatsConfig != nil {
		l = m.StatsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.HdsConfig != nil {
		l = m.HdsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.OverloadManager != nil {
		l = m.OverloadManager.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.EnableDispatcherStats {
		n += 3
	}
	if m.LayeredRuntime != nil {
		l = m.LayeredRuntime.Size()
		n += 2 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *Bootstrap_StaticResources) Size() (n int) {
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	if len(m.Secrets) > 0 {
		for _, e := range m.Secrets {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	return n
}

func (m *Bootstrap_DynamicResources) Size() (n int) {
	var l int
	_ = l
	if m.LdsConfig != nil {
		l = m.LdsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.CdsConfig != nil {
		l = m.CdsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.AdsConfig != nil {
		l = m.AdsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *Admin) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessLogPath)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.ProfilePath)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *ClusterManager) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocalClusterName)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.OutlierDetection != nil {
		l = m.OutlierDetection.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.UpstreamBindConfig != nil {
		l = m.UpstreamBindConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.LoadStatsConfig != nil {
		l = m.LoadStatsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *ClusterManager_OutlierDetection) Size() (n int) {
	var l int
	_ = l
	l = len(m.EventLogPath)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *Watchdog) Size() (n int) {
	var l int
	_ = l
	if m.MissTimeout != nil {
		l = m.MissTimeout.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.MegamissTimeout != nil {
		l = m.MegamissTimeout.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.KillTimeout != nil {
		l = m.KillTimeout.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.MultikillTimeout != nil {
		l = m.MultikillTimeout.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *Runtime) Size() (n int) {
	var l int
	_ = l
	l = len(m.SymlinkRoot)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.Subdirectory)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	l = len(m.OverrideSubdirectory)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *RuntimeLayer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.LayerSpecifier != nil {
		n += m.LayerSpecifier.Size()
	}
	return n
}

func (m *RuntimeLayer_StaticLayer) Size() (n int) {
	var l int
	_ = l
	if m.StaticLayer != nil {
		l = m.StaticLayer.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}
func (m *RuntimeLayer_DiskLayer_) Size() (n int) {
	var l int
	_ = l
	if m.DiskLayer != nil {
		l = m.DiskLayer.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}
func (m *RuntimeLayer_AdminLayer_) Size() (n int) {
	var l int
	_ = l
	if m.AdminLayer != nil {
		l = m.AdminLayer.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}
func (m *RuntimeLayer_RtdsLayer_) Size() (n int) {
	var l int
	_ = l
	if m.RtdsLayer != nil {
		l = m.RtdsLayer.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}
func (m *RuntimeLayer_DiskLayer) Size() (n int) {
	var l int
	_ = l
	l = len(m.SymlinkRoot)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.AppendServiceCluster {
		n += 2
	}
	l = len(m.Subdirectory)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *RuntimeLayer_AdminLayer) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RuntimeLayer_RtdsLayer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBootstrap(uint64(l))
	}
	if m.RtdsConfig != nil {
		l = m.RtdsConfig.Size()
		n += 1 + l + sovBootstrap(uint64(l))
	}
	return n
}

func (m *LayeredRuntime) Size() (n int) {
	var l int
	_ = l
	if len(m.Layers) > 0 {
		for _, e := range m.Layers {
			l = e.Size()
			n += 1 + l + sovBootstrap(uint64(l))
		}
	}
	return n
}

func sovBootstrap(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBootstrap(x uint64) (n int) {
	return sovBootstrap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bootstrap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bootstrap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bootstrap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &envoy_api_v2_core.Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaticResources == nil {
				m.StaticResources = &Bootstrap_StaticResources{}
			}
			if err := m.StaticResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamicResources == nil {
				m.DynamicResources = &Bootstrap_DynamicResources{}
			}
			if err := m.DynamicResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterManager == nil {
				m.ClusterManager = &ClusterManager{}
			}
			if err := m.ClusterManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagsPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagsPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsSinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsSinks = append(m.StatsSinks, &envoy_config_metrics_v2.StatsSink{})
			if err := m.StatsSinks[len(m.StatsSinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsFlushInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsFlushInterval == nil {
				m.StatsFlushInterval = new(time.Duration)
			}
			if err := types.StdDurationUnmarshal(m.StatsFlushInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watchdog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watchdog == nil {
				m.Watchdog = &Watchdog{}
			}
			if err := m.Watchdog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracing == nil {
				m.Tracing = &envoy_config_trace_v2.Tracing{}
			}
			if err := m.Tracing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Runtime == nil {
				m.Runtime = &Runtime{}
			}
			if err := m.Runtime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Admin == nil {
				m.Admin = &Admin{}
			}
			if err := m.Admin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsConfig == nil {
				m.StatsConfig = &envoy_config_metrics_v2.StatsConfig{}
			}
			if err := m.StatsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HdsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HdsConfig == nil {
				m.HdsConfig = &envoy_api_v2_core3.ApiConfigSource{}
			}
			if err := m.HdsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverloadManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OverloadManager == nil {
				m.OverloadManager = &envoy_config_overload_v2alpha.OverloadManager{}
			}
			if err := m.OverloadManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDispatcherStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDispatcherStats = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayeredRuntime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LayeredRuntime == nil {
				m.LayeredRuntime = &LayeredRuntime{}
			}
			if err := m.LayeredRuntime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bootstrap_StaticResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaticResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaticResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, envoy_api_v23.Listener{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, envoy_api_v22.Cluster{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secrets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secrets = append(m.Secrets, envoy_api_v2_auth.Secret{})
			if err := m.Secrets[len(m.Secrets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bootstrap_DynamicResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LdsConfig == nil {
				m.LdsConfig = &envoy_api_v2_core3.ConfigSource{}
			}
			if err := m.LdsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CdsConfig == nil {
				m.CdsConfig = &envoy_api_v2_core3.ConfigSource{}
			}
			if err := m.CdsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdsConfig == nil {
				m.AdsConfig = &envoy_api_v2_core3.ApiConfigSource{}
			}
			if err := m.AdsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Admin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Admin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Admin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &envoy_api_v2_core1.Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutlierDetection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutlierDetection == nil {
				m.OutlierDetection = &ClusterManager_OutlierDetection{}
			}
			if err := m.OutlierDetection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamBindConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpstreamBindConfig == nil {
				m.UpstreamBindConfig = &envoy_api_v2_core1.BindConfig{}
			}
			if err := m.UpstreamBindConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadStatsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadStatsConfig == nil {
				m.LoadStatsConfig = &envoy_api_v2_core3.ApiConfigSource{}
			}
			if err := m.LoadStatsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterManager_OutlierDetection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutlierDetection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutlierDetection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventLogPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventLogPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Watchdog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Watchdog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Watchdog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MissTimeout == nil {
				m.MissTimeout = &google_protobuf4.Duration{}
			}
			if err := m.MissTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MegamissTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MegamissTimeout == nil {
				m.MegamissTimeout = &google_protobuf4.Duration{}
			}
			if err := m.MegamissTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KillTimeout == nil {
				m.KillTimeout = &google_protobuf4.Duration{}
			}
			if err := m.KillTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultikillTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultikillTimeout == nil {
				m.MultikillTimeout = &google_protobuf4.Duration{}
			}
			if err := m.MultikillTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Runtime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Runtime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Runtime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymlinkRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymlinkRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subdirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subdirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverrideSubdirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OverrideSubdirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &google_protobuf1.Struct{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf1.Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LayerSpecifier = &RuntimeLayer_StaticLayer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RuntimeLayer_DiskLayer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LayerSpecifier = &RuntimeLayer_DiskLayer_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RuntimeLayer_AdminLayer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LayerSpecifier = &RuntimeLayer_AdminLayer_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtdsLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RuntimeLayer_RtdsLayer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LayerSpecifier = &RuntimeLayer_RtdsLayer_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeLayer_DiskLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymlinkRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SymlinkRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppendServiceCluster", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppendServiceCluster = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subdirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subdirectory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeLayer_AdminLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeLayer_RtdsLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RtdsLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RtdsLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtdsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RtdsConfig == nil {
				m.RtdsConfig = &envoy_api_v2_core3.ConfigSource{}
			}
			if err := m.RtdsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LayeredRuntime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LayeredRuntime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LayeredRuntime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBootstrap
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Layers = append(m.Layers, &RuntimeLayer{})
			if err := m.Layers[len(m.Layers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBootstrap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBootstrap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBootstrap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBootstrap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBootstrap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBootstrap
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBootstrap
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBootstrap(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBootstrap = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBootstrap   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("envoy/config/bootstrap/v2/bootstrap.proto", fileDescriptorBootstrap) }

var fileDescriptorBootstrap = []byte{
	// 1438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4d, 0x73, 0x13, 0x47,
	0x1a, 0x66, 0x24, 0x19, 0x4b, 0xaf, 0x84, 0x25, 0x77, 0x19, 0x2c, 0x54, 0x8b, 0x6d, 0x04, 0xbb,
	0x98, 0x82, 0x1a, 0xd5, 0x0a, 0x96, 0x65, 0x29, 0x8a, 0x0f, 0xe1, 0x62, 0x59, 0x96, 0xf0, 0xd1,
	0x26, 0x95, 0x4a, 0x2e, 0x53, 0xad, 0x99, 0xb6, 0xd4, 0xe5, 0xd1, 0xb4, 0xaa, 0xbb, 0xa5, 0xc4,
	0xd7, 0x9c, 0xf8, 0x01, 0x39, 0xf0, 0x3b, 0x72, 0xcc, 0x29, 0xb9, 0x71, 0xcc, 0x3d, 0x55, 0x49,
	0x8a, 0x5b, 0x7e, 0x42, 0x6e, 0xa9, 0xe9, 0x8f, 0x91, 0xc7, 0x9f, 0xe2, 0x36, 0xfd, 0xf6, 0xf3,
	0xbc, 0xfd, 0xf6, 0xfb, 0xf1, 0xb4, 0x04, 0xd7, 0x69, 0x32, 0xe5, 0x7b, 0x9d, 0x90, 0x27, 0x3b,
	0x6c, 0xd0, 0xe9, 0x73, 0xae, 0xa4, 0x12, 0x64, 0xdc, 0x99, 0x76, 0x67, 0x0b, 0x7f, 0x2c, 0xb8,
	0xe2, 0xe8, 0xa2, 0x86, 0xfa, 0x06, 0xea, 0xcf, 0x76, 0xa7, 0xdd, 0xd6, 0xba, 0xf1, 0x42, 0xc6,
	0x2c, 0x25, 0x86, 0x5c, 0xd0, 0x0e, 0x89, 0x22, 0x41, 0xa5, 0x34, 0xdc, 0xd6, 0xdf, 0x0e, 0x03,
	0xfa, 0x44, 0xd2, 0x23, 0x77, 0xc9, 0x44, 0x0d, 0x3b, 0x21, 0x15, 0xca, 0xee, 0xfe, 0xfd, 0x30,
	0xd7, 0xc4, 0x10, 0x48, 0x3e, 0x11, 0xa1, 0x73, 0x72, 0x21, 0x0f, 0x8b, 0xe4, 0x91, 0xf6, 0x38,
	0xb3, 0x5f, 0xce, 0xdd, 0x5c, 0x09, 0x12, 0xd2, 0x14, 0xa0, 0x3f, 0x2c, 0xe4, 0x4a, 0x0e, 0x32,
	0xa2, 0x4a, 0xb0, 0x50, 0xa6, 0x20, 0xa9, 0x88, 0x72, 0x7e, 0x6e, 0xe6, 0x40, 0x7c, 0x4a, 0x45,
	0xcc, 0x49, 0xd4, 0x99, 0x76, 0x49, 0x3c, 0x1e, 0x92, 0xcc, 0x60, 0xd1, 0x6b, 0x03, 0xce, 0x07,
	0x31, 0xed, 0xe8, 0x55, 0x7f, 0xb2, 0xd3, 0x89, 0x26, 0x82, 0x28, 0xc6, 0x13, 0x97, 0x8a, 0x83,
	0xfb, 0x52, 0x89, 0x49, 0xe8, 0x52, 0xb1, 0x3a, 0x25, 0x31, 0x8b, 0x88, 0xa2, 0x1d, 0xf7, 0x61,
	0x37, 0x56, 0x06, 0x7c, 0xc0, 0xf5, 0x67, 0x27, 0xfd, 0x32, 0xd6, 0xf6, 0xfb, 0x1a, 0x54, 0x7a,
	0xae, 0x4e, 0xe8, 0x06, 0x94, 0x12, 0x1e, 0xd1, 0xa6, 0xb7, 0xe1, 0x6d, 0x56, 0xbb, 0xab, 0xbe,
	0x29, 0x27, 0x19, 0x33, 0x7f, 0xda, 0xf5, 0xd3, 0xb4, 0xfa, 0x2f, 0x79, 0x44, 0xb1, 0x06, 0xa1,
	0x00, 0x1a, 0xe9, 0x25, 0x59, 0x18, 0x08, 0x6a, 0xd2, 0x2c, 0x9b, 0x05, 0x4d, 0xbc, 0xed, 0x1f,
	0xdb, 0x07, 0x7e, 0x76, 0x98, 0xbf, 0xad, 0xc9, 0xd8, 0x71, 0x71, 0x5d, 0xe6, 0x0d, 0xa8, 0x0f,
	0xcb, 0xd1, 0x5e, 0x42, 0x46, 0xb9, 0x13, 0x8a, 0xfa, 0x84, 0x7f, 0xcd, 0x75, 0xc2, 0x96, 0x61,
	0xcf, 0x8e, 0x68, 0x44, 0x07, 0x2c, 0x08, 0x43, 0x3d, 0x8c, 0x27, 0x52, 0x51, 0x11, 0x8c, 0x48,
	0x42, 0x06, 0x54, 0x34, 0x4b, 0xfa, 0x84, 0xeb, 0x27, 0x9c, 0xf0, 0xc4, 0x30, 0x3e, 0x33, 0x04,
	0xbc, 0x14, 0xe6, 0xd6, 0xe8, 0x12, 0xc0, 0x4e, 0x4c, 0x06, 0x32, 0x18, 0x13, 0x35, 0x6c, 0x2e,
	0x6c, 0x78, 0x9b, 0x15, 0x5c, 0xd1, 0x96, 0xd7, 0x44, 0x0d, 0xd1, 0x13, 0xa8, 0xea, 0xe6, 0x08,
	0x24, 0x4b, 0x76, 0x65, 0xf3, 0xec, 0x46, 0x71, 0xb3, 0xda, 0x6d, 0xe7, 0x8f, 0xb3, 0x8d, 0x94,
	0x1e, 0x96, 0xa6, 0x49, 0x6e, 0xb3, 0x64, 0x17, 0x83, 0x74, 0x9f, 0x12, 0xbd, 0x81, 0x15, 0xe3,
	0x64, 0x27, 0x9e, 0xc8, 0x61, 0xc0, 0x12, 0x45, 0xc5, 0x94, 0xc4, 0xcd, 0x45, 0x1d, 0xfc, 0x45,
	0xdf, 0xf4, 0x88, 0xef, 0x7a, 0xc4, 0xdf, 0xb2, 0x3d, 0xd4, 0x2b, 0xbd, 0xff, 0x6d, 0xdd, 0xc3,
	0x48, 0x93, 0x9f, 0xa6, 0xdc, 0xff, 0x59, 0x2a, 0x7a, 0x08, 0xe5, 0xaf, 0x89, 0x0a, 0x87, 0x11,
	0x1f, 0x34, 0xcb, 0xda, 0xcd, 0x95, 0x13, 0x72, 0xf0, 0x85, 0x85, 0xe2, 0x8c, 0x84, 0xee, 0xc2,
	0x62, 0x3a, 0x1a, 0x2c, 0x19, 0x34, 0x2b, 0x9a, 0xbf, 0x96, 0xe7, 0x9b, 0xb9, 0x99, 0x76, 0xfd,
	0xb7, 0x06, 0x85, 0x1d, 0x1c, 0x3d, 0x82, 0x45, 0x31, 0x49, 0x14, 0x1b, 0xd1, 0x66, 0x55, 0x33,
	0xdb, 0x27, 0x9c, 0x8c, 0x0d, 0xb2, 0x57, 0x68, 0x7a, 0xd8, 0xd1, 0xd0, 0x1d, 0x58, 0x20, 0xd1,
	0x88, 0x25, 0xcd, 0x9a, 0xe6, 0x6f, 0x9c, 0xc0, 0x7f, 0x9c, 0xe2, 0xb0, 0x81, 0xa3, 0xff, 0x42,
	0xcd, 0xe4, 0xd1, 0x20, 0x9b, 0xe7, 0x34, 0xfd, 0xea, 0xc9, 0xd5, 0x78, 0xa2, 0xcd, 0xd8, 0x94,
	0xd1, 0x2c, 0xd0, 0x63, 0x80, 0x61, 0x94, 0xb9, 0x59, 0xca, 0xdd, 0x62, 0xff, 0x00, 0x3d, 0x1e,
	0x33, 0xc3, 0xd8, 0xd6, 0x1d, 0x88, 0x2b, 0xc3, 0xc8, 0xb9, 0xf8, 0x12, 0x1a, 0x4e, 0x0a, 0xb2,
	0x66, 0xac, 0x6b, 0x47, 0x7e, 0x3e, 0x9e, 0x4c, 0x30, 0xac, 0x82, 0xf8, 0xaf, 0xac, 0xc1, 0x75,
	0x64, 0x9d, 0xe7, 0x0d, 0xe8, 0x0e, 0xac, 0xd2, 0x84, 0xf4, 0x63, 0x1a, 0x44, 0x4c, 0x8e, 0xd3,
	0x82, 0x51, 0x11, 0xe8, 0xf0, 0x9b, 0x8d, 0x0d, 0x6f, 0xb3, 0x8c, 0xcf, 0x9b, 0xed, 0xad, 0x6c,
	0x57, 0x5f, 0x34, 0x1d, 0x8f, 0x98, 0xec, 0x51, 0x41, 0xa3, 0xc0, 0x15, 0x68, 0xf9, 0xd4, 0xf1,
	0x78, 0x61, 0x18, 0xb6, 0x4e, 0x78, 0x29, 0xce, 0xad, 0x5b, 0x3f, 0x79, 0x50, 0x3f, 0x30, 0xfb,
	0xe8, 0x1e, 0x54, 0x62, 0x26, 0x15, 0x4d, 0xa8, 0x90, 0x4d, 0x4f, 0x4f, 0xc4, 0x85, 0x7c, 0xf2,
	0x5e, 0xd8, 0xed, 0x5e, 0xe9, 0xc3, 0xaf, 0xeb, 0x67, 0xf0, 0x0c, 0x8e, 0xfe, 0x0d, 0x65, 0x3b,
	0x80, 0xa9, 0xfe, 0xa4, 0xd4, 0xf3, 0x79, 0xaa, 0x1d, 0x57, 0xcb, 0xcc, 0xc0, 0xe8, 0x3f, 0xb0,
	0x28, 0x69, 0x28, 0xa8, 0x4a, 0x55, 0xa5, 0xa8, 0xc7, 0x26, 0xc7, 0x4b, 0x5f, 0x19, 0x7f, 0x5b,
	0x23, 0x2c, 0xd7, 0xe1, 0x5b, 0xbf, 0x78, 0xd0, 0x38, 0xa8, 0x2e, 0xe8, 0x01, 0x40, 0x3c, 0x6b,
	0x01, 0xa3, 0xa1, 0xeb, 0x47, 0xb4, 0x40, 0xbe, 0xfe, 0x71, 0x56, 0xff, 0x07, 0x00, 0xe1, 0x8c,
	0x5f, 0x98, 0x93, 0x1f, 0x46, 0xfb, 0x5a, 0x90, 0xcc, 0xf8, 0xc5, 0xf9, 0x5b, 0x90, 0x38, 0x17,
	0xcf, 0x4b, 0xe5, 0x52, 0x63, 0xe1, 0x79, 0xa9, 0x0c, 0x8d, 0x6a, 0xfb, 0x9d, 0x07, 0x0b, 0x7a,
	0x56, 0xd0, 0x3f, 0xa0, 0x4e, 0xc2, 0x90, 0x4a, 0x19, 0xc4, 0x7c, 0x60, 0x54, 0xcd, 0xd3, 0xaa,
	0x76, 0xce, 0x98, 0x5f, 0xf0, 0x81, 0x56, 0xb6, 0xcb, 0x50, 0x1b, 0x0b, 0xbe, 0xc3, 0x62, 0x6a,
	0x40, 0x05, 0x0d, 0xaa, 0x5a, 0x9b, 0x86, 0xdc, 0x86, 0x45, 0xfb, 0xec, 0xdb, 0x00, 0x5b, 0x47,
	0x05, 0x68, 0x10, 0xd8, 0x41, 0xdb, 0xdf, 0x16, 0x61, 0x29, 0x2f, 0xba, 0xe8, 0x26, 0xa0, 0x98,
	0x87, 0x24, 0x0e, 0x9c, 0x7c, 0x27, 0x64, 0x44, 0x6d, 0x58, 0x0d, 0xbd, 0x63, 0x09, 0x2f, 0xc9,
	0x88, 0xa2, 0x01, 0x2c, 0xf3, 0x89, 0x8a, 0x19, 0x15, 0x41, 0x44, 0x15, 0x0d, 0x53, 0x29, 0xb4,
	0x19, 0xbe, 0x37, 0xb7, 0xd0, 0xfb, 0xaf, 0x8c, 0x8b, 0x2d, 0xe7, 0x01, 0x37, 0xf8, 0x01, 0x0b,
	0x7a, 0x05, 0x2b, 0x93, 0xb1, 0x54, 0x82, 0x92, 0x51, 0xd0, 0x67, 0x49, 0x94, 0xaf, 0xc6, 0xa5,
	0x23, 0x2e, 0xdb, 0x63, 0x49, 0x64, 0x05, 0x05, 0x39, 0xea, 0xcc, 0x86, 0x5e, 0xc2, 0xb2, 0x16,
	0x84, 0x9c, 0x4a, 0x95, 0xe6, 0xae, 0x6d, 0x3d, 0x25, 0xef, 0x13, 0xad, 0xd6, 0x5d, 0x68, 0x1c,
	0xbc, 0x06, 0xba, 0x0a, 0x4b, 0x74, 0x4a, 0x13, 0x75, 0xb0, 0xbc, 0x35, 0x6d, 0xb5, 0xd5, 0x6d,
	0x7f, 0x57, 0x80, 0xb2, 0x53, 0x7d, 0x74, 0x1f, 0x6a, 0x23, 0x26, 0x65, 0x90, 0x4e, 0x34, 0x9f,
	0x28, 0xdb, 0xed, 0xc7, 0xbf, 0x3b, 0xb8, 0x9a, 0xc2, 0xdf, 0x1a, 0x34, 0xda, 0x82, 0xc6, 0x88,
	0x0e, 0x48, 0xce, 0x43, 0xe1, 0x34, 0x0f, 0x75, 0x47, 0x71, 0x5e, 0xee, 0x43, 0x6d, 0x97, 0xc5,
	0x71, 0xe6, 0xa1, 0x78, 0x6a, 0x0c, 0x29, 0xdc, 0xb1, 0x9f, 0xc2, 0xf2, 0x68, 0x12, 0x2b, 0x96,
	0x73, 0x51, 0x3a, 0xcd, 0x45, 0x23, 0xe3, 0x58, 0x3f, 0xed, 0xef, 0x3d, 0x58, 0xb4, 0xd2, 0x96,
	0x0e, 0x80, 0xdc, 0x1b, 0xc5, 0x2c, 0xd9, 0x0d, 0x04, 0xe7, 0xca, 0xa6, 0xb1, 0x6a, 0x6d, 0x98,
	0x73, 0x85, 0xda, 0x50, 0x93, 0x93, 0x7e, 0xc4, 0x04, 0x0d, 0x15, 0x17, 0x7b, 0x76, 0x46, 0x72,
	0x36, 0x74, 0x0b, 0xce, 0xa7, 0x02, 0x2e, 0x58, 0x44, 0x83, 0x1c, 0xb8, 0xa8, 0xc1, 0x2b, 0x6e,
	0x73, 0x7b, 0x3f, 0xe9, 0x06, 0x94, 0xd2, 0xdf, 0xcb, 0xf6, 0x0a, 0xab, 0x87, 0xae, 0xb0, 0xad,
	0x7f, 0x25, 0x62, 0x0d, 0x6a, 0xff, 0x59, 0x82, 0x9a, 0x0d, 0x5a, 0xab, 0x35, 0xba, 0x04, 0xa5,
	0xd9, 0x00, 0xf5, 0x2a, 0x3f, 0xfc, 0xf1, 0x63, 0xb1, 0x24, 0x0a, 0x1b, 0x1e, 0xd6, 0xe6, 0x34,
	0xd5, 0xf6, 0xb7, 0x9e, 0x16, 0x73, 0x5b, 0xac, 0xe3, 0x0e, 0x79, 0x76, 0xc6, 0xbc, 0x8d, 0x2c,
	0x34, 0xce, 0x31, 0x40, 0xc4, 0xe4, 0xae, 0xe5, 0x9a, 0x32, 0xfd, 0xf3, 0xf4, 0x17, 0x5e, 0x93,
	0xfd, 0x2d, 0x26, 0x77, 0xf5, 0xd7, 0xb3, 0x33, 0xb8, 0x12, 0xb9, 0x05, 0xfa, 0x1c, 0xaa, 0xfa,
	0x05, 0xb7, 0x4e, 0xcd, 0xad, 0xbb, 0xf3, 0x3a, 0xd5, 0xba, 0xe6, 0xbc, 0x02, 0xc9, 0x56, 0x69,
	0xa8, 0x42, 0x45, 0xd2, 0x7a, 0x5d, 0xf8, 0xb4, 0x50, 0xb1, 0x8a, 0x64, 0x16, 0xaa, 0x70, 0x8b,
	0xd6, 0x3b, 0x0f, 0x2a, 0xd9, 0x2d, 0xe6, 0xe9, 0x91, 0xdb, 0x70, 0x81, 0x8c, 0xc7, 0x34, 0x89,
	0x02, 0x49, 0xc5, 0x94, 0x85, 0xd4, 0x89, 0x9c, 0xce, 0x7b, 0x19, 0xaf, 0x98, 0xdd, 0x6d, 0xb3,
	0x69, 0x45, 0xea, 0x50, 0x67, 0x15, 0x0f, 0x77, 0x56, 0xab, 0x06, 0x30, 0xbb, 0x7a, 0x8b, 0x40,
	0x25, 0x0b, 0x19, 0xa1, 0xfd, 0x1d, 0x60, 0xcb, 0xfe, 0x08, 0xaa, 0x3a, 0x1b, 0x9f, 0xf6, 0x24,
	0xe9, 0x0c, 0x1a, 0x4b, 0x6f, 0xd9, 0xfe, 0x80, 0x08, 0xe4, 0x98, 0x86, 0x6c, 0x87, 0x51, 0xd1,
	0x7e, 0x03, 0x4b, 0xf9, 0x5f, 0x08, 0xe8, 0x21, 0x9c, 0xd5, 0x20, 0xf7, 0xf4, 0x5f, 0x9b, 0x33,
	0xe1, 0xd8, 0xd2, 0x7a, 0xff, 0xff, 0xf0, 0x71, 0xcd, 0xfb, 0xf9, 0xe3, 0x9a, 0xf7, 0xfb, 0xc7,
	0x35, 0x0f, 0xae, 0x31, 0x6e, 0x1c, 0x8c, 0x05, 0xff, 0x66, 0xef, 0x78, 0x5f, 0xbd, 0xa5, 0xec,
	0xaf, 0xc2, 0xeb, 0xb4, 0x81, 0x5f, 0x7b, 0x5f, 0x15, 0xa6, 0xdd, 0xfe, 0x59, 0xdd, 0xcd, 0xb7,
	0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x3a, 0x7b, 0x23, 0xf8, 0x0e, 0x00, 0x00,
}
