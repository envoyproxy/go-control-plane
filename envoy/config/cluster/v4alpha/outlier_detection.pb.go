// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/cluster/v4alpha/outlier_detection.proto

package envoy_config_cluster_v4alpha

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OutlierDetection struct {
	Consecutive_5Xx                        *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=consecutive_5xx,json=consecutive5xx,proto3" json:"consecutive_5xx,omitempty"`
	Interval                               *duration.Duration    `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	BaseEjectionTime                       *duration.Duration    `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime,proto3" json:"base_ejection_time,omitempty"`
	MaxEjectionPercent                     *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=max_ejection_percent,json=maxEjectionPercent,proto3" json:"max_ejection_percent,omitempty"`
	EnforcingConsecutive_5Xx               *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=enforcing_consecutive_5xx,json=enforcingConsecutive5xx,proto3" json:"enforcing_consecutive_5xx,omitempty"`
	EnforcingSuccessRate                   *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=enforcing_success_rate,json=enforcingSuccessRate,proto3" json:"enforcing_success_rate,omitempty"`
	SuccessRateMinimumHosts                *wrappers.UInt32Value `protobuf:"bytes,7,opt,name=success_rate_minimum_hosts,json=successRateMinimumHosts,proto3" json:"success_rate_minimum_hosts,omitempty"`
	SuccessRateRequestVolume               *wrappers.UInt32Value `protobuf:"bytes,8,opt,name=success_rate_request_volume,json=successRateRequestVolume,proto3" json:"success_rate_request_volume,omitempty"`
	SuccessRateStdevFactor                 *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=success_rate_stdev_factor,json=successRateStdevFactor,proto3" json:"success_rate_stdev_factor,omitempty"`
	ConsecutiveGatewayFailure              *wrappers.UInt32Value `protobuf:"bytes,10,opt,name=consecutive_gateway_failure,json=consecutiveGatewayFailure,proto3" json:"consecutive_gateway_failure,omitempty"`
	EnforcingConsecutiveGatewayFailure     *wrappers.UInt32Value `protobuf:"bytes,11,opt,name=enforcing_consecutive_gateway_failure,json=enforcingConsecutiveGatewayFailure,proto3" json:"enforcing_consecutive_gateway_failure,omitempty"`
	SplitExternalLocalOriginErrors         bool                  `protobuf:"varint,12,opt,name=split_external_local_origin_errors,json=splitExternalLocalOriginErrors,proto3" json:"split_external_local_origin_errors,omitempty"`
	ConsecutiveLocalOriginFailure          *wrappers.UInt32Value `protobuf:"bytes,13,opt,name=consecutive_local_origin_failure,json=consecutiveLocalOriginFailure,proto3" json:"consecutive_local_origin_failure,omitempty"`
	EnforcingConsecutiveLocalOriginFailure *wrappers.UInt32Value `protobuf:"bytes,14,opt,name=enforcing_consecutive_local_origin_failure,json=enforcingConsecutiveLocalOriginFailure,proto3" json:"enforcing_consecutive_local_origin_failure,omitempty"`
	EnforcingLocalOriginSuccessRate        *wrappers.UInt32Value `protobuf:"bytes,15,opt,name=enforcing_local_origin_success_rate,json=enforcingLocalOriginSuccessRate,proto3" json:"enforcing_local_origin_success_rate,omitempty"`
	FailurePercentageThreshold             *wrappers.UInt32Value `protobuf:"bytes,16,opt,name=failure_percentage_threshold,json=failurePercentageThreshold,proto3" json:"failure_percentage_threshold,omitempty"`
	EnforcingFailurePercentage             *wrappers.UInt32Value `protobuf:"bytes,17,opt,name=enforcing_failure_percentage,json=enforcingFailurePercentage,proto3" json:"enforcing_failure_percentage,omitempty"`
	EnforcingFailurePercentageLocalOrigin  *wrappers.UInt32Value `protobuf:"bytes,18,opt,name=enforcing_failure_percentage_local_origin,json=enforcingFailurePercentageLocalOrigin,proto3" json:"enforcing_failure_percentage_local_origin,omitempty"`
	FailurePercentageMinimumHosts          *wrappers.UInt32Value `protobuf:"bytes,19,opt,name=failure_percentage_minimum_hosts,json=failurePercentageMinimumHosts,proto3" json:"failure_percentage_minimum_hosts,omitempty"`
	FailurePercentageRequestVolume         *wrappers.UInt32Value `protobuf:"bytes,20,opt,name=failure_percentage_request_volume,json=failurePercentageRequestVolume,proto3" json:"failure_percentage_request_volume,omitempty"`
	XXX_NoUnkeyedLiteral                   struct{}              `json:"-"`
	XXX_unrecognized                       []byte                `json:"-"`
	XXX_sizecache                          int32                 `json:"-"`
}

func (m *OutlierDetection) Reset()         { *m = OutlierDetection{} }
func (m *OutlierDetection) String() string { return proto.CompactTextString(m) }
func (*OutlierDetection) ProtoMessage()    {}
func (*OutlierDetection) Descriptor() ([]byte, []int) {
	return fileDescriptor_6abf0dac7975b019, []int{0}
}

func (m *OutlierDetection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutlierDetection.Unmarshal(m, b)
}
func (m *OutlierDetection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutlierDetection.Marshal(b, m, deterministic)
}
func (m *OutlierDetection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierDetection.Merge(m, src)
}
func (m *OutlierDetection) XXX_Size() int {
	return xxx_messageInfo_OutlierDetection.Size(m)
}
func (m *OutlierDetection) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierDetection.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierDetection proto.InternalMessageInfo

func (m *OutlierDetection) GetConsecutive_5Xx() *wrappers.UInt32Value {
	if m != nil {
		return m.Consecutive_5Xx
	}
	return nil
}

func (m *OutlierDetection) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *OutlierDetection) GetBaseEjectionTime() *duration.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *OutlierDetection) GetMaxEjectionPercent() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingConsecutive_5Xx() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutive_5Xx
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingSuccessRate() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingSuccessRate
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateMinimumHosts() *wrappers.UInt32Value {
	if m != nil {
		return m.SuccessRateMinimumHosts
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateRequestVolume() *wrappers.UInt32Value {
	if m != nil {
		return m.SuccessRateRequestVolume
	}
	return nil
}

func (m *OutlierDetection) GetSuccessRateStdevFactor() *wrappers.UInt32Value {
	if m != nil {
		return m.SuccessRateStdevFactor
	}
	return nil
}

func (m *OutlierDetection) GetConsecutiveGatewayFailure() *wrappers.UInt32Value {
	if m != nil {
		return m.ConsecutiveGatewayFailure
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingConsecutiveGatewayFailure() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutiveGatewayFailure
	}
	return nil
}

func (m *OutlierDetection) GetSplitExternalLocalOriginErrors() bool {
	if m != nil {
		return m.SplitExternalLocalOriginErrors
	}
	return false
}

func (m *OutlierDetection) GetConsecutiveLocalOriginFailure() *wrappers.UInt32Value {
	if m != nil {
		return m.ConsecutiveLocalOriginFailure
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingConsecutiveLocalOriginFailure() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutiveLocalOriginFailure
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingLocalOriginSuccessRate() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingLocalOriginSuccessRate
	}
	return nil
}

func (m *OutlierDetection) GetFailurePercentageThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.FailurePercentageThreshold
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingFailurePercentage() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingFailurePercentage
	}
	return nil
}

func (m *OutlierDetection) GetEnforcingFailurePercentageLocalOrigin() *wrappers.UInt32Value {
	if m != nil {
		return m.EnforcingFailurePercentageLocalOrigin
	}
	return nil
}

func (m *OutlierDetection) GetFailurePercentageMinimumHosts() *wrappers.UInt32Value {
	if m != nil {
		return m.FailurePercentageMinimumHosts
	}
	return nil
}

func (m *OutlierDetection) GetFailurePercentageRequestVolume() *wrappers.UInt32Value {
	if m != nil {
		return m.FailurePercentageRequestVolume
	}
	return nil
}

func init() {
	proto.RegisterType((*OutlierDetection)(nil), "envoy.config.cluster.v4alpha.OutlierDetection")
}

func init() {
	proto.RegisterFile("envoy/config/cluster/v4alpha/outlier_detection.proto", fileDescriptor_6abf0dac7975b019)
}

var fileDescriptor_6abf0dac7975b019 = []byte{
	// 778 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0x49, 0x76, 0xb7, 0x1b, 0x66, 0x61, 0x1b, 0x86, 0xb2, 0x75, 0xba, 0xdd, 0xd0, 0x2d,
	0x5a, 0x54, 0x72, 0xb0, 0xa5, 0x6d, 0x7b, 0xe1, 0x82, 0x14, 0x9a, 0xf2, 0x22, 0xaa, 0x86, 0xb4,
	0xb4, 0x42, 0x45, 0x1a, 0x4d, 0x9d, 0x27, 0xce, 0x20, 0x7b, 0xc6, 0xcc, 0x8c, 0x5d, 0xf7, 0x04,
	0xdc, 0xf8, 0x0c, 0x7c, 0x04, 0x3e, 0x02, 0x77, 0x24, 0xae, 0x7c, 0x12, 0xee, 0x3d, 0xa1, 0xf8,
	0x25, 0xb1, 0x13, 0xd3, 0xb5, 0x6f, 0x91, 0xe6, 0xf9, 0xfd, 0xfe, 0xcf, 0x3c, 0x1e, 0x4f, 0x8c,
	0x0e, 0x80, 0x87, 0xe2, 0xd6, 0xb2, 0x05, 0x9f, 0x30, 0xc7, 0xb2, 0xdd, 0x40, 0x69, 0x90, 0x56,
	0x78, 0x40, 0x5d, 0x7f, 0x4a, 0x2d, 0x11, 0x68, 0x97, 0x81, 0x24, 0x63, 0xd0, 0x60, 0x6b, 0x26,
	0xb8, 0xe9, 0x4b, 0xa1, 0x05, 0xde, 0x8e, 0x29, 0x33, 0xa1, 0xcc, 0x94, 0x32, 0x53, 0x6a, 0xab,
	0xeb, 0x08, 0xe1, 0xb8, 0x60, 0xc5, 0xb5, 0xd7, 0xc1, 0xc4, 0x1a, 0x07, 0x92, 0x2e, 0xe8, 0xd5,
	0xf5, 0x1b, 0x49, 0x7d, 0x1f, 0xa4, 0x4a, 0xd7, 0x5f, 0x04, 0x63, 0x9f, 0x5a, 0x94, 0x73, 0xa1,
	0x63, 0x4c, 0x59, 0x4a, 0x53, 0x1d, 0x64, 0xcb, 0x2f, 0x57, 0x96, 0x43, 0x90, 0x8a, 0x09, 0xce,
	0xb8, 0x93, 0x96, 0x6c, 0x86, 0xd4, 0x65, 0x63, 0xaa, 0xc1, 0xca, 0x7e, 0x24, 0x0b, 0xbb, 0xff,
	0xae, 0xa3, 0xf6, 0x69, 0xb2, 0xa9, 0xa3, 0x6c, 0x4f, 0x78, 0x80, 0xd6, 0x6d, 0xc1, 0x15, 0xd8,
	0x81, 0x66, 0x21, 0x90, 0xc3, 0x28, 0x32, 0x1a, 0x3b, 0x8d, 0xbd, 0x27, 0xaf, 0xb7, 0xcd, 0xa4,
	0x53, 0x33, 0xeb, 0xd4, 0xfc, 0xee, 0x2b, 0xae, 0xf7, 0x5f, 0x5f, 0x50, 0x37, 0x80, 0xd1, 0xd3,
	0x1c, 0x74, 0x18, 0x45, 0xf8, 0x33, 0xd4, 0x62, 0x5c, 0x83, 0x0c, 0xa9, 0x6b, 0x34, 0x63, 0xbe,
	0xb3, 0xc2, 0x1f, 0xa5, 0x93, 0xe8, 0xb7, 0xee, 0xfa, 0x8f, 0xfe, 0x68, 0x34, 0x7b, 0x6f, 0x8d,
	0xe6, 0x10, 0xfe, 0x16, 0xe1, 0x6b, 0xaa, 0x80, 0xc0, 0x8f, 0x49, 0x63, 0x44, 0x33, 0x0f, 0x8c,
	0x07, 0xd5, 0x55, 0xed, 0x19, 0x3e, 0x48, 0xe9, 0x73, 0xe6, 0x01, 0xbe, 0x44, 0x1b, 0x1e, 0x8d,
	0x16, 0x46, 0x1f, 0xa4, 0x0d, 0x5c, 0x1b, 0x0f, 0xdf, 0xbc, 0xbf, 0xfe, 0xe3, 0xbb, 0xfe, 0xc3,
	0x5e, 0xd3, 0x18, 0x8f, 0xb0, 0x47, 0xa3, 0xcc, 0x3a, 0x4c, 0x04, 0x98, 0xa2, 0x0e, 0xf0, 0x89,
	0x90, 0x36, 0xe3, 0x0e, 0x59, 0x9e, 0xde, 0xa3, 0x3a, 0xf6, 0xcd, 0xb9, 0xe7, 0xf3, 0xe2, 0x3c,
	0xaf, 0xd0, 0xb3, 0x45, 0x84, 0x0a, 0x6c, 0x1b, 0x94, 0x22, 0x92, 0x6a, 0x30, 0xd6, 0xea, 0xf8,
	0x37, 0xe6, 0x92, 0xb3, 0xc4, 0x31, 0xa2, 0x1a, 0xf0, 0xf7, 0x68, 0x2b, 0xaf, 0x24, 0x1e, 0xe3,
	0xcc, 0x0b, 0x3c, 0x32, 0x15, 0x4a, 0x2b, 0xe3, 0x71, 0x85, 0xc7, 0xbf, 0xa9, 0x16, 0xba, 0x93,
	0x84, 0xfe, 0x72, 0x06, 0xe3, 0x2b, 0xf4, 0xbc, 0xa0, 0x96, 0xf0, 0x53, 0x00, 0x4a, 0x93, 0x50,
	0xb8, 0x81, 0x07, 0x46, 0xab, 0x82, 0xdb, 0xc8, 0xb9, 0x47, 0x09, 0x7e, 0x11, 0xd3, 0xf8, 0x12,
	0x75, 0x0a, 0x72, 0xa5, 0xc7, 0x10, 0x92, 0x09, 0xb5, 0xb5, 0x90, 0xc6, 0xdb, 0x15, 0xd4, 0xcf,
	0x72, 0xea, 0xb3, 0x19, 0x7c, 0x1c, 0xb3, 0xf8, 0x07, 0xf4, 0x3c, 0xff, 0x18, 0x1d, 0xaa, 0xe1,
	0x86, 0xde, 0x92, 0x09, 0x65, 0x6e, 0x20, 0xc1, 0x40, 0x15, 0xd4, 0x9d, 0x9c, 0xe0, 0x8b, 0x84,
	0x3f, 0x4e, 0x70, 0x1c, 0xa1, 0x57, 0xe5, 0xc7, 0x65, 0x39, 0xe7, 0x49, 0x9d, 0x47, 0xbb, 0x5b,
	0x76, 0x74, 0x96, 0x92, 0xbf, 0x46, 0xbb, 0xca, 0x77, 0x99, 0x26, 0x10, 0x69, 0x90, 0x9c, 0xba,
	0xc4, 0x15, 0x36, 0x75, 0x89, 0x90, 0xcc, 0x61, 0x9c, 0x80, 0x94, 0x42, 0x2a, 0xe3, 0x9d, 0x9d,
	0xc6, 0x5e, 0x6b, 0xd4, 0x8d, 0x2b, 0x07, 0x69, 0xe1, 0x37, 0xb3, 0xba, 0xd3, 0xb8, 0x6c, 0x10,
	0x57, 0x61, 0x40, 0x3b, 0xf9, 0xde, 0x0b, 0xa2, 0x6c, 0x03, 0xef, 0x56, 0x18, 0xd4, 0x8b, 0x9c,
	0x25, 0x97, 0x92, 0xb5, 0xfc, 0x6b, 0x03, 0xf5, 0xca, 0xa7, 0x55, 0x9a, 0xf8, 0xb4, 0xce, 0xc8,
	0x3e, 0x2e, 0x1b, 0x59, 0x49, 0x0f, 0x0a, 0x7d, 0xb4, 0x68, 0xa1, 0x10, 0x5b, 0x78, 0x13, 0xd7,
	0xeb, 0x64, 0x7f, 0x38, 0x37, 0xe6, 0x02, 0xf3, 0x2f, 0xa5, 0x83, 0xb6, 0xd3, 0x4d, 0x65, 0x17,
	0x15, 0x75, 0x80, 0xe8, 0xa9, 0x04, 0x35, 0x15, 0xee, 0xd8, 0x68, 0xd7, 0x49, 0xdb, 0x4a, 0x55,
	0xc3, 0xb9, 0xe9, 0x3c, 0x13, 0xcd, 0x82, 0x16, 0xbb, 0x5b, 0x8d, 0x34, 0xde, 0xab, 0x15, 0x34,
	0x57, 0x1d, 0x2f, 0x27, 0xe2, 0x9f, 0xd1, 0x27, 0xf7, 0x05, 0x15, 0x26, 0x6b, 0xe0, 0x3a, 0xa9,
	0xaf, 0xfe, 0x3f, 0x35, 0x37, 0xdd, 0xd9, 0x91, 0x2d, 0x89, 0x2d, 0xde, 0x76, 0xef, 0x57, 0x39,
	0xb2, 0x2b, 0xd3, 0x2c, 0xdc, 0x79, 0x0e, 0x7a, 0x59, 0x12, 0xb3, 0x74, 0xf3, 0x6d, 0x54, 0xc8,
	0xe9, 0xae, 0xe4, 0x14, 0xee, 0xbf, 0x4f, 0xad, 0xdf, 0xff, 0xfa, 0xad, 0xdb, 0x43, 0x7b, 0xe5,
	0x1f, 0x20, 0xfb, 0xe6, 0xf2, 0x9f, 0x7b, 0xff, 0xe4, 0xcf, 0x5f, 0xfe, 0xfe, 0x67, 0xad, 0xd9,
	0x7e, 0x80, 0x7a, 0x4c, 0x98, 0x31, 0xe6, 0x4b, 0x11, 0xdd, 0x9a, 0xf7, 0x7d, 0xc2, 0xf4, 0x3f,
	0x58, 0xf6, 0x0c, 0x67, 0xcd, 0x0e, 0x1b, 0xd7, 0x6b, 0x71, 0xd7, 0xfb, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xc8, 0xf7, 0x66, 0x5f, 0x38, 0x09, 0x00, 0x00,
}
