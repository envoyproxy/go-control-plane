// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/core/v4alpha/health_check.proto

package envoy_config_core_v4alpha

import (
	fmt "fmt"
	math "math"

	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/go-control-plane/envoy/annotations"
	v31 "github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/type/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthStatus int32

const (
	HealthStatus_UNKNOWN   HealthStatus = 0
	HealthStatus_HEALTHY   HealthStatus = 1
	HealthStatus_UNHEALTHY HealthStatus = 2
	HealthStatus_DRAINING  HealthStatus = 3
	HealthStatus_TIMEOUT   HealthStatus = 4
	HealthStatus_DEGRADED  HealthStatus = 5
)

var HealthStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEALTHY",
	2: "UNHEALTHY",
	3: "DRAINING",
	4: "TIMEOUT",
	5: "DEGRADED",
}

var HealthStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"HEALTHY":   1,
	"UNHEALTHY": 2,
	"DRAINING":  3,
	"TIMEOUT":   4,
	"DEGRADED":  5,
}

func (x HealthStatus) String() string {
	return proto.EnumName(HealthStatus_name, int32(x))
}

func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0}
}

type HealthCheck struct {
	Timeout               *duration.Duration    `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Interval              *duration.Duration    `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	InitialJitter         *duration.Duration    `protobuf:"bytes,20,opt,name=initial_jitter,json=initialJitter,proto3" json:"initial_jitter,omitempty"`
	IntervalJitter        *duration.Duration    `protobuf:"bytes,3,opt,name=interval_jitter,json=intervalJitter,proto3" json:"interval_jitter,omitempty"`
	IntervalJitterPercent uint32                `protobuf:"varint,18,opt,name=interval_jitter_percent,json=intervalJitterPercent,proto3" json:"interval_jitter_percent,omitempty"`
	UnhealthyThreshold    *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	HealthyThreshold      *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	AltPort               *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=alt_port,json=altPort,proto3" json:"alt_port,omitempty"`
	ReuseConnection       *wrappers.BoolValue   `protobuf:"bytes,7,opt,name=reuse_connection,json=reuseConnection,proto3" json:"reuse_connection,omitempty"`
	// Types that are valid to be assigned to HealthChecker:
	//	*HealthCheck_HttpHealthCheck_
	//	*HealthCheck_TcpHealthCheck_
	//	*HealthCheck_GrpcHealthCheck_
	//	*HealthCheck_CustomHealthCheck_
	HealthChecker                isHealthCheck_HealthChecker `protobuf_oneof:"health_checker"`
	NoTrafficInterval            *duration.Duration          `protobuf:"bytes,12,opt,name=no_traffic_interval,json=noTrafficInterval,proto3" json:"no_traffic_interval,omitempty"`
	UnhealthyInterval            *duration.Duration          `protobuf:"bytes,14,opt,name=unhealthy_interval,json=unhealthyInterval,proto3" json:"unhealthy_interval,omitempty"`
	UnhealthyEdgeInterval        *duration.Duration          `protobuf:"bytes,15,opt,name=unhealthy_edge_interval,json=unhealthyEdgeInterval,proto3" json:"unhealthy_edge_interval,omitempty"`
	HealthyEdgeInterval          *duration.Duration          `protobuf:"bytes,16,opt,name=healthy_edge_interval,json=healthyEdgeInterval,proto3" json:"healthy_edge_interval,omitempty"`
	EventLogPath                 string                      `protobuf:"bytes,17,opt,name=event_log_path,json=eventLogPath,proto3" json:"event_log_path,omitempty"`
	EventService                 *EventServiceConfig         `protobuf:"bytes,22,opt,name=event_service,json=eventService,proto3" json:"event_service,omitempty"`
	AlwaysLogHealthCheckFailures bool                        `protobuf:"varint,19,opt,name=always_log_health_check_failures,json=alwaysLogHealthCheckFailures,proto3" json:"always_log_health_check_failures,omitempty"`
	TlsOptions                   *HealthCheck_TlsOptions     `protobuf:"bytes,21,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty"`
	TransportSocketMatchCriteria *_struct.Struct             `protobuf:"bytes,23,opt,name=transport_socket_match_criteria,json=transportSocketMatchCriteria,proto3" json:"transport_socket_match_criteria,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                    `json:"-"`
	XXX_unrecognized             []byte                      `json:"-"`
	XXX_sizecache                int32                       `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0}
}

func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheck) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheck) GetInitialJitter() *duration.Duration {
	if m != nil {
		return m.InitialJitter
	}
	return nil
}

func (m *HealthCheck) GetIntervalJitter() *duration.Duration {
	if m != nil {
		return m.IntervalJitter
	}
	return nil
}

func (m *HealthCheck) GetIntervalJitterPercent() uint32 {
	if m != nil {
		return m.IntervalJitterPercent
	}
	return 0
}

func (m *HealthCheck) GetUnhealthyThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return nil
}

func (m *HealthCheck) GetHealthyThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.HealthyThreshold
	}
	return nil
}

func (m *HealthCheck) GetAltPort() *wrappers.UInt32Value {
	if m != nil {
		return m.AltPort
	}
	return nil
}

func (m *HealthCheck) GetReuseConnection() *wrappers.BoolValue {
	if m != nil {
		return m.ReuseConnection
	}
	return nil
}

type isHealthCheck_HealthChecker interface {
	isHealthCheck_HealthChecker()
}

type HealthCheck_HttpHealthCheck_ struct {
	HttpHealthCheck *HealthCheck_HttpHealthCheck `protobuf:"bytes,8,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof"`
}

type HealthCheck_TcpHealthCheck_ struct {
	TcpHealthCheck *HealthCheck_TcpHealthCheck `protobuf:"bytes,9,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof"`
}

type HealthCheck_GrpcHealthCheck_ struct {
	GrpcHealthCheck *HealthCheck_GrpcHealthCheck `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3,oneof"`
}

type HealthCheck_CustomHealthCheck_ struct {
	CustomHealthCheck *HealthCheck_CustomHealthCheck `protobuf:"bytes,13,opt,name=custom_health_check,json=customHealthCheck,proto3,oneof"`
}

func (*HealthCheck_HttpHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_TcpHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_GrpcHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_CustomHealthCheck_) isHealthCheck_HealthChecker() {}

func (m *HealthCheck) GetHealthChecker() isHealthCheck_HealthChecker {
	if m != nil {
		return m.HealthChecker
	}
	return nil
}

func (m *HealthCheck) GetHttpHealthCheck() *HealthCheck_HttpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_HttpHealthCheck_); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetTcpHealthCheck() *HealthCheck_TcpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_TcpHealthCheck_); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetGrpcHealthCheck() *HealthCheck_GrpcHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_GrpcHealthCheck_); ok {
		return x.GrpcHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetCustomHealthCheck() *HealthCheck_CustomHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_CustomHealthCheck_); ok {
		return x.CustomHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetNoTrafficInterval() *duration.Duration {
	if m != nil {
		return m.NoTrafficInterval
	}
	return nil
}

func (m *HealthCheck) GetUnhealthyInterval() *duration.Duration {
	if m != nil {
		return m.UnhealthyInterval
	}
	return nil
}

func (m *HealthCheck) GetUnhealthyEdgeInterval() *duration.Duration {
	if m != nil {
		return m.UnhealthyEdgeInterval
	}
	return nil
}

func (m *HealthCheck) GetHealthyEdgeInterval() *duration.Duration {
	if m != nil {
		return m.HealthyEdgeInterval
	}
	return nil
}

func (m *HealthCheck) GetEventLogPath() string {
	if m != nil {
		return m.EventLogPath
	}
	return ""
}

func (m *HealthCheck) GetEventService() *EventServiceConfig {
	if m != nil {
		return m.EventService
	}
	return nil
}

func (m *HealthCheck) GetAlwaysLogHealthCheckFailures() bool {
	if m != nil {
		return m.AlwaysLogHealthCheckFailures
	}
	return false
}

func (m *HealthCheck) GetTlsOptions() *HealthCheck_TlsOptions {
	if m != nil {
		return m.TlsOptions
	}
	return nil
}

func (m *HealthCheck) GetTransportSocketMatchCriteria() *_struct.Struct {
	if m != nil {
		return m.TransportSocketMatchCriteria
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_HttpHealthCheck_)(nil),
		(*HealthCheck_TcpHealthCheck_)(nil),
		(*HealthCheck_GrpcHealthCheck_)(nil),
		(*HealthCheck_CustomHealthCheck_)(nil),
	}
}

type HealthCheck_Payload struct {
	// Types that are valid to be assigned to Payload:
	//	*HealthCheck_Payload_Text
	//	*HealthCheck_Payload_Binary
	Payload              isHealthCheck_Payload_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *HealthCheck_Payload) Reset()         { *m = HealthCheck_Payload{} }
func (m *HealthCheck_Payload) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Payload) ProtoMessage()    {}
func (*HealthCheck_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 0}
}

func (m *HealthCheck_Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Payload.Unmarshal(m, b)
}
func (m *HealthCheck_Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Payload.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Payload.Merge(m, src)
}
func (m *HealthCheck_Payload) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Payload.Size(m)
}
func (m *HealthCheck_Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Payload proto.InternalMessageInfo

type isHealthCheck_Payload_Payload interface {
	isHealthCheck_Payload_Payload()
}

type HealthCheck_Payload_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type HealthCheck_Payload_Binary struct {
	Binary []byte `protobuf:"bytes,2,opt,name=binary,proto3,oneof"`
}

func (*HealthCheck_Payload_Text) isHealthCheck_Payload_Payload() {}

func (*HealthCheck_Payload_Binary) isHealthCheck_Payload_Payload() {}

func (m *HealthCheck_Payload) GetPayload() isHealthCheck_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HealthCheck_Payload) GetText() string {
	if x, ok := m.GetPayload().(*HealthCheck_Payload_Text); ok {
		return x.Text
	}
	return ""
}

func (m *HealthCheck_Payload) GetBinary() []byte {
	if x, ok := m.GetPayload().(*HealthCheck_Payload_Binary); ok {
		return x.Binary
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck_Payload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_Payload_Text)(nil),
		(*HealthCheck_Payload_Binary)(nil),
	}
}

type HealthCheck_HttpHealthCheck struct {
	Host                   string               `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path                   string               `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Send                   *HealthCheck_Payload `protobuf:"bytes,3,opt,name=send,proto3" json:"send,omitempty"`
	Receive                *HealthCheck_Payload `protobuf:"bytes,4,opt,name=receive,proto3" json:"receive,omitempty"`
	RequestHeadersToAdd    []*HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	RequestHeadersToRemove []string             `protobuf:"bytes,8,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	ExpectedStatuses       []*v3.Int64Range     `protobuf:"bytes,9,rep,name=expected_statuses,json=expectedStatuses,proto3" json:"expected_statuses,omitempty"`
	CodecClientType        v3.CodecClientType   `protobuf:"varint,10,opt,name=codec_client_type,json=codecClientType,proto3,enum=envoy.type.v3.CodecClientType" json:"codec_client_type,omitempty"`
	ServiceNameMatcher     *v31.StringMatcher   `protobuf:"bytes,11,opt,name=service_name_matcher,json=serviceNameMatcher,proto3" json:"service_name_matcher,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *HealthCheck_HttpHealthCheck) Reset()         { *m = HealthCheck_HttpHealthCheck{} }
func (m *HealthCheck_HttpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_HttpHealthCheck) ProtoMessage()    {}
func (*HealthCheck_HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 1}
}

func (m *HealthCheck_HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_HttpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_HttpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_HttpHealthCheck.Merge(m, src)
}
func (m *HealthCheck_HttpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_HttpHealthCheck.Size(m)
}
func (m *HealthCheck_HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_HttpHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_HttpHealthCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HealthCheck_HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HealthCheck_HttpHealthCheck) GetSend() *HealthCheck_Payload {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetReceive() *HealthCheck_Payload {
	if m != nil {
		return m.Receive
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetRequestHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetExpectedStatuses() []*v3.Int64Range {
	if m != nil {
		return m.ExpectedStatuses
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetCodecClientType() v3.CodecClientType {
	if m != nil {
		return m.CodecClientType
	}
	return v3.CodecClientType_HTTP1
}

func (m *HealthCheck_HttpHealthCheck) GetServiceNameMatcher() *v31.StringMatcher {
	if m != nil {
		return m.ServiceNameMatcher
	}
	return nil
}

type HealthCheck_TcpHealthCheck struct {
	Send                 *HealthCheck_Payload   `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	Receive              []*HealthCheck_Payload `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HealthCheck_TcpHealthCheck) Reset()         { *m = HealthCheck_TcpHealthCheck{} }
func (m *HealthCheck_TcpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_TcpHealthCheck) ProtoMessage()    {}
func (*HealthCheck_TcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 2}
}

func (m *HealthCheck_TcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_TcpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_TcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_TcpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_TcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_TcpHealthCheck.Merge(m, src)
}
func (m *HealthCheck_TcpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_TcpHealthCheck.Size(m)
}
func (m *HealthCheck_TcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_TcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_TcpHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_TcpHealthCheck) GetSend() *HealthCheck_Payload {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *HealthCheck_TcpHealthCheck) GetReceive() []*HealthCheck_Payload {
	if m != nil {
		return m.Receive
	}
	return nil
}

type HealthCheck_RedisHealthCheck struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_RedisHealthCheck) Reset()         { *m = HealthCheck_RedisHealthCheck{} }
func (m *HealthCheck_RedisHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_RedisHealthCheck) ProtoMessage()    {}
func (*HealthCheck_RedisHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 3}
}

func (m *HealthCheck_RedisHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_RedisHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_RedisHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_RedisHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_RedisHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_RedisHealthCheck.Merge(m, src)
}
func (m *HealthCheck_RedisHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_RedisHealthCheck.Size(m)
}
func (m *HealthCheck_RedisHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_RedisHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_RedisHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_RedisHealthCheck) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type HealthCheck_GrpcHealthCheck struct {
	ServiceName          string   `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_GrpcHealthCheck) Reset()         { *m = HealthCheck_GrpcHealthCheck{} }
func (m *HealthCheck_GrpcHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_GrpcHealthCheck) ProtoMessage()    {}
func (*HealthCheck_GrpcHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 4}
}

func (m *HealthCheck_GrpcHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_GrpcHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_GrpcHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_GrpcHealthCheck.Merge(m, src)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_GrpcHealthCheck.Size(m)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_GrpcHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_GrpcHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_GrpcHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheck_GrpcHealthCheck) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type HealthCheck_CustomHealthCheck struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to ConfigType:
	//	*HealthCheck_CustomHealthCheck_TypedConfig
	ConfigType           isHealthCheck_CustomHealthCheck_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *HealthCheck_CustomHealthCheck) Reset()         { *m = HealthCheck_CustomHealthCheck{} }
func (m *HealthCheck_CustomHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_CustomHealthCheck) ProtoMessage()    {}
func (*HealthCheck_CustomHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 5}
}

func (m *HealthCheck_CustomHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_CustomHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_CustomHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_CustomHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_CustomHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_CustomHealthCheck.Merge(m, src)
}
func (m *HealthCheck_CustomHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_CustomHealthCheck.Size(m)
}
func (m *HealthCheck_CustomHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_CustomHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_CustomHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_CustomHealthCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isHealthCheck_CustomHealthCheck_ConfigType interface {
	isHealthCheck_CustomHealthCheck_ConfigType()
}

type HealthCheck_CustomHealthCheck_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*HealthCheck_CustomHealthCheck_TypedConfig) isHealthCheck_CustomHealthCheck_ConfigType() {}

func (m *HealthCheck_CustomHealthCheck) GetConfigType() isHealthCheck_CustomHealthCheck_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *HealthCheck_CustomHealthCheck) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*HealthCheck_CustomHealthCheck_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck_CustomHealthCheck) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_CustomHealthCheck_TypedConfig)(nil),
	}
}

type HealthCheck_TlsOptions struct {
	AlpnProtocols        []string `protobuf:"bytes,1,rep,name=alpn_protocols,json=alpnProtocols,proto3" json:"alpn_protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_TlsOptions) Reset()         { *m = HealthCheck_TlsOptions{} }
func (m *HealthCheck_TlsOptions) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_TlsOptions) ProtoMessage()    {}
func (*HealthCheck_TlsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c892f9ff37cb3f95, []int{0, 6}
}

func (m *HealthCheck_TlsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_TlsOptions.Unmarshal(m, b)
}
func (m *HealthCheck_TlsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_TlsOptions.Marshal(b, m, deterministic)
}
func (m *HealthCheck_TlsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_TlsOptions.Merge(m, src)
}
func (m *HealthCheck_TlsOptions) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_TlsOptions.Size(m)
}
func (m *HealthCheck_TlsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_TlsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_TlsOptions proto.InternalMessageInfo

func (m *HealthCheck_TlsOptions) GetAlpnProtocols() []string {
	if m != nil {
		return m.AlpnProtocols
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.core.v4alpha.HealthStatus", HealthStatus_name, HealthStatus_value)
	proto.RegisterType((*HealthCheck)(nil), "envoy.config.core.v4alpha.HealthCheck")
	proto.RegisterType((*HealthCheck_Payload)(nil), "envoy.config.core.v4alpha.HealthCheck.Payload")
	proto.RegisterType((*HealthCheck_HttpHealthCheck)(nil), "envoy.config.core.v4alpha.HealthCheck.HttpHealthCheck")
	proto.RegisterType((*HealthCheck_TcpHealthCheck)(nil), "envoy.config.core.v4alpha.HealthCheck.TcpHealthCheck")
	proto.RegisterType((*HealthCheck_RedisHealthCheck)(nil), "envoy.config.core.v4alpha.HealthCheck.RedisHealthCheck")
	proto.RegisterType((*HealthCheck_GrpcHealthCheck)(nil), "envoy.config.core.v4alpha.HealthCheck.GrpcHealthCheck")
	proto.RegisterType((*HealthCheck_CustomHealthCheck)(nil), "envoy.config.core.v4alpha.HealthCheck.CustomHealthCheck")
	proto.RegisterType((*HealthCheck_TlsOptions)(nil), "envoy.config.core.v4alpha.HealthCheck.TlsOptions")
}

func init() {
	proto.RegisterFile("envoy/config/core/v4alpha/health_check.proto", fileDescriptor_c892f9ff37cb3f95)
}

var fileDescriptor_c892f9ff37cb3f95 = []byte{
	// 1594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x73, 0xdb, 0xc6,
	0x15, 0x16, 0x48, 0x8a, 0x3f, 0x1e, 0x45, 0x0a, 0x5a, 0x59, 0x16, 0xc4, 0x38, 0x0e, 0xed, 0xba,
	0x13, 0xd6, 0x4d, 0xc8, 0x9a, 0x72, 0x9d, 0x44, 0x97, 0x56, 0x90, 0x69, 0x53, 0x8a, 0x2d, 0x6b,
	0x56, 0x74, 0x3c, 0x9d, 0xce, 0x04, 0x5d, 0x03, 0x2b, 0x12, 0x31, 0x84, 0x45, 0x17, 0x4b, 0xc6,
	0xbc, 0x75, 0xda, 0x4b, 0xa7, 0xc7, 0x9c, 0x3a, 0xfd, 0x13, 0x72, 0xeb, 0xb5, 0xa7, 0xce, 0x74,
	0x3a, 0x93, 0x6b, 0x2f, 0xfd, 0x1b, 0x7a, 0xee, 0xa9, 0xa3, 0x53, 0x67, 0x17, 0x00, 0x49, 0x90,
	0x56, 0x28, 0x75, 0x7a, 0x23, 0xde, 0xfb, 0xbe, 0xef, 0xbd, 0xdd, 0x7d, 0x6f, 0xdf, 0x12, 0x3e,
	0xa2, 0xfe, 0x88, 0x8d, 0x5b, 0x36, 0xf3, 0xcf, 0xdc, 0x7e, 0xcb, 0x66, 0x9c, 0xb6, 0x46, 0x0f,
	0x89, 0x17, 0x0c, 0x48, 0x6b, 0x40, 0x89, 0x27, 0x06, 0x96, 0x3d, 0xa0, 0xf6, 0x9b, 0x66, 0xc0,
	0x99, 0x60, 0x68, 0x47, 0xa1, 0x9b, 0x11, 0xba, 0x29, 0xd1, 0xcd, 0x18, 0x5d, 0xbb, 0x77, 0xb9,
	0xd0, 0x6b, 0x12, 0xd2, 0x48, 0xa0, 0xf6, 0xf0, 0x72, 0x14, 0x1d, 0x51, 0x5f, 0x58, 0x21, 0xe5,
	0x23, 0xd7, 0xa6, 0x56, 0x1c, 0x22, 0x62, 0xdd, 0x8d, 0x58, 0x62, 0x1c, 0xd0, 0xd6, 0x39, 0x11,
	0xf6, 0x80, 0xf2, 0xd6, 0x68, 0xb7, 0x15, 0x0a, 0xee, 0xfa, 0x09, 0xc6, 0x98, 0xc1, 0x8c, 0x76,
	0x5b, 0x03, 0x21, 0x82, 0xd8, 0xb3, 0x93, 0xf6, 0x70, 0xe2, 0xf7, 0x93, 0x74, 0x76, 0xfa, 0x8c,
	0xf5, 0x3d, 0xda, 0x52, 0x5f, 0xaf, 0x87, 0x67, 0x2d, 0xe2, 0x8f, 0x63, 0xd7, 0xed, 0x79, 0x97,
	0x33, 0xe4, 0x44, 0xb8, 0xcc, 0x8f, 0xfd, 0xb7, 0xe6, 0xfd, 0xa1, 0xe0, 0x43, 0x5b, 0x5c, 0xc6,
	0xfe, 0x9a, 0x93, 0x20, 0xa0, 0x3c, 0x8c, 0xfd, 0x3f, 0x88, 0x72, 0x22, 0xbe, 0xcf, 0x84, 0x52,
	0x0d, 0x5b, 0x0e, 0x0d, 0x38, 0xb5, 0x67, 0x43, 0xbc, 0x3f, 0x74, 0x02, 0x92, 0xc2, 0x84, 0x82,
	0x88, 0x61, 0xa2, 0x71, 0x67, 0xc1, 0x3d, 0xa2, 0x3c, 0x74, 0x99, 0x3f, 0xdd, 0x94, 0xed, 0x11,
	0xf1, 0x5c, 0x87, 0x08, 0xda, 0x4a, 0x7e, 0x44, 0x8e, 0xbb, 0x7f, 0x7e, 0x0f, 0xca, 0x5d, 0x75,
	0xbe, 0x07, 0xf2, 0x78, 0xd1, 0xcf, 0xa0, 0x20, 0xdc, 0x73, 0xca, 0x86, 0xc2, 0xd0, 0xea, 0x5a,
	0xa3, 0xdc, 0xde, 0x69, 0x46, 0x2b, 0x68, 0x26, 0x2b, 0x68, 0x3e, 0x8e, 0xd7, 0x6f, 0xc2, 0x85,
	0x59, 0xf8, 0x56, 0xcb, 0x15, 0xb5, 0xfb, 0x2b, 0x38, 0x61, 0xa1, 0x7d, 0x28, 0xba, 0xbe, 0xa0,
	0x7c, 0x44, 0x3c, 0x23, 0x73, 0x1d, 0x85, 0x09, 0x0d, 0xfd, 0x1c, 0xaa, 0xae, 0xef, 0x0a, 0x97,
	0x78, 0xd6, 0x57, 0xae, 0x10, 0x94, 0x1b, 0x37, 0x96, 0x08, 0xe1, 0x4a, 0x4c, 0x38, 0x52, 0x78,
	0x64, 0xc2, 0x7a, 0xa2, 0x96, 0x48, 0x64, 0x97, 0x49, 0x54, 0x13, 0x46, 0xac, 0xf1, 0x08, 0xb6,
	0xe7, 0x34, 0xac, 0x80, 0x72, 0x9b, 0xfa, 0xc2, 0x40, 0x75, 0xad, 0x51, 0xc1, 0x5b, 0x69, 0xc2,
	0x49, 0xe4, 0x44, 0xaf, 0x60, 0x73, 0xe8, 0x47, 0x2d, 0x33, 0xb6, 0xc4, 0x80, 0xd3, 0x70, 0xc0,
	0x3c, 0xc7, 0xc8, 0xa9, 0xf8, 0xb7, 0x16, 0xe2, 0xbf, 0x3c, 0xf4, 0xc5, 0x6e, 0xfb, 0x0b, 0xe2,
	0x0d, 0xa9, 0x59, 0xbc, 0x30, 0x57, 0xff, 0xa0, 0x65, 0x74, 0x0d, 0xa3, 0x89, 0x44, 0x2f, 0x51,
	0x40, 0xa7, 0xb0, 0xb1, 0x28, 0xbb, 0x7a, 0x2d, 0x59, 0x7d, 0x41, 0xf4, 0x13, 0x28, 0x12, 0x4f,
	0x58, 0x01, 0xe3, 0xc2, 0xc8, 0x2f, 0xd7, 0xc2, 0x05, 0xe2, 0x89, 0x13, 0xc6, 0x05, 0xea, 0x80,
	0xce, 0xe9, 0x30, 0x54, 0x0d, 0xea, 0x53, 0x5b, 0x6e, 0xa1, 0x51, 0x50, 0x02, 0xb5, 0x05, 0x01,
	0x93, 0x31, 0x2f, 0xa2, 0xaf, 0x2b, 0xce, 0xc1, 0x84, 0x82, 0x1c, 0xd8, 0x90, 0x1d, 0x6a, 0xcd,
	0xde, 0x31, 0x46, 0x51, 0xe9, 0x3c, 0x6a, 0x5e, 0x7a, 0xc9, 0x34, 0x67, 0x4a, 0xb6, 0xd9, 0x15,
	0x22, 0x98, 0xf9, 0xee, 0xae, 0xe0, 0xf5, 0x41, 0xda, 0x84, 0x08, 0xe8, 0xc2, 0x9e, 0x0b, 0x52,
	0x52, 0x41, 0x7e, 0x7a, 0xc5, 0x20, 0x3d, 0x7b, 0x2e, 0x46, 0x55, 0xa4, 0x2c, 0x72, 0x21, 0x7d,
	0x1e, 0xd8, 0xe9, 0x18, 0xe5, 0x6b, 0x2d, 0xe4, 0x29, 0x0f, 0xec, 0xb9, 0x85, 0xf4, 0xd3, 0x26,
	0xf4, 0x15, 0x6c, 0xda, 0xc3, 0x50, 0xb0, 0xf3, 0x74, 0x9c, 0x8a, 0x8a, 0xf3, 0xe9, 0x15, 0xe3,
	0x1c, 0x28, 0x85, 0x74, 0xa4, 0x0d, 0x7b, 0xde, 0x88, 0x4e, 0x61, 0xd3, 0x67, 0x96, 0xe0, 0xe4,
	0xec, 0xcc, 0xb5, 0xad, 0x49, 0x53, 0xaf, 0x2d, 0x6b, 0x6a, 0x59, 0x6e, 0xdf, 0x6a, 0x99, 0xfb,
	0x2b, 0x78, 0xc3, 0x67, 0xbd, 0x88, 0x7e, 0x98, 0xf4, 0x36, 0x86, 0x69, 0x69, 0x4f, 0x35, 0xab,
	0xd7, 0xd0, 0x9c, 0xd0, 0x27, 0x9a, 0xbf, 0x84, 0xed, 0xa9, 0x26, 0x75, 0xfa, 0x74, 0x2a, 0xbc,
	0x7e, 0x75, 0xe1, 0xad, 0x89, 0x46, 0xc7, 0xe9, 0xd3, 0x89, 0xf8, 0x2b, 0xd8, 0x7a, 0xb7, 0xb4,
	0x7e, 0x75, 0xe9, 0xcd, 0x77, 0x09, 0xdf, 0x83, 0x6a, 0x34, 0xe9, 0x3c, 0xd6, 0xb7, 0x02, 0x22,
	0x06, 0xc6, 0x46, 0x5d, 0x6b, 0x94, 0xf0, 0x9a, 0xb2, 0x3e, 0x63, 0xfd, 0x13, 0x22, 0x06, 0x08,
	0x43, 0x25, 0x35, 0x0f, 0x8d, 0x9b, 0x2a, 0xec, 0xc7, 0xdf, 0x73, 0xd4, 0x1d, 0x89, 0x3f, 0x8d,
	0xe0, 0x07, 0xca, 0x1f, 0x6b, 0xc6, 0x36, 0xf4, 0x04, 0xea, 0xc4, 0xfb, 0x9a, 0x8c, 0x43, 0x15,
	0x7a, 0xb6, 0x90, 0xac, 0x33, 0xe2, 0x7a, 0x43, 0x4e, 0x43, 0x63, 0xb3, 0xae, 0x35, 0x8a, 0xf8,
	0x56, 0x84, 0x7b, 0xc6, 0xfa, 0x33, 0x85, 0xf1, 0x24, 0xc6, 0x20, 0x0c, 0x65, 0xe1, 0x85, 0x16,
	0x0b, 0xd4, 0xd0, 0x31, 0xb6, 0x54, 0x66, 0x0f, 0xae, 0xda, 0x50, 0x5e, 0xf8, 0x22, 0x22, 0x62,
	0x10, 0x93, 0xdf, 0xe8, 0x4b, 0xf8, 0x40, 0x70, 0xe2, 0x87, 0xf2, 0x42, 0xb2, 0x42, 0x66, 0xbf,
	0xa1, 0xc2, 0x52, 0x93, 0xde, 0xb2, 0xb9, 0x2b, 0x28, 0x77, 0x89, 0xb1, 0xad, 0xe2, 0x6c, 0x2f,
	0x6c, 0xfc, 0xa9, 0x9a, 0xbb, 0xf8, 0xd6, 0x84, 0x7f, 0xaa, 0xe8, 0xcf, 0x25, 0xfb, 0x20, 0x26,
	0xd7, 0x7e, 0xa7, 0x41, 0xe1, 0x84, 0x8c, 0x3d, 0x46, 0x1c, 0xf4, 0x3e, 0xe4, 0x04, 0x7d, 0x1b,
	0x0d, 0xba, 0x92, 0x59, 0xb8, 0x30, 0x73, 0x3c, 0x53, 0xd7, 0xba, 0x2b, 0x58, 0x99, 0x91, 0x01,
	0xf9, 0xd7, 0xae, 0x4f, 0xf8, 0x58, 0xcd, 0xb1, 0xb5, 0xee, 0x0a, 0x8e, 0xbf, 0xf7, 0x5a, 0x7f,
	0xfa, 0xfb, 0xef, 0x6f, 0xdf, 0x87, 0xc6, 0x3b, 0x56, 0xba, 0x9b, 0x5a, 0x64, 0x1c, 0xc9, 0xac,
	0x42, 0x21, 0x88, 0x83, 0x66, 0xff, 0x63, 0x6a, 0xb5, 0x7f, 0xaf, 0xc2, 0xfa, 0xdc, 0xb5, 0x85,
	0x3e, 0x80, 0xdc, 0x80, 0x85, 0x49, 0x36, 0xe5, 0x0b, 0xb3, 0xc8, 0xf3, 0x7f, 0xd5, 0x32, 0xdf,
	0x69, 0x2b, 0x58, 0x39, 0xd0, 0x1d, 0xc8, 0xa9, 0x32, 0xc9, 0x28, 0x40, 0xe5, 0xc2, 0x04, 0x5e,
	0xac, 0x6b, 0x09, 0x44, 0xba, 0x90, 0x09, 0xb9, 0x90, 0xfa, 0x4e, 0x3c, 0xec, 0x9a, 0x57, 0x3c,
	0x8a, 0x38, 0x4b, 0xac, 0xb8, 0xa8, 0x0b, 0x05, 0x4e, 0x6d, 0xea, 0x8e, 0x68, 0x3c, 0xb3, 0xae,
	0x2b, 0x93, 0xd0, 0x91, 0x07, 0x37, 0x39, 0xfd, 0xf5, 0x90, 0x86, 0x42, 0x16, 0x99, 0x43, 0x79,
	0x68, 0x09, 0x66, 0x11, 0xc7, 0x31, 0xf2, 0xf5, 0x6c, 0xa3, 0xdc, 0xfe, 0xe8, 0xfb, 0x85, 0x1d,
	0xca, 0xd5, 0xd0, 0x88, 0x4a, 0xc3, 0x2c, 0x5d, 0x98, 0xf9, 0x6f, 0xb4, 0xac, 0xfe, 0xaf, 0x02,
	0xde, 0x8c, 0x65, 0x23, 0x50, 0xd8, 0x63, 0xfb, 0x8e, 0x83, 0x3e, 0x87, 0x9d, 0x77, 0x44, 0xe3,
	0xf4, 0x9c, 0x8d, 0xa8, 0x51, 0xac, 0x67, 0x1b, 0x25, 0x53, 0xbf, 0x30, 0x2b, 0xdf, 0x68, 0x70,
	0x57, 0xed, 0xac, 0x26, 0xb7, 0xed, 0xe6, 0xbc, 0x12, 0x56, 0x78, 0xf4, 0x04, 0x36, 0xe8, 0xdb,
	0x80, 0xda, 0x82, 0x3a, 0x56, 0xf4, 0xd6, 0xa2, 0xa1, 0x51, 0x52, 0x59, 0xef, 0xc4, 0x59, 0xcb,
	0x67, 0xa4, 0x3c, 0xef, 0x43, 0x5f, 0x3c, 0x7a, 0x88, 0xe5, 0x5b, 0x12, 0xeb, 0x09, 0xe7, 0x34,
	0xa6, 0xa0, 0x1e, 0x6c, 0xd8, 0xcc, 0xa1, 0xb6, 0x65, 0x7b, 0xae, 0xec, 0x62, 0x49, 0x32, 0xa0,
	0xae, 0x35, 0xaa, 0xed, 0xdb, 0x73, 0x3a, 0x07, 0x12, 0x77, 0xa0, 0x60, 0xbd, 0x71, 0x10, 0x4d,
	0xed, 0xdf, 0xaa, 0xa9, 0xbd, 0x6e, 0xa7, 0x5d, 0xe8, 0x0b, 0xb8, 0x91, 0x3c, 0x8f, 0x7d, 0x72,
	0x4e, 0xad, 0xf8, 0x29, 0x1c, 0x8f, 0x9b, 0x7b, 0xb3, 0xc2, 0xb1, 0x4b, 0x06, 0x38, 0x55, 0xaf,
	0xe4, 0xe7, 0x91, 0x01, 0xa3, 0x58, 0xe1, 0x98, 0x9c, 0xd3, 0xd8, 0xb6, 0xf7, 0x89, 0xac, 0xeb,
	0x36, 0xfc, 0x64, 0x69, 0x5d, 0xcf, 0xd5, 0xee, 0x51, 0xae, 0xb8, 0xaa, 0xe7, 0x8f, 0x72, 0xc5,
	0x82, 0x5e, 0xc4, 0x6b, 0xb3, 0xa9, 0xe1, 0x92, 0x7c, 0x22, 0xc8, 0x71, 0xdc, 0xae, 0xfd, 0x53,
	0x83, 0x6a, 0x7a, 0x8c, 0x4e, 0xea, 0x55, 0xfb, 0xff, 0xd4, 0x6b, 0x46, 0x1d, 0xd0, 0xff, 0x5a,
	0xaf, 0x7b, 0x8f, 0xe4, 0xf2, 0x1f, 0x40, 0x6b, 0xe9, 0xf2, 0xd3, 0xab, 0xa8, 0x7d, 0x09, 0x3a,
	0xa6, 0x8e, 0x1b, 0xce, 0xae, 0x4c, 0x87, 0xec, 0x1b, 0x3a, 0x8e, 0x9a, 0x19, 0xcb, 0x9f, 0x7b,
	0x9f, 0x4a, 0xf5, 0x5d, 0x78, 0xb0, 0x54, 0x7d, 0x5e, 0xab, 0xf6, 0x47, 0x0d, 0xd6, 0xe7, 0xde,
	0x06, 0xe8, 0x0e, 0xa4, 0xf6, 0x39, 0x0e, 0x54, 0x9e, 0x39, 0x54, 0xf4, 0x23, 0x28, 0x91, 0xa1,
	0x18, 0x30, 0xee, 0x8a, 0x71, 0x7c, 0x69, 0xa4, 0x6e, 0x95, 0xa9, 0xf7, 0xea, 0x07, 0x3f, 0x97,
	0x46, 0xed, 0x6f, 0x1a, 0x6c, 0x2c, 0x3c, 0x27, 0xd0, 0x7b, 0x90, 0x9b, 0x26, 0x35, 0xb9, 0x58,
	0xb1, 0x32, 0xa2, 0xcf, 0x60, 0x4d, 0x56, 0xa6, 0x13, 0xff, 0xb3, 0x8b, 0xef, 0xaa, 0x1b, 0x0b,
	0xd7, 0xf9, 0xbe, 0x3f, 0xee, 0xae, 0xe0, 0xb2, 0xc2, 0x46, 0x63, 0x6c, 0xef, 0x33, 0x99, 0xe6,
	0x43, 0x68, 0x2f, 0x4d, 0x73, 0x21, 0x25, 0xb3, 0x02, 0xe5, 0x08, 0xaf, 0x5a, 0xf0, 0x28, 0x57,
	0xcc, 0xe8, 0x59, 0x9c, 0x8f, 0x4c, 0xb5, 0x3e, 0xc0, 0x74, 0x1c, 0xa1, 0x1f, 0x42, 0x95, 0x78,
	0x81, 0x6f, 0xa9, 0x4c, 0x6c, 0xe6, 0x85, 0x86, 0x26, 0x6f, 0x0f, 0x5c, 0x91, 0xd6, 0x93, 0xc4,
	0xb8, 0xd7, 0x96, 0xc9, 0x7c, 0x0c, 0x3f, 0x5e, 0x5e, 0x2d, 0x13, 0xe9, 0xbd, 0x0f, 0x25, 0xe7,
	0x2e, 0xd4, 0x97, 0x71, 0xcc, 0x2d, 0xa8, 0xce, 0xce, 0x65, 0xca, 0xd5, 0xdc, 0x38, 0xca, 0x15,
	0x41, 0x2f, 0xdf, 0xff, 0x15, 0xac, 0x45, 0xd8, 0xe8, 0x9a, 0x41, 0x65, 0x28, 0xbc, 0x3c, 0xfe,
	0xfc, 0xf8, 0xc5, 0xab, 0x63, 0x7d, 0x45, 0x7e, 0x74, 0x3b, 0xfb, 0xcf, 0x7a, 0xdd, 0x5f, 0xe8,
	0x1a, 0xaa, 0x40, 0xe9, 0xe5, 0x71, 0xf2, 0x99, 0x41, 0x6b, 0x50, 0x7c, 0x8c, 0xf7, 0x0f, 0x8f,
	0x0f, 0x8f, 0x9f, 0xea, 0x59, 0x89, 0xec, 0x1d, 0x3e, 0xef, 0xbc, 0x78, 0xd9, 0xd3, 0x73, 0xca,
	0xd5, 0x79, 0x8a, 0xf7, 0x1f, 0x77, 0x1e, 0xeb, 0xab, 0x66, 0xe7, 0x2f, 0xbf, 0xf9, 0xee, 0x1f,
	0xf9, 0x8c, 0x9e, 0x85, 0x0f, 0x5d, 0x16, 0xb5, 0x53, 0xc0, 0xd9, 0xdb, 0xf1, 0xe5, 0x9d, 0x65,
	0xea, 0x33, 0xe9, 0xab, 0x4d, 0x3a, 0xd1, 0x5e, 0xe7, 0xd5, 0x16, 0xee, 0xfe, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x21, 0x81, 0x72, 0x8b, 0x5c, 0x10, 0x00, 0x00,
}
