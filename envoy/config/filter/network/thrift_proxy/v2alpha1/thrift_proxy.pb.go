// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ThriftProxy_TransportType int32

const (
	// For every new connection, the Thrift proxy will determine which transport to use.
	AUTO_TRANSPORT ThriftProxy_TransportType = 0
	// The Thrift proxy will assume the client is using the Thrift framed transport.
	FRAMED ThriftProxy_TransportType = 1
	// The Thrift proxy will assume the client is using the Thrift unframed transport.
	UNFRAMED ThriftProxy_TransportType = 2
)

var ThriftProxy_TransportType_name = map[int32]string{
	0: "AUTO_TRANSPORT",
	1: "FRAMED",
	2: "UNFRAMED",
}
var ThriftProxy_TransportType_value = map[string]int32{
	"AUTO_TRANSPORT": 0,
	"FRAMED":         1,
	"UNFRAMED":       2,
}

func (x ThriftProxy_TransportType) String() string {
	return proto.EnumName(ThriftProxy_TransportType_name, int32(x))
}
func (ThriftProxy_TransportType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorThriftProxy, []int{0, 0}
}

type ThriftProxy_ProtocolType int32

const (
	// For every new connection, the Thrift proxy will determine which protocol to use.
	// N.B. The older, non-strict binary protocol is not included in automatic protocol
	// detection.
	AUTO_PROTOCOL ThriftProxy_ProtocolType = 0
	// The Thrift proxy will assume the client is using the Thrift binary protocol.
	BINARY ThriftProxy_ProtocolType = 1
	// The Thrift proxy will assume the client is using the Thrift non-strict binary protocol.
	LAX_BINARY ThriftProxy_ProtocolType = 2
	// The Thrift proxy will assume the client is using the Thrift compact protocol.
	COMPACT ThriftProxy_ProtocolType = 3
)

var ThriftProxy_ProtocolType_name = map[int32]string{
	0: "AUTO_PROTOCOL",
	1: "BINARY",
	2: "LAX_BINARY",
	3: "COMPACT",
}
var ThriftProxy_ProtocolType_value = map[string]int32{
	"AUTO_PROTOCOL": 0,
	"BINARY":        1,
	"LAX_BINARY":    2,
	"COMPACT":       3,
}

func (x ThriftProxy_ProtocolType) String() string {
	return proto.EnumName(ThriftProxy_ProtocolType_name, int32(x))
}
func (ThriftProxy_ProtocolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorThriftProxy, []int{0, 1}
}

// [#protodoc-title: Extensions Thrift Proxy]
// Thrift Proxy filter configuration.
// [#comment:next free field: 5]
type ThriftProxy struct {
	// Supplies the type of transport that the Thrift proxy should use. Defaults to `AUTO_TRANSPORT`.
	Transport ThriftProxy_TransportType `protobuf:"varint,2,opt,name=transport,proto3,enum=envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy_TransportType" json:"transport,omitempty"`
	// Supplies the type of protocol that the Thrift proxy should use. Defaults to `AUTO_PROTOCOL`.
	Protocol ThriftProxy_ProtocolType `protobuf:"varint,3,opt,name=protocol,proto3,enum=envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy_ProtocolType" json:"protocol,omitempty"`
	// The human readable prefix to use when emitting statistics.
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// The route table for the connection manager is static and is specified in this property.
	RouteConfig *RouteConfiguration `protobuf:"bytes,4,opt,name=route_config,json=routeConfig" json:"route_config,omitempty"`
}

func (m *ThriftProxy) Reset()                    { *m = ThriftProxy{} }
func (m *ThriftProxy) String() string            { return proto.CompactTextString(m) }
func (*ThriftProxy) ProtoMessage()               {}
func (*ThriftProxy) Descriptor() ([]byte, []int) { return fileDescriptorThriftProxy, []int{0} }

func (m *ThriftProxy) GetTransport() ThriftProxy_TransportType {
	if m != nil {
		return m.Transport
	}
	return AUTO_TRANSPORT
}

func (m *ThriftProxy) GetProtocol() ThriftProxy_ProtocolType {
	if m != nil {
		return m.Protocol
	}
	return AUTO_PROTOCOL
}

func (m *ThriftProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *ThriftProxy) GetRouteConfig() *RouteConfiguration {
	if m != nil {
		return m.RouteConfig
	}
	return nil
}

func init() {
	proto.RegisterType((*ThriftProxy)(nil), "envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy")
	proto.RegisterEnum("envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy_TransportType", ThriftProxy_TransportType_name, ThriftProxy_TransportType_value)
	proto.RegisterEnum("envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftProxy_ProtocolType", ThriftProxy_ProtocolType_name, ThriftProxy_ProtocolType_value)
}
func (m *ThriftProxy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThriftProxy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StatPrefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintThriftProxy(dAtA, i, uint64(len(m.StatPrefix)))
		i += copy(dAtA[i:], m.StatPrefix)
	}
	if m.Transport != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintThriftProxy(dAtA, i, uint64(m.Transport))
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintThriftProxy(dAtA, i, uint64(m.Protocol))
	}
	if m.RouteConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintThriftProxy(dAtA, i, uint64(m.RouteConfig.Size()))
		n1, err := m.RouteConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintThriftProxy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ThriftProxy) Size() (n int) {
	var l int
	_ = l
	l = len(m.StatPrefix)
	if l > 0 {
		n += 1 + l + sovThriftProxy(uint64(l))
	}
	if m.Transport != 0 {
		n += 1 + sovThriftProxy(uint64(m.Transport))
	}
	if m.Protocol != 0 {
		n += 1 + sovThriftProxy(uint64(m.Protocol))
	}
	if m.RouteConfig != nil {
		l = m.RouteConfig.Size()
		n += 1 + l + sovThriftProxy(uint64(l))
	}
	return n
}

func sovThriftProxy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozThriftProxy(x uint64) (n int) {
	return sovThriftProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ThriftProxy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThriftProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThriftProxy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThriftProxy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThriftProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThriftProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			m.Transport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThriftProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transport |= (ThriftProxy_TransportType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThriftProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (ThriftProxy_ProtocolType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThriftProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThriftProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RouteConfig == nil {
				m.RouteConfig = &RouteConfiguration{}
			}
			if err := m.RouteConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThriftProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThriftProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThriftProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThriftProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThriftProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThriftProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthThriftProxy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowThriftProxy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipThriftProxy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthThriftProxy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThriftProxy   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("envoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto", fileDescriptorThriftProxy)
}

var fileDescriptorThriftProxy = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0x87, 0x7b, 0x8e, 0x29, 0xcd, 0xeb, 0x34, 0x32, 0x27, 0x24, 0xac, 0x0c, 0x96, 0x95, 0x29,
	0x62, 0x38, 0xab, 0x66, 0x66, 0xb0, 0xdd, 0x22, 0x21, 0xd2, 0xd8, 0x3a, 0xae, 0x12, 0xb0, 0x58,
	0xa6, 0xd8, 0x89, 0x85, 0xe5, 0xb3, 0x2e, 0x57, 0xd3, 0xac, 0x4c, 0x7c, 0x0f, 0x06, 0xbe, 0x03,
	0x13, 0x23, 0x23, 0x1f, 0x01, 0x65, 0xe3, 0x5b, 0x20, 0x9f, 0x1d, 0xda, 0x88, 0xa9, 0xb0, 0xbd,
	0x7f, 0xec, 0xe7, 0xb9, 0xf7, 0x07, 0xa7, 0x59, 0xd5, 0xf0, 0x8d, 0x7b, 0xc9, 0xab, 0xbc, 0x58,
	0xba, 0x79, 0x51, 0xca, 0x4c, 0xb8, 0x55, 0x26, 0x3f, 0x70, 0xf1, 0xde, 0x95, 0x2b, 0x51, 0xe4,
	0x32, 0xa9, 0x05, 0xbf, 0xde, 0xb8, 0x8d, 0x97, 0x96, 0xf5, 0x2a, 0x3d, 0xd9, 0x9b, 0x92, 0x5a,
	0x70, 0xc9, 0xf1, 0x89, 0xa2, 0x90, 0x8e, 0x42, 0x3a, 0x0a, 0xe9, 0x29, 0x64, 0xef, 0xfb, 0x1d,
	0x65, 0xf2, 0xf4, 0xee, 0x62, 0xc1, 0xaf, 0x64, 0xd6, 0x19, 0x27, 0x8f, 0x9a, 0xb4, 0x2c, 0xde,
	0xa5, 0x32, 0x73, 0x77, 0x45, 0xbf, 0x78, 0xb8, 0xe4, 0x4b, 0xae, 0x4a, 0xb7, 0xad, 0xba, 0xe9,
	0xf4, 0x8b, 0x0e, 0x06, 0x53, 0xd0, 0xb8, 0x65, 0xe2, 0xc7, 0x60, 0xac, 0x65, 0xda, 0x1a, 0xb2,
	0xbc, 0xb8, 0xb6, 0x90, 0x83, 0x66, 0xc3, 0x60, 0xf8, 0xf5, 0xd7, 0xb7, 0x81, 0x2e, 0x34, 0x07,
	0x51, 0x68, 0xb7, 0xb1, 0x5a, 0xe2, 0x06, 0x86, 0x52, 0xa4, 0xd5, 0xba, 0xe6, 0x42, 0x5a, 0x9a,
	0x83, 0x66, 0x63, 0x6f, 0x4e, 0xee, 0x7c, 0x30, 0xb9, 0xa5, 0x27, 0x6c, 0xc7, 0x63, 0x9b, 0x3a,
	0x0b, 0xa0, 0xf5, 0xde, 0xfb, 0x88, 0x34, 0x13, 0xd1, 0x1b, 0x15, 0x5e, 0xc3, 0x91, 0x7a, 0xfc,
	0x25, 0x2f, 0xad, 0x81, 0xd2, 0xbe, 0xf8, 0x4f, 0x6d, 0xdc, 0xe3, 0xfe, 0xb2, 0xfe, 0x11, 0xe1,
	0x15, 0x8c, 0x54, 0xcc, 0x49, 0xe7, 0xb0, 0x74, 0x07, 0xcd, 0x0c, 0xef, 0xec, 0x1f, 0xc4, 0xb4,
	0xc5, 0x84, 0xea, 0x87, 0x2b, 0x91, 0xca, 0x82, 0x57, 0xd4, 0x10, 0x37, 0xb3, 0x69, 0x08, 0xc7,
	0x7b, 0x31, 0x60, 0x0c, 0x63, 0xff, 0x82, 0x45, 0x09, 0xa3, 0xfe, 0xe2, 0x65, 0x1c, 0x51, 0x66,
	0x1e, 0x60, 0x80, 0xc3, 0x67, 0xd4, 0x3f, 0x3f, 0x3b, 0x35, 0x11, 0x1e, 0xc1, 0xd1, 0xc5, 0xa2,
	0xef, 0xb4, 0x89, 0xfe, 0xe9, 0xb3, 0x7d, 0x30, 0x8d, 0x61, 0x74, 0xfb, 0x28, 0xfc, 0x00, 0x8e,
	0x15, 0x23, 0xa6, 0x11, 0x8b, 0xc2, 0x68, 0xde, 0x21, 0x82, 0xe7, 0x0b, 0x9f, 0xbe, 0x36, 0x11,
	0x1e, 0x03, 0xcc, 0xfd, 0x57, 0x49, 0xdf, 0x6b, 0xd8, 0x80, 0xfb, 0x61, 0x74, 0x1e, 0xfb, 0x21,
	0x33, 0x07, 0x1d, 0x31, 0x30, 0xbf, 0x6f, 0x6d, 0xf4, 0x63, 0x6b, 0xa3, 0x9f, 0x5b, 0x1b, 0xbd,
	0xd1, 0x1a, 0xef, 0xed, 0xa1, 0x0a, 0xe7, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x80,
	0x04, 0x6e, 0x2b, 0x03, 0x00, 0x00,
}
