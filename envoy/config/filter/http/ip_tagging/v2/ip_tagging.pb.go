// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto

package envoy_config_filter_http_ip_tagging_v2

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IPTagging_RequestType int32

const (
	IPTagging_BOTH     IPTagging_RequestType = 0
	IPTagging_INTERNAL IPTagging_RequestType = 1
	IPTagging_EXTERNAL IPTagging_RequestType = 2
)

var IPTagging_RequestType_name = map[int32]string{
	0: "BOTH",
	1: "INTERNAL",
	2: "EXTERNAL",
}

var IPTagging_RequestType_value = map[string]int32{
	"BOTH":     0,
	"INTERNAL": 1,
	"EXTERNAL": 2,
}

func (x IPTagging_RequestType) String() string {
	return proto.EnumName(IPTagging_RequestType_name, int32(x))
}

func (IPTagging_RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4275d0b367744d2, []int{0, 0}
}

type IPTagging struct {
	RequestType          IPTagging_RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=envoy.config.filter.http.ip_tagging.v2.IPTagging_RequestType" json:"request_type,omitempty"`
	IpTags               []*IPTagging_IPTag    `protobuf:"bytes,4,rep,name=ip_tags,json=ipTags,proto3" json:"ip_tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IPTagging) Reset()         { *m = IPTagging{} }
func (m *IPTagging) String() string { return proto.CompactTextString(m) }
func (*IPTagging) ProtoMessage()    {}
func (*IPTagging) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4275d0b367744d2, []int{0}
}

func (m *IPTagging) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPTagging.Unmarshal(m, b)
}
func (m *IPTagging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPTagging.Marshal(b, m, deterministic)
}
func (m *IPTagging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPTagging.Merge(m, src)
}
func (m *IPTagging) XXX_Size() int {
	return xxx_messageInfo_IPTagging.Size(m)
}
func (m *IPTagging) XXX_DiscardUnknown() {
	xxx_messageInfo_IPTagging.DiscardUnknown(m)
}

var xxx_messageInfo_IPTagging proto.InternalMessageInfo

func (m *IPTagging) GetRequestType() IPTagging_RequestType {
	if m != nil {
		return m.RequestType
	}
	return IPTagging_BOTH
}

func (m *IPTagging) GetIpTags() []*IPTagging_IPTag {
	if m != nil {
		return m.IpTags
	}
	return nil
}

type IPTagging_IPTag struct {
	IpTagName            string            `protobuf:"bytes,1,opt,name=ip_tag_name,json=ipTagName,proto3" json:"ip_tag_name,omitempty"`
	IpList               []*core.CidrRange `protobuf:"bytes,2,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IPTagging_IPTag) Reset()         { *m = IPTagging_IPTag{} }
func (m *IPTagging_IPTag) String() string { return proto.CompactTextString(m) }
func (*IPTagging_IPTag) ProtoMessage()    {}
func (*IPTagging_IPTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4275d0b367744d2, []int{0, 0}
}

func (m *IPTagging_IPTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPTagging_IPTag.Unmarshal(m, b)
}
func (m *IPTagging_IPTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPTagging_IPTag.Marshal(b, m, deterministic)
}
func (m *IPTagging_IPTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPTagging_IPTag.Merge(m, src)
}
func (m *IPTagging_IPTag) XXX_Size() int {
	return xxx_messageInfo_IPTagging_IPTag.Size(m)
}
func (m *IPTagging_IPTag) XXX_DiscardUnknown() {
	xxx_messageInfo_IPTagging_IPTag.DiscardUnknown(m)
}

var xxx_messageInfo_IPTagging_IPTag proto.InternalMessageInfo

func (m *IPTagging_IPTag) GetIpTagName() string {
	if m != nil {
		return m.IpTagName
	}
	return ""
}

func (m *IPTagging_IPTag) GetIpList() []*core.CidrRange {
	if m != nil {
		return m.IpList
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.filter.http.ip_tagging.v2.IPTagging_RequestType", IPTagging_RequestType_name, IPTagging_RequestType_value)
	proto.RegisterType((*IPTagging)(nil), "envoy.config.filter.http.ip_tagging.v2.IPTagging")
	proto.RegisterType((*IPTagging_IPTag)(nil), "envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto", fileDescriptor_f4275d0b367744d2)
}

var fileDescriptor_f4275d0b367744d2 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x4f, 0x8b, 0x13, 0x31,
	0x14, 0x37, 0xe3, 0x76, 0x9d, 0x66, 0x96, 0xa5, 0xe4, 0x62, 0x29, 0xb2, 0x96, 0x1e, 0xa4, 0x20,
	0x26, 0x30, 0x55, 0x7a, 0xf2, 0xe0, 0x48, 0xc1, 0x42, 0xa9, 0x65, 0x98, 0x83, 0x78, 0xb0, 0xc4,
	0x4e, 0x3a, 0x46, 0xda, 0x24, 0x26, 0xe9, 0xd0, 0xc1, 0x9b, 0x5f, 0x40, 0xf0, 0xe4, 0x47, 0xf4,
	0xec, 0xd1, 0x83, 0x48, 0x92, 0x51, 0x0b, 0x5e, 0xea, 0x2d, 0x2f, 0xef, 0xfd, 0xfe, 0xbd, 0x07,
	0xa7, 0x4c, 0xd4, 0xb2, 0x21, 0x1b, 0x29, 0xb6, 0xbc, 0x22, 0x5b, 0xbe, 0xb3, 0x4c, 0x93, 0x77,
	0xd6, 0x2a, 0xc2, 0xd5, 0xda, 0xd2, 0xaa, 0xe2, 0xa2, 0x22, 0x75, 0x7a, 0x52, 0x61, 0xa5, 0xa5,
	0x95, 0xe8, 0x81, 0x07, 0xe2, 0x00, 0xc4, 0x01, 0x88, 0x1d, 0x10, 0x9f, 0x8c, 0xd6, 0xe9, 0xe0,
	0x7e, 0x10, 0xa0, 0x8a, 0x3b, 0x9a, 0x8d, 0xd4, 0x8c, 0xd0, 0xb2, 0xd4, 0xcc, 0x98, 0x40, 0x34,
	0xb8, 0x39, 0x94, 0x8a, 0x12, 0x2a, 0x84, 0xb4, 0xd4, 0x72, 0x29, 0x0c, 0xd9, 0xf3, 0x4a, 0x53,
	0xcb, 0xda, 0xfe, 0xdd, 0x9a, 0xee, 0x78, 0x49, 0x2d, 0x23, 0xbf, 0x1f, 0xa1, 0x31, 0xfa, 0x16,
	0xc1, 0xee, 0x7c, 0x55, 0x04, 0x29, 0xf4, 0x1e, 0x5e, 0x69, 0xf6, 0xe1, 0xc0, 0x8c, 0x5d, 0xdb,
	0x46, 0xb1, 0x3e, 0x18, 0x82, 0xf1, 0x75, 0xfa, 0x14, 0x9f, 0x67, 0x13, 0xff, 0x21, 0xc2, 0x79,
	0x60, 0x29, 0x1a, 0xc5, 0xb2, 0xf8, 0x47, 0xd6, 0xf9, 0x04, 0xa2, 0x1e, 0xc8, 0x13, 0xfd, 0xf7,
	0x1b, 0xbd, 0x86, 0x77, 0x02, 0xda, 0xf4, 0x2f, 0x86, 0xb7, 0xc7, 0x49, 0x3a, 0xfd, 0x7f, 0x19,
	0xff, 0xf2, 0x02, 0x5f, 0x40, 0x14, 0x83, 0xfc, 0x92, 0xab, 0x82, 0x56, 0x66, 0xf0, 0x06, 0x76,
	0x7c, 0x0b, 0xdd, 0xc0, 0x24, 0x60, 0xd7, 0x82, 0xee, 0x43, 0x9e, 0x6e, 0xde, 0xf5, 0x53, 0x4b,
	0xba, 0x67, 0xe8, 0x89, 0x37, 0xb1, 0xe3, 0xc6, 0xf6, 0x23, 0x6f, 0xe2, 0x5e, 0x6b, 0x82, 0x2a,
	0xee, 0xa4, 0xdc, 0xaa, 0xf1, 0x73, 0x5e, 0xea, 0x9c, 0x8a, 0x8a, 0x39, 0xfe, 0x05, 0x37, 0x76,
	0x34, 0x81, 0xc9, 0x49, 0x42, 0x14, 0xc3, 0x8b, 0xec, 0x65, 0xf1, 0xa2, 0x77, 0x0b, 0x5d, 0xc1,
	0x78, 0xbe, 0x2c, 0x66, 0xf9, 0xf2, 0xd9, 0xa2, 0x07, 0x5c, 0x35, 0x7b, 0xd5, 0x56, 0x51, 0xf6,
	0xf1, 0xfb, 0xd7, 0x9f, 0x9f, 0x3b, 0x8f, 0xd0, 0xc3, 0xa0, 0xc0, 0x8e, 0x96, 0x09, 0xe3, 0x6e,
	0xd5, 0x46, 0x35, 0xff, 0x66, 0x9d, 0xc0, 0xc7, 0x5c, 0x06, 0x47, 0x4a, 0xcb, 0x63, 0x73, 0xe6,
	0x86, 0xb2, 0xeb, 0xb9, 0x6a, 0x57, 0xb4, 0x72, 0x57, 0x5e, 0x81, 0xb7, 0x97, 0xfe, 0xdc, 0x93,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x50, 0xf9, 0xa5, 0xfb, 0xab, 0x02, 0x00, 0x00,
}
