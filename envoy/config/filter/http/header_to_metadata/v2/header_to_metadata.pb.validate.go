// Code generated by protoc-gen-validate
// source: envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto
// DO NOT EDIT!!!

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Config) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRequestRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					Field:  fmt.Sprintf("RequestRules[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResponseRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					Field:  fmt.Sprintf("ResponseRules[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ConfigValidationError{}

// Validate checks the field values on Config_KeyValuePair with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Config_KeyValuePair) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MetadataNamespace

	if len(m.GetKey()) < 1 {
		return Config_KeyValuePairValidationError{
			Field:  "Key",
			Reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Value

	// no validation rules for Type

	return nil
}

// Config_KeyValuePairValidationError is the validation error returned by
// Config_KeyValuePair.Validate if the designated constraints aren't met.
type Config_KeyValuePairValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Config_KeyValuePairValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_KeyValuePair.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Config_KeyValuePairValidationError{}

// Validate checks the field values on Config_Rule with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Config_Rule) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetHeader()) < 1 {
		return Config_RuleValidationError{
			Field:  "Header",
			Reason: "value length must be at least 1 bytes",
		}
	}

	if v, ok := interface{}(m.GetOnHeaderPresent()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return Config_RuleValidationError{
				Field:  "OnHeaderPresent",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOnHeaderMissing()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return Config_RuleValidationError{
				Field:  "OnHeaderMissing",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	// no validation rules for Remove

	return nil
}

// Config_RuleValidationError is the validation error returned by
// Config_Rule.Validate if the designated constraints aren't met.
type Config_RuleValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Config_RuleValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_Rule.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Config_RuleValidationError{}
