// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: envoy/config/filter/http/health_check/v2/health_check.proto

package v2

import (
	fmt "fmt"
	route "github.com/envoyproxy/go-control-plane/envoy/api/v2/route"
	_type "github.com/envoyproxy/go-control-plane/envoy/type"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HealthCheck struct {
	// Specifies whether the filter operates in pass through mode or not.
	PassThroughMode *types.BoolValue `protobuf:"bytes,1,opt,name=pass_through_mode,json=passThroughMode,proto3" json:"pass_through_mode,omitempty"`
	// If operating in pass through mode, the amount of time in milliseconds
	// that the filter should cache the upstream response.
	CacheTime *time.Duration `protobuf:"bytes,3,opt,name=cache_time,json=cacheTime,proto3,stdduration" json:"cache_time,omitempty"`
	// If operating in non-pass-through mode, specifies a set of upstream cluster
	// names and the minimum percentage of servers in each of those clusters that
	// must be healthy or degraded in order for the filter to return a 200.
	ClusterMinHealthyPercentages map[string]*_type.Percent `protobuf:"bytes,4,rep,name=cluster_min_healthy_percentages,json=clusterMinHealthyPercentages,proto3" json:"cluster_min_healthy_percentages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specifies a set of health check request headers to match on. The health check filter will
	// check a requestâ€™s headers against all the specified headers. To specify the health check
	// endpoint, set the ``:path`` header to match on.
	Headers              []*route.HeaderMatcher `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_75439d7b4d98e201, []int{0}
}
func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetPassThroughMode() *types.BoolValue {
	if m != nil {
		return m.PassThroughMode
	}
	return nil
}

func (m *HealthCheck) GetCacheTime() *time.Duration {
	if m != nil {
		return m.CacheTime
	}
	return nil
}

func (m *HealthCheck) GetClusterMinHealthyPercentages() map[string]*_type.Percent {
	if m != nil {
		return m.ClusterMinHealthyPercentages
	}
	return nil
}

func (m *HealthCheck) GetHeaders() []*route.HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "envoy.config.filter.http.health_check.v2.HealthCheck")
	proto.RegisterMapType((map[string]*_type.Percent)(nil), "envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntry")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/health_check/v2/health_check.proto", fileDescriptor_75439d7b4d98e201)
}

var fileDescriptor_75439d7b4d98e201 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x8b, 0xd4, 0x30,
	0x14, 0x26, 0xf3, 0x43, 0x67, 0x33, 0x07, 0xc7, 0x2a, 0x58, 0x07, 0xe9, 0xee, 0x7a, 0x1a, 0x2f,
	0x09, 0x54, 0x10, 0x71, 0xc1, 0x43, 0x57, 0x61, 0x11, 0x06, 0x86, 0xb2, 0x28, 0x78, 0xa9, 0xd9,
	0xf6, 0x4d, 0x1b, 0xb6, 0xd3, 0x84, 0x34, 0xad, 0xf6, 0x5f, 0xf0, 0x2f, 0xf0, 0xe4, 0xdf, 0xe3,
	0xd1, 0xa3, 0x37, 0x65, 0xfe, 0x05, 0x6f, 0x9e, 0x24, 0x49, 0x07, 0x77, 0x59, 0x70, 0xf7, 0x52,
	0x5e, 0xf3, 0xbd, 0xef, 0x7b, 0x5f, 0xbe, 0x17, 0x7c, 0x04, 0x55, 0x2b, 0x3a, 0x9a, 0x8a, 0x6a,
	0xcd, 0x73, 0xba, 0xe6, 0xa5, 0x06, 0x45, 0x0b, 0xad, 0x25, 0x2d, 0x80, 0x95, 0xba, 0x48, 0xd2,
	0x02, 0xd2, 0x73, 0xda, 0x86, 0x97, 0xfe, 0x89, 0x54, 0x42, 0x0b, 0x6f, 0x61, 0xc9, 0xc4, 0x91,
	0x89, 0x23, 0x13, 0x43, 0x26, 0x97, 0x9a, 0xdb, 0x70, 0x1e, 0xe4, 0x42, 0xe4, 0x25, 0x50, 0xcb,
	0x3b, 0x6b, 0xd6, 0x34, 0x6b, 0x14, 0xd3, 0x5c, 0x54, 0x4e, 0xe9, 0x2a, 0xfe, 0x51, 0x31, 0x29,
	0x41, 0xd5, 0x3b, 0xdc, 0xd9, 0x64, 0x92, 0x1b, 0x2b, 0x4a, 0x34, 0x1a, 0xdc, 0xb7, 0xc7, 0x7d,
	0x87, 0xeb, 0x4e, 0x02, 0x95, 0xa0, 0x52, 0xa8, 0x74, 0x8f, 0x3c, 0x68, 0x59, 0xc9, 0x33, 0xa6,
	0x81, 0xee, 0x8a, 0x1e, 0xb8, 0x9f, 0x8b, 0x5c, 0xd8, 0x92, 0x9a, 0xca, 0x9d, 0x3e, 0xfe, 0x3d,
	0xc4, 0xd3, 0x13, 0x6b, 0xfe, 0xd8, 0x78, 0xf7, 0x56, 0xf8, 0xae, 0x64, 0x75, 0x9d, 0xe8, 0x42,
	0x89, 0x26, 0x2f, 0x92, 0x8d, 0xc8, 0xc0, 0x47, 0x07, 0x68, 0x31, 0x0d, 0xe7, 0xc4, 0x99, 0x26,
	0x3b, 0xd3, 0x24, 0x12, 0xa2, 0x7c, 0xcb, 0xca, 0x06, 0xa2, 0xc9, 0x9f, 0x68, 0xfc, 0x19, 0x0d,
	0x66, 0x28, 0xbe, 0x63, 0xe8, 0xa7, 0x8e, 0xbd, 0x14, 0x19, 0x78, 0x2f, 0x31, 0x4e, 0x59, 0x5a,
	0x40, 0xa2, 0xf9, 0x06, 0xfc, 0xa1, 0x95, 0x7a, 0x78, 0x45, 0xea, 0x55, 0x9f, 0x4f, 0x34, 0xfa,
	0xf2, 0x73, 0x1f, 0xc5, 0x7b, 0x96, 0x72, 0xca, 0x37, 0xe0, 0x7d, 0x45, 0x78, 0x3f, 0x2d, 0x9b,
	0x5a, 0x83, 0x4a, 0x36, 0xbc, 0x4a, 0x5c, 0xd4, 0x5d, 0xd2, 0x5f, 0x9b, 0xe5, 0x50, 0xfb, 0xa3,
	0x83, 0xe1, 0x62, 0x1a, 0xbe, 0x23, 0x37, 0xdd, 0x0f, 0xb9, 0x70, 0x65, 0x72, 0xec, 0xc4, 0x97,
	0xbc, 0x72, 0xa7, 0xdd, 0xea, 0x9f, 0xf2, 0xeb, 0x4a, 0xab, 0x2e, 0x7e, 0x94, 0xfe, 0xa7, 0xc5,
	0x3b, 0xc2, 0xb7, 0x0b, 0x60, 0x19, 0xa8, 0xda, 0x1f, 0x5b, 0x1f, 0x87, 0xbd, 0x0f, 0x26, 0xb9,
	0x99, 0xe5, 0xf6, 0x76, 0x62, 0x5b, 0x96, 0x4c, 0xa7, 0x05, 0xa8, 0x78, 0xc7, 0x98, 0x67, 0xf8,
	0xf0, 0xda, 0xf9, 0xde, 0x0c, 0x0f, 0xcf, 0xa1, 0xb3, 0x6b, 0xd8, 0x8b, 0x4d, 0xe9, 0x3d, 0xc1,
	0xe3, 0xd6, 0x04, 0xef, 0x0f, 0x6c, 0x9e, 0xf7, 0xfa, 0x89, 0xe6, 0x3d, 0x90, 0x9e, 0x1e, 0xbb,
	0x8e, 0x17, 0x83, 0xe7, 0xe8, 0xcd, 0x68, 0x32, 0x98, 0x0d, 0xe3, 0x09, 0x54, 0x99, 0x14, 0xbc,
	0xd2, 0xd1, 0x87, 0x6f, 0xdb, 0x00, 0x7d, 0xdf, 0x06, 0xe8, 0xc7, 0x36, 0x40, 0xbf, 0xb6, 0x01,
	0xc2, 0xcf, 0xb8, 0x70, 0x1a, 0x52, 0x89, 0x4f, 0xdd, 0x8d, 0x83, 0x8c, 0x66, 0x17, 0x92, 0x5c,
	0x99, 0x65, 0xae, 0xd0, 0xfb, 0x41, 0x1b, 0x9e, 0xdd, 0xb2, 0x9b, 0x7d, 0xfa, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xf9, 0xf0, 0x08, 0x70, 0x70, 0x03, 0x00, 0x00,
}

func (m *HealthCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PassThroughMode != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHealthCheck(dAtA, i, uint64(m.PassThroughMode.Size()))
		n1, err := m.PassThroughMode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CacheTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHealthCheck(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(*m.CacheTime)))
		n2, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.CacheTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ClusterMinHealthyPercentages) > 0 {
		keysForClusterMinHealthyPercentages := make([]string, 0, len(m.ClusterMinHealthyPercentages))
		for k, _ := range m.ClusterMinHealthyPercentages {
			keysForClusterMinHealthyPercentages = append(keysForClusterMinHealthyPercentages, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForClusterMinHealthyPercentages)
		for _, k := range keysForClusterMinHealthyPercentages {
			dAtA[i] = 0x22
			i++
			v := m.ClusterMinHealthyPercentages[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHealthCheck(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovHealthCheck(uint64(len(k))) + msgSize
			i = encodeVarintHealthCheck(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintHealthCheck(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHealthCheck(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.Headers) > 0 {
		for _, msg := range m.Headers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintHealthCheck(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintHealthCheck(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PassThroughMode != nil {
		l = m.PassThroughMode.Size()
		n += 1 + l + sovHealthCheck(uint64(l))
	}
	if m.CacheTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.CacheTime)
		n += 1 + l + sovHealthCheck(uint64(l))
	}
	if len(m.ClusterMinHealthyPercentages) > 0 {
		for k, v := range m.ClusterMinHealthyPercentages {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHealthCheck(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovHealthCheck(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovHealthCheck(uint64(mapEntrySize))
		}
	}
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovHealthCheck(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHealthCheck(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHealthCheck(x uint64) (n int) {
	return sovHealthCheck(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HealthCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthCheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassThroughMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthCheck
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PassThroughMode == nil {
				m.PassThroughMode = &types.BoolValue{}
			}
			if err := m.PassThroughMode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthCheck
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheTime == nil {
				m.CacheTime = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.CacheTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterMinHealthyPercentages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthCheck
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterMinHealthyPercentages == nil {
				m.ClusterMinHealthyPercentages = make(map[string]*_type.Percent)
			}
			var mapkey string
			var mapvalue *_type.Percent
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHealthCheck
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealthCheck
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHealthCheck
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthHealthCheck
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHealthCheck
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHealthCheck
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthHealthCheck
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &_type.Percent{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHealthCheck(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHealthCheck
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterMinHealthyPercentages[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthCheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthCheck
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthCheck
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &route.HeaderMatcher{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHealthCheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHealthCheck
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHealthCheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHealthCheck(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHealthCheck
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthCheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthCheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHealthCheck
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthHealthCheck
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHealthCheck
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHealthCheck(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthHealthCheck
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHealthCheck = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHealthCheck   = fmt.Errorf("proto: integer overflow")
)
