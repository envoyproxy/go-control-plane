// Code generated by protoc-gen-go.
// source: api/filter/http/rate_limit.proto
// DO NOT EDIT!

package http

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RateLimit struct {
	Domain      string                    `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Stage       uint32                    `protobuf:"varint,2,opt,name=stage" json:"stage,omitempty"`
	RequestType string                    `protobuf:"bytes,3,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
	Timeout     *google_protobuf.Duration `protobuf:"bytes,4,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RateLimit) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *RateLimit) GetStage() uint32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *RateLimit) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *RateLimit) GetTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func init() {
	proto.RegisterType((*RateLimit)(nil), "envoy.api.v2.filter.http.RateLimit")
}

func init() { proto.RegisterFile("api/filter/http/rate_limit.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8e, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x89, 0x7f, 0x2a, 0x4d, 0xf5, 0x12, 0x44, 0xa2, 0x07, 0x89, 0x9e, 0xf6, 0x34, 0x81,
	0xf6, 0x15, 0x3c, 0x7a, 0x0a, 0xde, 0x4b, 0x4a, 0xa7, 0xeb, 0xc0, 0xee, 0x4e, 0x4c, 0x27, 0x85,
	0x7d, 0x0c, 0xdf, 0xb8, 0x74, 0xb3, 0x3d, 0x7e, 0x33, 0xbf, 0xef, 0xe3, 0xa7, 0x5d, 0x4c, 0xe4,
	0x0f, 0xd4, 0x09, 0x66, 0xff, 0x2b, 0x92, 0x7c, 0x8e, 0x82, 0xdb, 0x8e, 0x7a, 0x12, 0x48, 0x99,
	0x85, 0x8d, 0xc5, 0xe1, 0xc4, 0x23, 0xc4, 0x44, 0x70, 0x5a, 0x43, 0x45, 0xe1, 0x82, 0xbe, 0xbd,
	0xb7, 0xcc, 0x6d, 0x87, 0x7e, 0xe2, 0x76, 0xe5, 0xe0, 0xf7, 0x25, 0x47, 0x21, 0x1e, 0x6a, 0xf3,
	0xf3, 0x5f, 0xe9, 0x65, 0x88, 0x82, 0xdf, 0x97, 0x35, 0xf3, 0xa2, 0x17, 0x7b, 0xee, 0x23, 0x0d,
	0x56, 0x39, 0xd5, 0x2c, 0xc3, 0x9c, 0xcc, 0xb3, 0xbe, 0x3f, 0x4a, 0x6c, 0xd1, 0xde, 0x38, 0xd5,
	0x3c, 0x85, 0x1a, 0xcc, 0x87, 0x7e, 0xcc, 0xf8, 0x57, 0xf0, 0x28, 0x5b, 0x19, 0x13, 0xda, 0xdb,
	0xa9, 0xb3, 0x9a, 0x6f, 0x3f, 0x63, 0x42, 0xb3, 0xd1, 0x0f, 0x42, 0x3d, 0x72, 0x11, 0x7b, 0xe7,
	0x54, 0xb3, 0x5a, 0xbf, 0x42, 0x15, 0x82, 0xab, 0x10, 0x7c, 0xcd, 0x42, 0xe1, 0x4a, 0xee, 0x16,
	0xd3, 0x6f, 0x73, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x59, 0x15, 0x39, 0xc8, 0xf8, 0x00, 0x00, 0x00,
}
