// Code generated by protoc-gen-go.
// source: api/filter/http/http_connection_manager.proto
// DO NOT EDIT!

package http

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v21 "github.com/envoyproxy/go-control-plane/api"
import envoy_api_v24 "github.com/envoyproxy/go-control-plane/api"
import envoy_api_v23 "github.com/envoyproxy/go-control-plane/api"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ComparisonFilter_Op int32

const (
	ComparisonFilter_EQ ComparisonFilter_Op = 0
	ComparisonFilter_GE ComparisonFilter_Op = 1
)

var ComparisonFilter_Op_name = map[int32]string{
	0: "EQ",
	1: "GE",
}
var ComparisonFilter_Op_value = map[string]int32{
	"EQ": 0,
	"GE": 1,
}

func (x ComparisonFilter_Op) String() string {
	return proto.EnumName(ComparisonFilter_Op_name, int32(x))
}
func (ComparisonFilter_Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1, 0} }

type HttpConnectionManager_CodecType int32

const (
	HttpConnectionManager_AUTO  HttpConnectionManager_CodecType = 0
	HttpConnectionManager_HTTP1 HttpConnectionManager_CodecType = 1
	HttpConnectionManager_HTTP2 HttpConnectionManager_CodecType = 2
)

var HttpConnectionManager_CodecType_name = map[int32]string{
	0: "AUTO",
	1: "HTTP1",
	2: "HTTP2",
}
var HttpConnectionManager_CodecType_value = map[string]int32{
	"AUTO":  0,
	"HTTP1": 1,
	"HTTP2": 2,
}

func (x HttpConnectionManager_CodecType) String() string {
	return proto.EnumName(HttpConnectionManager_CodecType_name, int32(x))
}
func (HttpConnectionManager_CodecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13, 0}
}

type HttpConnectionManager_ForwardClientCertDetails int32

const (
	HttpConnectionManager_SANITIZE            HttpConnectionManager_ForwardClientCertDetails = 0
	HttpConnectionManager_FORWARD_ONLY        HttpConnectionManager_ForwardClientCertDetails = 1
	HttpConnectionManager_APPEND_FORWARD      HttpConnectionManager_ForwardClientCertDetails = 2
	HttpConnectionManager_SANITIZE_SET        HttpConnectionManager_ForwardClientCertDetails = 3
	HttpConnectionManager_ALWAYS_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 4
)

var HttpConnectionManager_ForwardClientCertDetails_name = map[int32]string{
	0: "SANITIZE",
	1: "FORWARD_ONLY",
	2: "APPEND_FORWARD",
	3: "SANITIZE_SET",
	4: "ALWAYS_FORWARD_ONLY",
}
var HttpConnectionManager_ForwardClientCertDetails_value = map[string]int32{
	"SANITIZE":            0,
	"FORWARD_ONLY":        1,
	"APPEND_FORWARD":      2,
	"SANITIZE_SET":        3,
	"ALWAYS_FORWARD_ONLY": 4,
}

func (x HttpConnectionManager_ForwardClientCertDetails) String() string {
	return proto.EnumName(HttpConnectionManager_ForwardClientCertDetails_name, int32(x))
}
func (HttpConnectionManager_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13, 1}
}

type HttpConnectionManager_Tracing_OperationName int32

const (
	HttpConnectionManager_Tracing_INGRESS HttpConnectionManager_Tracing_OperationName = 0
	HttpConnectionManager_Tracing_EGRESS  HttpConnectionManager_Tracing_OperationName = 1
)

var HttpConnectionManager_Tracing_OperationName_name = map[int32]string{
	0: "INGRESS",
	1: "EGRESS",
}
var HttpConnectionManager_Tracing_OperationName_value = map[string]int32{
	"INGRESS": 0,
	"EGRESS":  1,
}

func (x HttpConnectionManager_Tracing_OperationName) String() string {
	return proto.EnumName(HttpConnectionManager_Tracing_OperationName_name, int32(x))
}
func (HttpConnectionManager_Tracing_OperationName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13, 0, 0}
}

type Rds struct {
	ConfigSource    *envoy_api_v21.ConfigSource `protobuf:"bytes,1,opt,name=config_source,json=configSource" json:"config_source,omitempty"`
	RouteConfigName string                      `protobuf:"bytes,2,opt,name=route_config_name,json=routeConfigName" json:"route_config_name,omitempty"`
}

func (m *Rds) Reset()                    { *m = Rds{} }
func (m *Rds) String() string            { return proto.CompactTextString(m) }
func (*Rds) ProtoMessage()               {}
func (*Rds) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Rds) GetConfigSource() *envoy_api_v21.ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (m *Rds) GetRouteConfigName() string {
	if m != nil {
		return m.RouteConfigName
	}
	return ""
}

type ComparisonFilter struct {
	Op    ComparisonFilter_Op          `protobuf:"varint,1,opt,name=op,enum=envoy.api.v2.filter.http.ComparisonFilter_Op" json:"op,omitempty"`
	Value *envoy_api_v21.RuntimeUInt32 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ComparisonFilter) Reset()                    { *m = ComparisonFilter{} }
func (m *ComparisonFilter) String() string            { return proto.CompactTextString(m) }
func (*ComparisonFilter) ProtoMessage()               {}
func (*ComparisonFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ComparisonFilter) GetOp() ComparisonFilter_Op {
	if m != nil {
		return m.Op
	}
	return ComparisonFilter_EQ
}

func (m *ComparisonFilter) GetValue() *envoy_api_v21.RuntimeUInt32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type StatusCodeFilter struct {
	Comparison *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison" json:"comparison,omitempty"`
}

func (m *StatusCodeFilter) Reset()                    { *m = StatusCodeFilter{} }
func (m *StatusCodeFilter) String() string            { return proto.CompactTextString(m) }
func (*StatusCodeFilter) ProtoMessage()               {}
func (*StatusCodeFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *StatusCodeFilter) GetComparison() *ComparisonFilter {
	if m != nil {
		return m.Comparison
	}
	return nil
}

type DurationFilter struct {
	Comparison *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison" json:"comparison,omitempty"`
}

func (m *DurationFilter) Reset()                    { *m = DurationFilter{} }
func (m *DurationFilter) String() string            { return proto.CompactTextString(m) }
func (*DurationFilter) ProtoMessage()               {}
func (*DurationFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DurationFilter) GetComparison() *ComparisonFilter {
	if m != nil {
		return m.Comparison
	}
	return nil
}

type NotHealthCheckFilter struct {
}

func (m *NotHealthCheckFilter) Reset()                    { *m = NotHealthCheckFilter{} }
func (m *NotHealthCheckFilter) String() string            { return proto.CompactTextString(m) }
func (*NotHealthCheckFilter) ProtoMessage()               {}
func (*NotHealthCheckFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type TraceableFilter struct {
}

func (m *TraceableFilter) Reset()                    { *m = TraceableFilter{} }
func (m *TraceableFilter) String() string            { return proto.CompactTextString(m) }
func (*TraceableFilter) ProtoMessage()               {}
func (*TraceableFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type RuntimeFilter struct {
	RuntimeKey string `protobuf:"bytes,1,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
}

func (m *RuntimeFilter) Reset()                    { *m = RuntimeFilter{} }
func (m *RuntimeFilter) String() string            { return proto.CompactTextString(m) }
func (*RuntimeFilter) ProtoMessage()               {}
func (*RuntimeFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *RuntimeFilter) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

type AndFilter struct {
	Filters []*AccessLogFilter `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
}

func (m *AndFilter) Reset()                    { *m = AndFilter{} }
func (m *AndFilter) String() string            { return proto.CompactTextString(m) }
func (*AndFilter) ProtoMessage()               {}
func (*AndFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *AndFilter) GetFilters() []*AccessLogFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type OrFilter struct {
	Filters []*AccessLogFilter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *OrFilter) Reset()                    { *m = OrFilter{} }
func (m *OrFilter) String() string            { return proto.CompactTextString(m) }
func (*OrFilter) ProtoMessage()               {}
func (*OrFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *OrFilter) GetFilters() []*AccessLogFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type AccessLogFilter struct {
	// Types that are valid to be assigned to FilterSpecifier:
	//	*AccessLogFilter_StatusCodeFilter
	//	*AccessLogFilter_DurationFilter
	//	*AccessLogFilter_NotHealthCheckFilter
	//	*AccessLogFilter_TraceableFilter
	//	*AccessLogFilter_RuntimeFilter
	//	*AccessLogFilter_AndFilter
	//	*AccessLogFilter_OrFilter
	FilterSpecifier isAccessLogFilter_FilterSpecifier `protobuf_oneof:"filter_specifier"`
}

func (m *AccessLogFilter) Reset()                    { *m = AccessLogFilter{} }
func (m *AccessLogFilter) String() string            { return proto.CompactTextString(m) }
func (*AccessLogFilter) ProtoMessage()               {}
func (*AccessLogFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

type isAccessLogFilter_FilterSpecifier interface {
	isAccessLogFilter_FilterSpecifier()
}

type AccessLogFilter_StatusCodeFilter struct {
	StatusCodeFilter *StatusCodeFilter `protobuf:"bytes,1,opt,name=status_code_filter,json=statusCodeFilter,oneof"`
}
type AccessLogFilter_DurationFilter struct {
	DurationFilter *DurationFilter `protobuf:"bytes,2,opt,name=duration_filter,json=durationFilter,oneof"`
}
type AccessLogFilter_NotHealthCheckFilter struct {
	NotHealthCheckFilter *NotHealthCheckFilter `protobuf:"bytes,3,opt,name=not_health_check_filter,json=notHealthCheckFilter,oneof"`
}
type AccessLogFilter_TraceableFilter struct {
	TraceableFilter *TraceableFilter `protobuf:"bytes,4,opt,name=traceable_filter,json=traceableFilter,oneof"`
}
type AccessLogFilter_RuntimeFilter struct {
	RuntimeFilter *RuntimeFilter `protobuf:"bytes,5,opt,name=runtime_filter,json=runtimeFilter,oneof"`
}
type AccessLogFilter_AndFilter struct {
	AndFilter *AndFilter `protobuf:"bytes,6,opt,name=and_filter,json=andFilter,oneof"`
}
type AccessLogFilter_OrFilter struct {
	OrFilter *OrFilter `protobuf:"bytes,7,opt,name=or_filter,json=orFilter,oneof"`
}

func (*AccessLogFilter_StatusCodeFilter) isAccessLogFilter_FilterSpecifier()     {}
func (*AccessLogFilter_DurationFilter) isAccessLogFilter_FilterSpecifier()       {}
func (*AccessLogFilter_NotHealthCheckFilter) isAccessLogFilter_FilterSpecifier() {}
func (*AccessLogFilter_TraceableFilter) isAccessLogFilter_FilterSpecifier()      {}
func (*AccessLogFilter_RuntimeFilter) isAccessLogFilter_FilterSpecifier()        {}
func (*AccessLogFilter_AndFilter) isAccessLogFilter_FilterSpecifier()            {}
func (*AccessLogFilter_OrFilter) isAccessLogFilter_FilterSpecifier()             {}

func (m *AccessLogFilter) GetFilterSpecifier() isAccessLogFilter_FilterSpecifier {
	if m != nil {
		return m.FilterSpecifier
	}
	return nil
}

func (m *AccessLogFilter) GetStatusCodeFilter() *StatusCodeFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_StatusCodeFilter); ok {
		return x.StatusCodeFilter
	}
	return nil
}

func (m *AccessLogFilter) GetDurationFilter() *DurationFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_DurationFilter); ok {
		return x.DurationFilter
	}
	return nil
}

func (m *AccessLogFilter) GetNotHealthCheckFilter() *NotHealthCheckFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_NotHealthCheckFilter); ok {
		return x.NotHealthCheckFilter
	}
	return nil
}

func (m *AccessLogFilter) GetTraceableFilter() *TraceableFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_TraceableFilter); ok {
		return x.TraceableFilter
	}
	return nil
}

func (m *AccessLogFilter) GetRuntimeFilter() *RuntimeFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_RuntimeFilter); ok {
		return x.RuntimeFilter
	}
	return nil
}

func (m *AccessLogFilter) GetAndFilter() *AndFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_AndFilter); ok {
		return x.AndFilter
	}
	return nil
}

func (m *AccessLogFilter) GetOrFilter() *OrFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_OrFilter); ok {
		return x.OrFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AccessLogFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AccessLogFilter_OneofMarshaler, _AccessLogFilter_OneofUnmarshaler, _AccessLogFilter_OneofSizer, []interface{}{
		(*AccessLogFilter_StatusCodeFilter)(nil),
		(*AccessLogFilter_DurationFilter)(nil),
		(*AccessLogFilter_NotHealthCheckFilter)(nil),
		(*AccessLogFilter_TraceableFilter)(nil),
		(*AccessLogFilter_RuntimeFilter)(nil),
		(*AccessLogFilter_AndFilter)(nil),
		(*AccessLogFilter_OrFilter)(nil),
	}
}

func _AccessLogFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AccessLogFilter)
	// filter_specifier
	switch x := m.FilterSpecifier.(type) {
	case *AccessLogFilter_StatusCodeFilter:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatusCodeFilter); err != nil {
			return err
		}
	case *AccessLogFilter_DurationFilter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DurationFilter); err != nil {
			return err
		}
	case *AccessLogFilter_NotHealthCheckFilter:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotHealthCheckFilter); err != nil {
			return err
		}
	case *AccessLogFilter_TraceableFilter:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TraceableFilter); err != nil {
			return err
		}
	case *AccessLogFilter_RuntimeFilter:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuntimeFilter); err != nil {
			return err
		}
	case *AccessLogFilter_AndFilter:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AndFilter); err != nil {
			return err
		}
	case *AccessLogFilter_OrFilter:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AccessLogFilter.FilterSpecifier has unexpected type %T", x)
	}
	return nil
}

func _AccessLogFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AccessLogFilter)
	switch tag {
	case 1: // filter_specifier.status_code_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatusCodeFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_StatusCodeFilter{msg}
		return true, err
	case 2: // filter_specifier.duration_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DurationFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_DurationFilter{msg}
		return true, err
	case 3: // filter_specifier.not_health_check_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotHealthCheckFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_NotHealthCheckFilter{msg}
		return true, err
	case 4: // filter_specifier.traceable_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraceableFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_TraceableFilter{msg}
		return true, err
	case 5: // filter_specifier.runtime_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RuntimeFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_RuntimeFilter{msg}
		return true, err
	case 6: // filter_specifier.and_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AndFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_AndFilter{msg}
		return true, err
	case 7: // filter_specifier.or_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_OrFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AccessLogFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AccessLogFilter)
	// filter_specifier
	switch x := m.FilterSpecifier.(type) {
	case *AccessLogFilter_StatusCodeFilter:
		s := proto.Size(x.StatusCodeFilter)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_DurationFilter:
		s := proto.Size(x.DurationFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_NotHealthCheckFilter:
		s := proto.Size(x.NotHealthCheckFilter)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_TraceableFilter:
		s := proto.Size(x.TraceableFilter)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_RuntimeFilter:
		s := proto.Size(x.RuntimeFilter)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_AndFilter:
		s := proto.Size(x.AndFilter)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_OrFilter:
		s := proto.Size(x.OrFilter)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FileAccessLog struct {
	Path   string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
}

func (m *FileAccessLog) Reset()                    { *m = FileAccessLog{} }
func (m *FileAccessLog) String() string            { return proto.CompactTextString(m) }
func (*FileAccessLog) ProtoMessage()               {}
func (*FileAccessLog) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *FileAccessLog) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileAccessLog) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type AccessLog struct {
	Name   string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Filter *AccessLogFilter         `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	Config *google_protobuf2.Struct `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *AccessLog) Reset()                    { *m = AccessLog{} }
func (m *AccessLog) String() string            { return proto.CompactTextString(m) }
func (*AccessLog) ProtoMessage()               {}
func (*AccessLog) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *AccessLog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessLog) GetFilter() *AccessLogFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *AccessLog) GetConfig() *google_protobuf2.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

type HttpFilter struct {
	Name         string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Config       *google_protobuf2.Struct `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	DeprecatedV1 *HttpFilter_DeprecatedV1 `protobuf:"bytes,3,opt,name=deprecated_v1,json=deprecatedV1" json:"deprecated_v1,omitempty"`
}

func (m *HttpFilter) Reset()                    { *m = HttpFilter{} }
func (m *HttpFilter) String() string            { return proto.CompactTextString(m) }
func (*HttpFilter) ProtoMessage()               {}
func (*HttpFilter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *HttpFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HttpFilter) GetConfig() *google_protobuf2.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *HttpFilter) GetDeprecatedV1() *HttpFilter_DeprecatedV1 {
	if m != nil {
		return m.DeprecatedV1
	}
	return nil
}

type HttpFilter_DeprecatedV1 struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *HttpFilter_DeprecatedV1) Reset()                    { *m = HttpFilter_DeprecatedV1{} }
func (m *HttpFilter_DeprecatedV1) String() string            { return proto.CompactTextString(m) }
func (*HttpFilter_DeprecatedV1) ProtoMessage()               {}
func (*HttpFilter_DeprecatedV1) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12, 0} }

func (m *HttpFilter_DeprecatedV1) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type HttpConnectionManager struct {
	CodecType  HttpConnectionManager_CodecType `protobuf:"varint,1,opt,name=codec_type,json=codecType,enum=envoy.api.v2.filter.http.HttpConnectionManager_CodecType" json:"codec_type,omitempty"`
	StatPrefix string                          `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix" json:"stat_prefix,omitempty"`
	// Types that are valid to be assigned to RouteSpecifier:
	//	*HttpConnectionManager_Rds
	//	*HttpConnectionManager_RouteConfig
	RouteSpecifier              isHttpConnectionManager_RouteSpecifier             `protobuf_oneof:"route_specifier"`
	HttpFilters                 []*HttpFilter                                      `protobuf:"bytes,5,rep,name=http_filters,json=httpFilters" json:"http_filters,omitempty"`
	AddUserAgent                *google_protobuf1.BoolValue                        `protobuf:"bytes,6,opt,name=add_user_agent,json=addUserAgent" json:"add_user_agent,omitempty"`
	Tracing                     *HttpConnectionManager_Tracing                     `protobuf:"bytes,7,opt,name=tracing" json:"tracing,omitempty"`
	HttpProtocolOptions         *envoy_api_v24.Http1ProtocolOptions                `protobuf:"bytes,8,opt,name=http_protocol_options,json=httpProtocolOptions" json:"http_protocol_options,omitempty"`
	Http2ProtocolOptions        *envoy_api_v24.Http2ProtocolOptions                `protobuf:"bytes,9,opt,name=http2_protocol_options,json=http2ProtocolOptions" json:"http2_protocol_options,omitempty"`
	ServerName                  string                                             `protobuf:"bytes,10,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	IdleTimeout                 *google_protobuf.Duration                          `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	DrainTimeout                *google_protobuf.Duration                          `protobuf:"bytes,12,opt,name=drain_timeout,json=drainTimeout" json:"drain_timeout,omitempty"`
	AccessLog                   []*AccessLog                                       `protobuf:"bytes,13,rep,name=access_log,json=accessLog" json:"access_log,omitempty"`
	UseRemoteAddress            *google_protobuf1.BoolValue                        `protobuf:"bytes,14,opt,name=use_remote_address,json=useRemoteAddress" json:"use_remote_address,omitempty"`
	GenerateRequestId           *google_protobuf1.BoolValue                        `protobuf:"bytes,15,opt,name=generate_request_id,json=generateRequestId" json:"generate_request_id,omitempty"`
	ForwardClientCertDetails    HttpConnectionManager_ForwardClientCertDetails     `protobuf:"varint,16,opt,name=forward_client_cert_details,json=forwardClientCertDetails,enum=envoy.api.v2.filter.http.HttpConnectionManager_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	SetCurrentClientCertDetails *HttpConnectionManager_SetCurrentClientCertDetails `protobuf:"bytes,17,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails" json:"set_current_client_cert_details,omitempty"`
}

func (m *HttpConnectionManager) Reset()                    { *m = HttpConnectionManager{} }
func (m *HttpConnectionManager) String() string            { return proto.CompactTextString(m) }
func (*HttpConnectionManager) ProtoMessage()               {}
func (*HttpConnectionManager) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

type isHttpConnectionManager_RouteSpecifier interface {
	isHttpConnectionManager_RouteSpecifier()
}

type HttpConnectionManager_Rds struct {
	Rds *Rds `protobuf:"bytes,3,opt,name=rds,oneof"`
}
type HttpConnectionManager_RouteConfig struct {
	RouteConfig *envoy_api_v23.RouteConfiguration `protobuf:"bytes,4,opt,name=route_config,json=routeConfig,oneof"`
}

func (*HttpConnectionManager_Rds) isHttpConnectionManager_RouteSpecifier()         {}
func (*HttpConnectionManager_RouteConfig) isHttpConnectionManager_RouteSpecifier() {}

func (m *HttpConnectionManager) GetRouteSpecifier() isHttpConnectionManager_RouteSpecifier {
	if m != nil {
		return m.RouteSpecifier
	}
	return nil
}

func (m *HttpConnectionManager) GetCodecType() HttpConnectionManager_CodecType {
	if m != nil {
		return m.CodecType
	}
	return HttpConnectionManager_AUTO
}

func (m *HttpConnectionManager) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *HttpConnectionManager) GetRds() *Rds {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_Rds); ok {
		return x.Rds
	}
	return nil
}

func (m *HttpConnectionManager) GetRouteConfig() *envoy_api_v23.RouteConfiguration {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_RouteConfig); ok {
		return x.RouteConfig
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpFilters() []*HttpFilter {
	if m != nil {
		return m.HttpFilters
	}
	return nil
}

func (m *HttpConnectionManager) GetAddUserAgent() *google_protobuf1.BoolValue {
	if m != nil {
		return m.AddUserAgent
	}
	return nil
}

func (m *HttpConnectionManager) GetTracing() *HttpConnectionManager_Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpProtocolOptions() *envoy_api_v24.Http1ProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetHttp2ProtocolOptions() *envoy_api_v24.Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HttpConnectionManager) GetIdleTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetDrainTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.DrainTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetAccessLog() []*AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *HttpConnectionManager) GetUseRemoteAddress() *google_protobuf1.BoolValue {
	if m != nil {
		return m.UseRemoteAddress
	}
	return nil
}

func (m *HttpConnectionManager) GetGenerateRequestId() *google_protobuf1.BoolValue {
	if m != nil {
		return m.GenerateRequestId
	}
	return nil
}

func (m *HttpConnectionManager) GetForwardClientCertDetails() HttpConnectionManager_ForwardClientCertDetails {
	if m != nil {
		return m.ForwardClientCertDetails
	}
	return HttpConnectionManager_SANITIZE
}

func (m *HttpConnectionManager) GetSetCurrentClientCertDetails() *HttpConnectionManager_SetCurrentClientCertDetails {
	if m != nil {
		return m.SetCurrentClientCertDetails
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpConnectionManager) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpConnectionManager_OneofMarshaler, _HttpConnectionManager_OneofUnmarshaler, _HttpConnectionManager_OneofSizer, []interface{}{
		(*HttpConnectionManager_Rds)(nil),
		(*HttpConnectionManager_RouteConfig)(nil),
	}
}

func _HttpConnectionManager_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpConnectionManager)
	// route_specifier
	switch x := m.RouteSpecifier.(type) {
	case *HttpConnectionManager_Rds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rds); err != nil {
			return err
		}
	case *HttpConnectionManager_RouteConfig:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RouteConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HttpConnectionManager.RouteSpecifier has unexpected type %T", x)
	}
	return nil
}

func _HttpConnectionManager_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpConnectionManager)
	switch tag {
	case 3: // route_specifier.rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rds)
		err := b.DecodeMessage(msg)
		m.RouteSpecifier = &HttpConnectionManager_Rds{msg}
		return true, err
	case 4: // route_specifier.route_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(envoy_api_v23.RouteConfiguration)
		err := b.DecodeMessage(msg)
		m.RouteSpecifier = &HttpConnectionManager_RouteConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HttpConnectionManager_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpConnectionManager)
	// route_specifier
	switch x := m.RouteSpecifier.(type) {
	case *HttpConnectionManager_Rds:
		s := proto.Size(x.Rds)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpConnectionManager_RouteConfig:
		s := proto.Size(x.RouteConfig)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HttpConnectionManager_Tracing struct {
	OperationName         HttpConnectionManager_Tracing_OperationName `protobuf:"varint,1,opt,name=operation_name,json=operationName,enum=envoy.api.v2.filter.http.HttpConnectionManager_Tracing_OperationName" json:"operation_name,omitempty"`
	RequestHeadersForTags []string                                    `protobuf:"bytes,2,rep,name=request_headers_for_tags,json=requestHeadersForTags" json:"request_headers_for_tags,omitempty"`
}

func (m *HttpConnectionManager_Tracing) Reset()         { *m = HttpConnectionManager_Tracing{} }
func (m *HttpConnectionManager_Tracing) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager_Tracing) ProtoMessage()    {}
func (*HttpConnectionManager_Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13, 0}
}

func (m *HttpConnectionManager_Tracing) GetOperationName() HttpConnectionManager_Tracing_OperationName {
	if m != nil {
		return m.OperationName
	}
	return HttpConnectionManager_Tracing_INGRESS
}

func (m *HttpConnectionManager_Tracing) GetRequestHeadersForTags() []string {
	if m != nil {
		return m.RequestHeadersForTags
	}
	return nil
}

type HttpConnectionManager_SetCurrentClientCertDetails struct {
	Subject *google_protobuf1.BoolValue `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	San     *google_protobuf1.BoolValue `protobuf:"bytes,2,opt,name=san" json:"san,omitempty"`
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) Reset() {
	*m = HttpConnectionManager_SetCurrentClientCertDetails{}
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) String() string {
	return proto.CompactTextString(m)
}
func (*HttpConnectionManager_SetCurrentClientCertDetails) ProtoMessage() {}
func (*HttpConnectionManager_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{13, 1}
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSubject() *google_protobuf1.BoolValue {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSan() *google_protobuf1.BoolValue {
	if m != nil {
		return m.San
	}
	return nil
}

func init() {
	proto.RegisterType((*Rds)(nil), "envoy.api.v2.filter.http.Rds")
	proto.RegisterType((*ComparisonFilter)(nil), "envoy.api.v2.filter.http.ComparisonFilter")
	proto.RegisterType((*StatusCodeFilter)(nil), "envoy.api.v2.filter.http.StatusCodeFilter")
	proto.RegisterType((*DurationFilter)(nil), "envoy.api.v2.filter.http.DurationFilter")
	proto.RegisterType((*NotHealthCheckFilter)(nil), "envoy.api.v2.filter.http.NotHealthCheckFilter")
	proto.RegisterType((*TraceableFilter)(nil), "envoy.api.v2.filter.http.TraceableFilter")
	proto.RegisterType((*RuntimeFilter)(nil), "envoy.api.v2.filter.http.RuntimeFilter")
	proto.RegisterType((*AndFilter)(nil), "envoy.api.v2.filter.http.AndFilter")
	proto.RegisterType((*OrFilter)(nil), "envoy.api.v2.filter.http.OrFilter")
	proto.RegisterType((*AccessLogFilter)(nil), "envoy.api.v2.filter.http.AccessLogFilter")
	proto.RegisterType((*FileAccessLog)(nil), "envoy.api.v2.filter.http.FileAccessLog")
	proto.RegisterType((*AccessLog)(nil), "envoy.api.v2.filter.http.AccessLog")
	proto.RegisterType((*HttpFilter)(nil), "envoy.api.v2.filter.http.HttpFilter")
	proto.RegisterType((*HttpFilter_DeprecatedV1)(nil), "envoy.api.v2.filter.http.HttpFilter.DeprecatedV1")
	proto.RegisterType((*HttpConnectionManager)(nil), "envoy.api.v2.filter.http.HttpConnectionManager")
	proto.RegisterType((*HttpConnectionManager_Tracing)(nil), "envoy.api.v2.filter.http.HttpConnectionManager.Tracing")
	proto.RegisterType((*HttpConnectionManager_SetCurrentClientCertDetails)(nil), "envoy.api.v2.filter.http.HttpConnectionManager.SetCurrentClientCertDetails")
	proto.RegisterEnum("envoy.api.v2.filter.http.ComparisonFilter_Op", ComparisonFilter_Op_name, ComparisonFilter_Op_value)
	proto.RegisterEnum("envoy.api.v2.filter.http.HttpConnectionManager_CodecType", HttpConnectionManager_CodecType_name, HttpConnectionManager_CodecType_value)
	proto.RegisterEnum("envoy.api.v2.filter.http.HttpConnectionManager_ForwardClientCertDetails", HttpConnectionManager_ForwardClientCertDetails_name, HttpConnectionManager_ForwardClientCertDetails_value)
	proto.RegisterEnum("envoy.api.v2.filter.http.HttpConnectionManager_Tracing_OperationName", HttpConnectionManager_Tracing_OperationName_name, HttpConnectionManager_Tracing_OperationName_value)
}

func init() { proto.RegisterFile("api/filter/http/http_connection_manager.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5b, 0x6f, 0x1b, 0xb9,
	0x15, 0x96, 0x64, 0x5b, 0xb6, 0x8e, 0x2e, 0x1e, 0x33, 0x4e, 0xa2, 0xda, 0x6d, 0x63, 0x4c, 0x0a,
	0xd4, 0x4d, 0x9b, 0x71, 0xad, 0x14, 0x08, 0x8a, 0x5e, 0x65, 0x59, 0x8e, 0x9c, 0xa4, 0x96, 0x43,
	0x29, 0xce, 0x05, 0x45, 0x09, 0x7a, 0x86, 0x92, 0xa6, 0x91, 0x87, 0x53, 0x92, 0x72, 0xea, 0xc7,
	0x3e, 0xf5, 0x79, 0xb1, 0x6f, 0xfb, 0x9f, 0x16, 0xfb, 0xbe, 0x3f, 0x63, 0x7f, 0xc1, 0x82, 0x1c,
	0x8e, 0x6c, 0xc9, 0x96, 0x2f, 0x01, 0xf6, 0xc5, 0xe6, 0x1c, 0x9e, 0xef, 0xe3, 0xe1, 0xe1, 0xc7,
	0x73, 0x28, 0x78, 0x4a, 0xe3, 0x70, 0xab, 0x17, 0x0e, 0x15, 0x13, 0x5b, 0x03, 0xa5, 0x62, 0xf3,
	0x87, 0xf8, 0x3c, 0x8a, 0x98, 0xaf, 0x42, 0x1e, 0x91, 0x13, 0x1a, 0xd1, 0x3e, 0x13, 0x5e, 0x2c,
	0xb8, 0xe2, 0xa8, 0xca, 0xa2, 0x53, 0x7e, 0xe6, 0xd1, 0x38, 0xf4, 0x4e, 0x6b, 0x5e, 0x82, 0xf3,
	0x34, 0x64, 0xad, 0xa2, 0x89, 0x8e, 0xa9, 0x64, 0x89, 0xe7, 0x1a, 0xd2, 0xdf, 0x66, 0xe8, 0xf3,
	0xa1, 0xb5, 0x95, 0xb5, 0x4d, 0x04, 0xd2, 0x7e, 0xfe, 0xb2, 0xcf, 0x79, 0x7f, 0xc8, 0x12, 0xaf,
	0xe3, 0x51, 0x6f, 0x2b, 0x18, 0x09, 0xaa, 0x17, 0xb5, 0xf3, 0x3f, 0x9f, 0x9e, 0x97, 0x4a, 0x8c,
	0x7c, 0x35, 0x0b, 0xfd, 0x59, 0xd0, 0x38, 0x66, 0xc2, 0xb2, 0xbb, 0x02, 0xe6, 0x70, 0x20, 0xd1,
	0xdf, 0xa0, 0xec, 0xf3, 0xa8, 0x17, 0xf6, 0x89, 0xe4, 0x23, 0xe1, 0xb3, 0x6a, 0x76, 0x23, 0xbb,
	0x59, 0xac, 0xad, 0x79, 0x13, 0x3b, 0x69, 0x18, 0x97, 0x8e, 0xf1, 0xc0, 0x25, 0xff, 0xc2, 0x17,
	0x7a, 0x02, 0x2b, 0x82, 0x8f, 0x14, 0x23, 0x96, 0x26, 0xa2, 0x27, 0xac, 0x9a, 0xdb, 0xc8, 0x6e,
	0x16, 0xf0, 0xb2, 0x99, 0x48, 0xb0, 0x07, 0xf4, 0x84, 0xb9, 0xdf, 0x64, 0xc1, 0x69, 0xf0, 0x93,
	0x98, 0x8a, 0x50, 0xf2, 0x68, 0xcf, 0xa4, 0x07, 0xfd, 0x05, 0x72, 0x3c, 0x36, 0xcb, 0x56, 0x6a,
	0x4f, 0xbd, 0x59, 0x09, 0xf4, 0xa6, 0x71, 0x5e, 0x3b, 0xc6, 0x39, 0x1e, 0xa3, 0x6d, 0x58, 0x38,
	0xa5, 0xc3, 0x51, 0xb2, 0x66, 0xb1, 0xb6, 0x3e, 0xc9, 0x80, 0x47, 0x91, 0x0a, 0x4f, 0xd8, 0xdb,
	0xfd, 0x48, 0x3d, 0xab, 0xe1, 0xc4, 0xd3, 0x5d, 0x85, 0x5c, 0x3b, 0x46, 0x79, 0xc8, 0x35, 0xdf,
	0x38, 0x19, 0xfd, 0xff, 0x45, 0xd3, 0xc9, 0xba, 0xff, 0x02, 0xa7, 0xa3, 0xa8, 0x1a, 0xc9, 0x06,
	0x0f, 0x98, 0x8d, 0xed, 0x25, 0x80, 0x3f, 0x5e, 0xd7, 0xa6, 0xe6, 0xc9, 0xed, 0x63, 0xc4, 0x17,
	0xd0, 0xee, 0x3f, 0xa1, 0xb2, 0x6b, 0x0f, 0xf0, 0x27, 0x60, 0x7f, 0x00, 0xab, 0x07, 0x5c, 0xb5,
	0x18, 0x1d, 0xaa, 0x41, 0x63, 0xc0, 0xfc, 0x4f, 0x89, 0x8f, 0xbb, 0x02, 0xcb, 0x5d, 0x41, 0x7d,
	0x46, 0x8f, 0x87, 0x76, 0x53, 0xee, 0xef, 0xa1, 0x6c, 0xd3, 0x62, 0xe3, 0x78, 0x04, 0x45, 0x91,
	0x18, 0xc8, 0x27, 0x76, 0x66, 0x02, 0x29, 0x60, 0xb0, 0xa6, 0x57, 0xec, 0xcc, 0x3d, 0x84, 0x42,
	0x3d, 0x0a, 0xac, 0x77, 0x03, 0x16, 0x93, 0xa8, 0x64, 0x35, 0xbb, 0x31, 0xb7, 0x59, 0xac, 0xfd,
	0x66, 0x76, 0xc8, 0x75, 0xdf, 0x67, 0x52, 0xbe, 0xe6, 0x7d, 0x1b, 0x71, 0x8a, 0x74, 0xdb, 0xb0,
	0xd4, 0x16, 0x97, 0x09, 0x73, 0x5f, 0x4c, 0xf8, 0xc3, 0x3c, 0x2c, 0x4f, 0x4d, 0xa2, 0x8f, 0x80,
	0xa4, 0x39, 0x51, 0xe2, 0xf3, 0x80, 0x91, 0xc4, 0xf5, 0xe6, 0x3c, 0x4f, 0xab, 0xa0, 0x95, 0xc1,
	0x8e, 0x9c, 0x56, 0x46, 0x07, 0x96, 0xd3, 0xeb, 0x98, 0x12, 0x27, 0x02, 0xdc, 0x9c, 0x4d, 0x3c,
	0x79, 0xfc, 0xad, 0x0c, 0xae, 0x04, 0x93, 0x82, 0xe8, 0xc3, 0xc3, 0x88, 0x2b, 0x32, 0x30, 0xa7,
	0x48, 0x7c, 0x7d, 0x8c, 0x29, 0xf9, 0x9c, 0x21, 0xf7, 0x66, 0x93, 0x5f, 0x75, 0xfa, 0xad, 0x0c,
	0x5e, 0x8d, 0xae, 0xb0, 0xa3, 0x23, 0x70, 0x54, 0xaa, 0x8a, 0x74, 0x85, 0x79, 0xb3, 0xc2, 0x35,
	0xb9, 0x9f, 0xd2, 0x51, 0x2b, 0x83, 0x97, 0xd5, 0xa4, 0x09, 0x1d, 0x42, 0x25, 0x55, 0x92, 0x65,
	0x5d, 0x30, 0xac, 0xbf, 0x9e, 0xcd, 0x3a, 0x21, 0xc5, 0x56, 0x06, 0x97, 0xc5, 0x84, 0x36, 0x77,
	0x01, 0x68, 0x14, 0xa4, 0x6c, 0x79, 0xc3, 0xf6, 0xf8, 0x1a, 0x7d, 0xa4, 0x32, 0x6d, 0x65, 0x70,
	0x81, 0x8e, 0x35, 0x5b, 0x87, 0x02, 0x17, 0x29, 0xc9, 0xa2, 0x21, 0x71, 0x67, 0x93, 0xa4, 0xca,
	0x6c, 0x65, 0xf0, 0x12, 0xb7, 0xe3, 0x1d, 0x04, 0x4e, 0xe2, 0x43, 0x64, 0xcc, 0xfc, 0xb0, 0x17,
	0x32, 0xe1, 0xfe, 0x09, 0xca, 0x7b, 0xe1, 0x90, 0x8d, 0x75, 0x87, 0x10, 0xcc, 0xc7, 0x54, 0x0d,
	0xec, 0x15, 0x32, 0x63, 0xf4, 0x00, 0xf2, 0x3d, 0x2e, 0x4e, 0xa8, 0xb2, 0x55, 0xd1, 0x7e, 0xb9,
	0x5f, 0x67, 0xa1, 0x30, 0x81, 0x34, 0x95, 0xd3, 0x22, 0xf5, 0x18, 0xd5, 0x21, 0x3f, 0x21, 0xad,
	0x3b, 0xdc, 0x0b, 0x0b, 0x44, 0x5b, 0x90, 0x4f, 0xea, 0xb2, 0x15, 0xd0, 0x43, 0x2f, 0x69, 0x0b,
	0x5e, 0xda, 0x16, 0xbc, 0x8e, 0x69, 0x1a, 0xd8, 0xba, 0xb9, 0xdf, 0x66, 0x01, 0x5a, 0x4a, 0xc5,
	0x36, 0x71, 0x57, 0x85, 0x75, 0xce, 0x99, 0xbb, 0x15, 0x27, 0x3a, 0x82, 0x72, 0xc0, 0x62, 0xc1,
	0x7c, 0xaa, 0x58, 0x40, 0x4e, 0xb7, 0x6d, 0x2c, 0xdb, 0xb3, 0xb7, 0x73, 0x1e, 0x81, 0xb7, 0x3b,
	0x46, 0x1e, 0x6d, 0xe3, 0x52, 0x70, 0xe1, 0x6b, 0xcd, 0x85, 0xd2, 0xc5, 0x59, 0x1d, 0xac, 0x3a,
	0x8b, 0xc7, 0xc1, 0xea, 0xb1, 0xfb, 0x5d, 0x05, 0xee, 0x6b, 0xb6, 0xc6, 0xb8, 0x65, 0xff, 0x23,
	0xe9, 0xd8, 0xe8, 0xbd, 0xae, 0xbe, 0x01, 0xf3, 0xc9, 0x18, 0x53, 0xa9, 0xfd, 0xf1, 0xfa, 0x90,
	0x2e, 0x91, 0x78, 0xba, 0x22, 0xf8, 0xdd, 0xb3, 0x98, 0xe1, 0x82, 0x9f, 0x0e, 0x75, 0x3d, 0xd5,
	0xf5, 0x82, 0xc4, 0x82, 0xf5, 0xc2, 0xff, 0xda, 0x63, 0x07, 0x6d, 0x3a, 0x34, 0x16, 0xb4, 0x0d,
	0x73, 0x22, 0x90, 0x36, 0x0d, 0xbf, 0xb8, 0xe6, 0x6e, 0x04, 0xb2, 0x95, 0xc1, 0xda, 0x17, 0x35,
	0xa1, 0x74, 0xb1, 0xcd, 0xda, 0xdb, 0xba, 0x31, 0xd5, 0xed, 0xce, 0xfb, 0xad, 0x2d, 0x2c, 0xad,
	0x0c, 0x2e, 0x5e, 0xe8, 0xc2, 0xe8, 0x05, 0x94, 0xcc, 0x0b, 0x26, 0x2d, 0xb8, 0x0b, 0xa6, 0xe0,
	0xfe, 0xea, 0x36, 0x27, 0x81, 0x8b, 0x83, 0xf1, 0x58, 0xa2, 0xbf, 0x43, 0x85, 0x06, 0x01, 0x19,
	0x49, 0x26, 0x08, 0xed, 0xb3, 0x48, 0xd9, 0xbb, 0xb9, 0x76, 0x49, 0x0c, 0x3b, 0x9c, 0x0f, 0x8f,
	0x74, 0xdf, 0xc5, 0x25, 0x1a, 0x04, 0x6f, 0x25, 0x13, 0x75, 0xed, 0x8f, 0xde, 0xc0, 0xa2, 0x2e,
	0x1f, 0x61, 0xd4, 0xb7, 0x37, 0xf2, 0xf9, 0x5d, 0x93, 0xdf, 0x4d, 0xe0, 0x38, 0xe5, 0x41, 0x47,
	0x70, 0xdf, 0xec, 0x2e, 0x7d, 0x57, 0x11, 0x1e, 0x6b, 0x7f, 0x59, 0x5d, 0xba, 0xea, 0xca, 0x6b,
	0xd2, 0xed, 0x43, 0xeb, 0xda, 0x4e, 0x3c, 0xf1, 0x3d, 0x4d, 0x30, 0x65, 0x44, 0xef, 0xe1, 0x81,
	0x36, 0xd7, 0x2e, 0x13, 0x17, 0x66, 0x11, 0xd7, 0xa6, 0x89, 0x57, 0x07, 0x57, 0x58, 0x8d, 0x54,
	0x98, 0x38, 0x65, 0x22, 0x79, 0x37, 0x81, 0x95, 0x8a, 0x31, 0xe9, 0x27, 0x13, 0xfa, 0x33, 0x94,
	0xc2, 0x60, 0xc8, 0x88, 0x2e, 0x89, 0x7c, 0xa4, 0xaa, 0x45, 0xb3, 0xe0, 0xcf, 0x2e, 0x65, 0x39,
	0xed, 0x2d, 0xb8, 0xa8, 0xdd, 0xbb, 0x89, 0x37, 0xfa, 0x2b, 0x94, 0x03, 0x41, 0xc3, 0x68, 0x0c,
	0x2f, 0xdd, 0x04, 0x2f, 0x19, 0xff, 0x14, 0xbf, 0x03, 0x40, 0x4d, 0x65, 0x21, 0x43, 0xde, 0xaf,
	0x96, 0x8d, 0x58, 0x1e, 0xdf, 0xa2, 0x0a, 0xe1, 0x02, 0x1d, 0x57, 0xb6, 0x16, 0xa0, 0x91, 0x64,
	0x44, 0xb0, 0x13, 0xae, 0x18, 0xa1, 0x41, 0x20, 0x98, 0x94, 0xd5, 0xca, 0x8d, 0x6a, 0x71, 0x46,
	0x92, 0x61, 0x03, 0xaa, 0x27, 0x18, 0xf4, 0x12, 0xee, 0xf5, 0x59, 0xc4, 0x04, 0x55, 0x9a, 0xee,
	0x3f, 0x23, 0x26, 0x15, 0x09, 0x83, 0xea, 0xf2, 0x8d, 0x54, 0x2b, 0x29, 0x0c, 0x27, 0xa8, 0xfd,
	0x00, 0xfd, 0x3f, 0x0b, 0xeb, 0x3d, 0x2e, 0x3e, 0x53, 0x11, 0x10, 0x7f, 0x18, 0xb2, 0x48, 0x11,
	0x9f, 0x09, 0x45, 0x02, 0xa6, 0x68, 0x38, 0x94, 0x55, 0xc7, 0xd4, 0x83, 0xd6, 0x5d, 0x25, 0xb9,
	0x97, 0x50, 0x36, 0x0c, 0x63, 0x83, 0x09, 0xb5, 0x9b, 0xf0, 0xe1, 0x6a, 0x6f, 0xc6, 0x0c, 0xfa,
	0x2a, 0x0b, 0x8f, 0x24, 0x53, 0xc4, 0x1f, 0x09, 0x61, 0xc2, 0xb8, 0x22, 0x9a, 0x15, 0xb3, 0xc5,
	0x57, 0x77, 0x8d, 0xa6, 0xc3, 0x54, 0x23, 0x61, 0xbd, 0x1c, 0xd0, 0xba, 0x9c, 0x3d, 0xb9, 0xf6,
	0x7d, 0x16, 0x16, 0xed, 0xed, 0x42, 0x43, 0xa8, 0xf0, 0x98, 0xd9, 0xa7, 0xce, 0xb8, 0x19, 0x54,
	0x6a, 0xcd, 0x2f, 0xbc, 0xae, 0x5e, 0x3b, 0x65, 0xd3, 0x02, 0xc7, 0x65, 0x7e, 0xf1, 0x13, 0x3d,
	0x87, 0x6a, 0x7a, 0xb4, 0x03, 0x46, 0x03, 0x26, 0x24, 0xe9, 0x71, 0x41, 0x14, 0xed, 0x27, 0xaf,
	0xc3, 0x02, 0xbe, 0x6f, 0xe7, 0x5b, 0xc9, 0xf4, 0x1e, 0x17, 0x5d, 0xda, 0x97, 0xee, 0x26, 0x94,
	0x27, 0x88, 0x51, 0x11, 0x16, 0xf7, 0x0f, 0x5e, 0xe0, 0x66, 0xa7, 0xe3, 0x64, 0x10, 0x40, 0xbe,
	0x99, 0x8c, 0xb3, 0x6b, 0xff, 0xcb, 0xc2, 0xfa, 0x35, 0x99, 0x41, 0x7f, 0x80, 0x45, 0x39, 0x3a,
	0xfe, 0x37, 0xf3, 0xd5, 0xf8, 0xc7, 0xd0, 0x6c, 0x69, 0xa5, 0xae, 0xe8, 0x77, 0x30, 0x27, 0x69,
	0x64, 0x5b, 0xe2, 0x75, 0x08, 0xed, 0xe6, 0xfe, 0x16, 0x0a, 0xe3, 0xd6, 0x81, 0x96, 0x60, 0xbe,
	0xfe, 0xb6, 0xdb, 0x76, 0x32, 0xa8, 0x00, 0x0b, 0xad, 0x6e, 0xf7, 0x70, 0xdb, 0xc9, 0xa6, 0xc3,
	0x9a, 0x93, 0x73, 0xcf, 0xa0, 0x3a, 0x4b, 0x57, 0xa8, 0x04, 0x4b, 0x9d, 0xfa, 0xc1, 0x7e, 0x77,
	0xff, 0x63, 0xd3, 0xc9, 0x20, 0x07, 0x4a, 0x7b, 0x6d, 0xfc, 0xae, 0x8e, 0x77, 0x49, 0xfb, 0xe0,
	0xf5, 0x07, 0x27, 0x8b, 0x10, 0x54, 0xea, 0x87, 0x87, 0xcd, 0x83, 0x5d, 0x62, 0x27, 0x9c, 0x9c,
	0xf6, 0x4a, 0x31, 0xa4, 0xd3, 0xec, 0x3a, 0x73, 0xe8, 0x21, 0xdc, 0xab, 0xbf, 0x7e, 0x57, 0xff,
	0xd0, 0x21, 0x13, 0xf0, 0xf9, 0x9d, 0x15, 0x48, 0x7e, 0xc4, 0x9d, 0x3f, 0x7a, 0x76, 0xf2, 0x1f,
	0xe7, 0xf5, 0x21, 0x1f, 0xe7, 0xcd, 0xde, 0x9e, 0xfd, 0x18, 0x00, 0x00, 0xff, 0xff, 0xce, 0x38,
	0xca, 0xca, 0x23, 0x0f, 0x00, 0x00,
}
