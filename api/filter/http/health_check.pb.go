// Code generated by protoc-gen-go.
// source: api/filter/http/health_check.proto
// DO NOT EDIT!

package http

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HealthCheck struct {
	PassThroughMode *google_protobuf1.BoolValue `protobuf:"bytes,1,opt,name=pass_through_mode,json=passThroughMode" json:"pass_through_mode,omitempty"`
	Endpoint        string                      `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	CacheTime       *google_protobuf.Duration   `protobuf:"bytes,3,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *HealthCheck) GetPassThroughMode() *google_protobuf1.BoolValue {
	if m != nil {
		return m.PassThroughMode
	}
	return nil
}

func (m *HealthCheck) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *HealthCheck) GetCacheTime() *google_protobuf.Duration {
	if m != nil {
		return m.CacheTime
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "envoy.api.v2.filter.http.HealthCheck")
}

func init() { proto.RegisterFile("api/filter/http/health_check.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x90, 0x10, 0x75, 0x07, 0x44, 0xa6, 0x90, 0x01, 0x55, 0x9d, 0x3a, 0xd9, 0x52,
	0x59, 0x98, 0x01, 0x21, 0x16, 0x96, 0xa8, 0x62, 0x8d, 0xae, 0xc9, 0x35, 0xb6, 0x70, 0x72, 0x27,
	0xe7, 0x52, 0xc4, 0x6f, 0xe2, 0x4f, 0xa2, 0xd8, 0xd0, 0xa5, 0xe3, 0xe9, 0x7d, 0xef, 0x7b, 0x3a,
	0xb5, 0x06, 0x76, 0xe6, 0xe0, 0xbc, 0x60, 0x30, 0x56, 0x84, 0x8d, 0x45, 0xf0, 0x62, 0xeb, 0xc6,
	0x62, 0xf3, 0xa9, 0x39, 0x90, 0x50, 0x5e, 0xe0, 0x70, 0xa4, 0x6f, 0x0d, 0xec, 0xf4, 0x71, 0xab,
	0x13, 0xac, 0x67, 0xb8, 0xbc, 0xef, 0x88, 0x3a, 0x8f, 0x26, 0x72, 0xfb, 0xe9, 0x60, 0xda, 0x29,
	0x80, 0x38, 0x1a, 0x52, 0xf3, 0x3c, 0xff, 0x0a, 0xc0, 0x8c, 0x61, 0x4c, 0xf9, 0xfa, 0x27, 0x53,
	0xcb, 0xb7, 0x38, 0xf8, 0x3c, 0xef, 0xe5, 0xaf, 0xea, 0x96, 0x61, 0x1c, 0x6b, 0xb1, 0x81, 0xa6,
	0xce, 0xd6, 0x3d, 0xb5, 0x58, 0x64, 0xab, 0x6c, 0xb3, 0xdc, 0x96, 0x3a, 0xb9, 0xf4, 0xbf, 0x4b,
	0x3f, 0x11, 0xf9, 0x0f, 0xf0, 0x13, 0x56, 0x37, 0x73, 0x69, 0x97, 0x3a, 0xef, 0xd4, 0x62, 0x5e,
	0xaa, 0x6b, 0x1c, 0x5a, 0x26, 0x37, 0x48, 0x71, 0xb1, 0xca, 0x36, 0x8b, 0xea, 0x74, 0xe7, 0x8f,
	0x4a, 0x35, 0xd0, 0x58, 0xac, 0xc5, 0xf5, 0x58, 0x5c, 0x46, 0xf9, 0xdd, 0x99, 0xfc, 0xe5, 0xef,
	0x91, 0x6a, 0x11, 0xe1, 0x9d, 0xeb, 0x71, 0x7f, 0x15, 0xd3, 0x87, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x43, 0x61, 0x37, 0xc6, 0x34, 0x01, 0x00, 0x00,
}
