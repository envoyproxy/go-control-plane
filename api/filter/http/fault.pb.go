// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/filter/http/fault.proto

package http

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v25 "github.com/envoyproxy/go-control-plane/api"
import envoy_api_v2_filter "github.com/envoyproxy/go-control-plane/api/filter"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FaultAbort struct {
	Percent uint32 `protobuf:"varint,1,opt,name=percent" json:"percent,omitempty"`
	// Types that are valid to be assigned to ErrorType:
	//	*FaultAbort_HttpStatus
	ErrorType isFaultAbort_ErrorType `protobuf_oneof:"error_type"`
}

func (m *FaultAbort) Reset()                    { *m = FaultAbort{} }
func (m *FaultAbort) String() string            { return proto.CompactTextString(m) }
func (*FaultAbort) ProtoMessage()               {}
func (*FaultAbort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isFaultAbort_ErrorType interface {
	isFaultAbort_ErrorType()
}

type FaultAbort_HttpStatus struct {
	HttpStatus uint32 `protobuf:"varint,2,opt,name=http_status,json=httpStatus,oneof"`
}

func (*FaultAbort_HttpStatus) isFaultAbort_ErrorType() {}

func (m *FaultAbort) GetErrorType() isFaultAbort_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *FaultAbort) GetPercent() uint32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func (m *FaultAbort) GetHttpStatus() uint32 {
	if x, ok := m.GetErrorType().(*FaultAbort_HttpStatus); ok {
		return x.HttpStatus
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FaultAbort) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FaultAbort_OneofMarshaler, _FaultAbort_OneofUnmarshaler, _FaultAbort_OneofSizer, []interface{}{
		(*FaultAbort_HttpStatus)(nil),
	}
}

func _FaultAbort_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FaultAbort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *FaultAbort_HttpStatus:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.HttpStatus))
	case nil:
	default:
		return fmt.Errorf("FaultAbort.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _FaultAbort_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FaultAbort)
	switch tag {
	case 2: // error_type.http_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &FaultAbort_HttpStatus{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _FaultAbort_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FaultAbort)
	// error_type
	switch x := m.ErrorType.(type) {
	case *FaultAbort_HttpStatus:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.HttpStatus))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HTTPFault struct {
	Delay           *envoy_api_v2_filter.FaultDelay `protobuf:"bytes,1,opt,name=delay" json:"delay,omitempty"`
	Abort           *FaultAbort                     `protobuf:"bytes,2,opt,name=abort" json:"abort,omitempty"`
	UpstreamCluster string                          `protobuf:"bytes,3,opt,name=upstream_cluster,json=upstreamCluster" json:"upstream_cluster,omitempty"`
	Headers         []*envoy_api_v25.HeaderMatcher  `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty"`
	DownstreamNodes []string                        `protobuf:"bytes,5,rep,name=downstream_nodes,json=downstreamNodes" json:"downstream_nodes,omitempty"`
}

func (m *HTTPFault) Reset()                    { *m = HTTPFault{} }
func (m *HTTPFault) String() string            { return proto.CompactTextString(m) }
func (*HTTPFault) ProtoMessage()               {}
func (*HTTPFault) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HTTPFault) GetDelay() *envoy_api_v2_filter.FaultDelay {
	if m != nil {
		return m.Delay
	}
	return nil
}

func (m *HTTPFault) GetAbort() *FaultAbort {
	if m != nil {
		return m.Abort
	}
	return nil
}

func (m *HTTPFault) GetUpstreamCluster() string {
	if m != nil {
		return m.UpstreamCluster
	}
	return ""
}

func (m *HTTPFault) GetHeaders() []*envoy_api_v25.HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPFault) GetDownstreamNodes() []string {
	if m != nil {
		return m.DownstreamNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*FaultAbort)(nil), "envoy.api.v2.filter.http.FaultAbort")
	proto.RegisterType((*HTTPFault)(nil), "envoy.api.v2.filter.http.HTTPFault")
}

func init() { proto.RegisterFile("api/filter/http/fault.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x5f, 0xe0, 0x45, 0xc2, 0x54, 0xa2, 0xd9, 0x83, 0xd9, 0xc0, 0xc1, 0x4a, 0x3c, 0xe0,
	0x65, 0x49, 0x6a, 0xb8, 0x78, 0xf3, 0x4f, 0x0c, 0x17, 0x8d, 0xa9, 0x24, 0x1e, 0xc9, 0x42, 0x87,
	0x40, 0x52, 0xbb, 0x9b, 0xd9, 0x29, 0x86, 0xcf, 0xe0, 0x97, 0x36, 0xbb, 0xb5, 0x01, 0x13, 0x3d,
	0xce, 0x33, 0xbf, 0x79, 0x9e, 0x99, 0x81, 0x81, 0xb6, 0x9b, 0xf1, 0x6a, 0x93, 0x33, 0xd2, 0x78,
	0xcd, 0x6c, 0xc7, 0x2b, 0x5d, 0xe6, 0xac, 0x2c, 0x19, 0x36, 0x42, 0x62, 0xb1, 0x35, 0x3b, 0xa5,
	0xed, 0x46, 0x6d, 0x13, 0x55, 0x51, 0xca, 0x53, 0xfd, 0x9e, 0x1f, 0xa3, 0xcc, 0x55, 0x60, 0xff,
	0xec, 0xc0, 0xe5, 0xc0, 0x60, 0xf8, 0x06, 0xf0, 0xe8, 0xcb, 0xdb, 0x85, 0x21, 0x16, 0x12, 0x3a,
	0x16, 0x69, 0x89, 0x05, 0xcb, 0x46, 0xdc, 0x18, 0xf5, 0xd2, 0xba, 0x14, 0x17, 0x10, 0x79, 0xdb,
	0xb9, 0x63, 0xcd, 0xa5, 0x93, 0x4d, 0xdf, 0x9d, 0xfe, 0x4b, 0xc1, 0x8b, 0xaf, 0x41, 0xbb, 0x3b,
	0x06, 0x40, 0x22, 0x43, 0x73, 0xde, 0x59, 0x1c, 0x7e, 0x36, 0xa1, 0x3b, 0x9d, 0xcd, 0x5e, 0x82,
	0xbb, 0x98, 0x40, 0x3b, 0xc3, 0x5c, 0xef, 0x82, 0x6d, 0x94, 0x9c, 0xab, 0xdf, 0xf6, 0x0e, 0xe8,
	0x83, 0xc7, 0xd2, 0x8a, 0x16, 0x37, 0xd0, 0xd6, 0x7e, 0xb1, 0x90, 0x17, 0x25, 0x97, 0xea, 0xaf,
	0x73, 0xd5, 0xfe, 0x88, 0xb4, 0x1a, 0x11, 0x57, 0x70, 0x5a, 0x5a, 0xc7, 0x84, 0xfa, 0x7d, 0xbe,
	0xcc, 0x4b, 0xc7, 0x48, 0xb2, 0x15, 0x37, 0x46, 0xdd, 0xf4, 0xa4, 0xd6, 0xef, 0x2b, 0x59, 0x4c,
	0xa0, 0xb3, 0x46, 0x9d, 0x21, 0x39, 0xf9, 0x3f, 0x6e, 0x8d, 0xa2, 0x64, 0xf0, 0x33, 0x68, 0x1a,
	0x9a, 0x4f, 0x9a, 0x97, 0x6b, 0xa4, 0xb4, 0x66, 0x7d, 0x42, 0x66, 0x3e, 0x8a, 0xef, 0x8c, 0xc2,
	0x64, 0xe8, 0x64, 0x3b, 0x6e, 0xf9, 0x84, 0xbd, 0xfe, 0xec, 0xe5, 0xc5, 0x51, 0xf8, 0xf6, 0xf5,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x28, 0xb8, 0x0e, 0xcd, 0x01, 0x00, 0x00,
}
