// Code generated by protoc-gen-go.
// source: api/filter/network/tcp_proxy.proto
// DO NOT EDIT!

package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TcpProxy struct {
	StatPrefix            string                     `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix" json:"stat_prefix,omitempty"`
	Cluster               string                     `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	DownstreamIdleTimeout *google_protobuf1.Duration `protobuf:"bytes,3,opt,name=downstream_idle_timeout,json=downstreamIdleTimeout" json:"downstream_idle_timeout,omitempty"`
	UpstreamIdleTimeout   *google_protobuf1.Duration `protobuf:"bytes,4,opt,name=upstream_idle_timeout,json=upstreamIdleTimeout" json:"upstream_idle_timeout,omitempty"`
}

func (m *TcpProxy) Reset()                    { *m = TcpProxy{} }
func (m *TcpProxy) String() string            { return proto.CompactTextString(m) }
func (*TcpProxy) ProtoMessage()               {}
func (*TcpProxy) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *TcpProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *TcpProxy) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *TcpProxy) GetDownstreamIdleTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.DownstreamIdleTimeout
	}
	return nil
}

func (m *TcpProxy) GetUpstreamIdleTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.UpstreamIdleTimeout
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpProxy)(nil), "envoy.api.v2.filter.network.TcpProxy")
}

func init() { proto.RegisterFile("api/filter/network/tcp_proxy.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0x59, 0x15, 0x6b, 0xd3, 0x5b, 0xa4, 0xb8, 0x2a, 0x68, 0xe9, 0xa9, 0xa7, 0x04, 0xea,
	0x3f, 0x10, 0x2f, 0x1e, 0x84, 0x5a, 0x7a, 0xf2, 0xb2, 0xa4, 0xbb, 0xb3, 0x25, 0x98, 0xee, 0x0c,
	0xb3, 0x93, 0x7e, 0xfc, 0x62, 0xff, 0x86, 0x74, 0x3f, 0xd0, 0x83, 0xe0, 0x31, 0x6f, 0xde, 0xe7,
	0xe1, 0x65, 0xd4, 0xd4, 0x91, 0xb7, 0xa5, 0x0f, 0x02, 0x6c, 0x2b, 0x90, 0x3d, 0xf2, 0xa7, 0x95,
	0x9c, 0x32, 0x62, 0x3c, 0x1c, 0x0d, 0x31, 0x0a, 0xea, 0x7b, 0xa8, 0x76, 0x78, 0x34, 0x8e, 0xbc,
	0xd9, 0xcd, 0x4d, 0x5b, 0x36, 0x5d, 0xf9, 0xee, 0x61, 0x83, 0xb8, 0x09, 0x60, 0x9b, 0xea, 0x3a,
	0x96, 0xb6, 0x88, 0xec, 0xc4, 0x63, 0xd5, 0xc2, 0xd3, 0xaf, 0x44, 0x5d, 0xad, 0x72, 0x5a, 0x9c,
	0x7c, 0xfa, 0x51, 0x8d, 0x6a, 0x71, 0x92, 0x11, 0x43, 0xe9, 0x0f, 0x69, 0x32, 0x49, 0x66, 0xc3,
	0xa5, 0x3a, 0x45, 0x8b, 0x26, 0xd1, 0xa9, 0x1a, 0xe4, 0x21, 0xd6, 0x02, 0x9c, 0x9e, 0x35, 0x9f,
	0xfd, 0x53, 0xbf, 0xab, 0x9b, 0x02, 0xf7, 0x55, 0x2d, 0x0c, 0x6e, 0x9b, 0xf9, 0x22, 0x40, 0x26,
	0x7e, 0x0b, 0x18, 0x25, 0x3d, 0x9f, 0x24, 0xb3, 0xd1, 0xfc, 0xd6, 0xb4, 0x4b, 0x4c, 0xbf, 0xc4,
	0xbc, 0x74, 0x4b, 0x96, 0xe3, 0x1f, 0xf2, 0xb5, 0x08, 0xb0, 0x6a, 0x39, 0xfd, 0xa6, 0xc6, 0x91,
	0xfe, 0x12, 0x5e, 0xfc, 0x27, 0xbc, 0xee, 0xb9, 0x5f, 0xba, 0xe7, 0xe1, 0xc7, 0xa0, 0x3b, 0xca,
	0xfa, 0xb2, 0x41, 0x9e, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x55, 0xb4, 0x4f, 0x27, 0x5e, 0x01,
	0x00, 0x00,
}
