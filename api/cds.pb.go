// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/cds.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Cluster_DiscoveryType int32

const (
	Cluster_STATIC       Cluster_DiscoveryType = 0
	Cluster_STRICT_DNS   Cluster_DiscoveryType = 1
	Cluster_LOGICAL_DNS  Cluster_DiscoveryType = 2
	Cluster_EDS          Cluster_DiscoveryType = 3
	Cluster_ORIGINAL_DST Cluster_DiscoveryType = 4
)

var Cluster_DiscoveryType_name = map[int32]string{
	0: "STATIC",
	1: "STRICT_DNS",
	2: "LOGICAL_DNS",
	3: "EDS",
	4: "ORIGINAL_DST",
}
var Cluster_DiscoveryType_value = map[string]int32{
	"STATIC":       0,
	"STRICT_DNS":   1,
	"LOGICAL_DNS":  2,
	"EDS":          3,
	"ORIGINAL_DST": 4,
}

func (x Cluster_DiscoveryType) String() string {
	return proto.EnumName(Cluster_DiscoveryType_name, int32(x))
}
func (Cluster_DiscoveryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 0} }

type Cluster_LbPolicy int32

const (
	Cluster_ROUND_ROBIN     Cluster_LbPolicy = 0
	Cluster_LEAST_REQUEST   Cluster_LbPolicy = 1
	Cluster_RING_HASH       Cluster_LbPolicy = 2
	Cluster_RANDOM          Cluster_LbPolicy = 3
	Cluster_ORIGINAL_DST_LB Cluster_LbPolicy = 4
)

var Cluster_LbPolicy_name = map[int32]string{
	0: "ROUND_ROBIN",
	1: "LEAST_REQUEST",
	2: "RING_HASH",
	3: "RANDOM",
	4: "ORIGINAL_DST_LB",
}
var Cluster_LbPolicy_value = map[string]int32{
	"ROUND_ROBIN":     0,
	"LEAST_REQUEST":   1,
	"RING_HASH":       2,
	"RANDOM":          3,
	"ORIGINAL_DST_LB": 4,
}

func (x Cluster_LbPolicy) String() string {
	return proto.EnumName(Cluster_LbPolicy_name, int32(x))
}
func (Cluster_LbPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 1} }

type Cluster_DnsLookupFamily int32

const (
	Cluster_AUTO    Cluster_DnsLookupFamily = 0
	Cluster_V4_ONLY Cluster_DnsLookupFamily = 1
	Cluster_V6_ONLY Cluster_DnsLookupFamily = 2
)

var Cluster_DnsLookupFamily_name = map[int32]string{
	0: "AUTO",
	1: "V4_ONLY",
	2: "V6_ONLY",
}
var Cluster_DnsLookupFamily_value = map[string]int32{
	"AUTO":    0,
	"V4_ONLY": 1,
	"V6_ONLY": 2,
}

func (x Cluster_DnsLookupFamily) String() string {
	return proto.EnumName(Cluster_DnsLookupFamily_name, int32(x))
}
func (Cluster_DnsLookupFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 2} }

type Cluster_LbSubsetConfig_LbSubsetFallbackPolicy int32

const (
	Cluster_LbSubsetConfig_NO_FALLBACK    Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 0
	Cluster_LbSubsetConfig_ANY_ENDPOINT   Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 1
	Cluster_LbSubsetConfig_DEFAULT_SUBSET Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 2
)

var Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name = map[int32]string{
	0: "NO_FALLBACK",
	1: "ANY_ENDPOINT",
	2: "DEFAULT_SUBSET",
}
var Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_value = map[string]int32{
	"NO_FALLBACK":    0,
	"ANY_ENDPOINT":   1,
	"DEFAULT_SUBSET": 2,
}

func (x Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) String() string {
	return proto.EnumName(Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name, int32(x))
}
func (Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2, 2, 0}
}

type UpstreamBindConfig struct {
	SourceAddress *Address `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
}

func (m *UpstreamBindConfig) Reset()                    { *m = UpstreamBindConfig{} }
func (m *UpstreamBindConfig) String() string            { return proto.CompactTextString(m) }
func (*UpstreamBindConfig) ProtoMessage()               {}
func (*UpstreamBindConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *UpstreamBindConfig) GetSourceAddress() *Address {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

type CircuitBreakers struct {
	Thresholds []*CircuitBreakers_Thresholds `protobuf:"bytes,1,rep,name=thresholds" json:"thresholds,omitempty"`
}

func (m *CircuitBreakers) Reset()                    { *m = CircuitBreakers{} }
func (m *CircuitBreakers) String() string            { return proto.CompactTextString(m) }
func (*CircuitBreakers) ProtoMessage()               {}
func (*CircuitBreakers) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *CircuitBreakers) GetThresholds() []*CircuitBreakers_Thresholds {
	if m != nil {
		return m.Thresholds
	}
	return nil
}

type CircuitBreakers_Thresholds struct {
	Priority           RoutingPriority              `protobuf:"varint,1,opt,name=priority,enum=envoy.api.v2.RoutingPriority" json:"priority,omitempty"`
	MaxConnections     *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections" json:"max_connections,omitempty"`
	MaxPendingRequests *google_protobuf.UInt32Value `protobuf:"bytes,3,opt,name=max_pending_requests,json=maxPendingRequests" json:"max_pending_requests,omitempty"`
	MaxRequests        *google_protobuf.UInt32Value `protobuf:"bytes,4,opt,name=max_requests,json=maxRequests" json:"max_requests,omitempty"`
	MaxRetries         *google_protobuf.UInt32Value `protobuf:"bytes,5,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
}

func (m *CircuitBreakers_Thresholds) Reset()                    { *m = CircuitBreakers_Thresholds{} }
func (m *CircuitBreakers_Thresholds) String() string            { return proto.CompactTextString(m) }
func (*CircuitBreakers_Thresholds) ProtoMessage()               {}
func (*CircuitBreakers_Thresholds) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1, 0} }

func (m *CircuitBreakers_Thresholds) GetPriority() RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return RoutingPriority_DEFAULT
}

func (m *CircuitBreakers_Thresholds) GetMaxConnections() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxConnections
	}
	return nil
}

func (m *CircuitBreakers_Thresholds) GetMaxPendingRequests() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxPendingRequests
	}
	return nil
}

func (m *CircuitBreakers_Thresholds) GetMaxRequests() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxRequests
	}
	return nil
}

func (m *CircuitBreakers_Thresholds) GetMaxRetries() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxRetries
	}
	return nil
}

type Cluster struct {
	Name                          string                       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type                          Cluster_DiscoveryType        `protobuf:"varint,2,opt,name=type,enum=envoy.api.v2.Cluster_DiscoveryType" json:"type,omitempty"`
	EdsClusterConfig              *Cluster_EdsClusterConfig    `protobuf:"bytes,3,opt,name=eds_cluster_config,json=edsClusterConfig" json:"eds_cluster_config,omitempty"`
	ConnectTimeout                *google_protobuf2.Duration   `protobuf:"bytes,4,opt,name=connect_timeout,json=connectTimeout" json:"connect_timeout,omitempty"`
	PerConnectionBufferLimitBytes *google_protobuf.UInt32Value `protobuf:"bytes,5,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes" json:"per_connection_buffer_limit_bytes,omitempty"`
	LbPolicy                      Cluster_LbPolicy             `protobuf:"varint,6,opt,name=lb_policy,json=lbPolicy,enum=envoy.api.v2.Cluster_LbPolicy" json:"lb_policy,omitempty"`
	Hosts                         []*Address                   `protobuf:"bytes,7,rep,name=hosts" json:"hosts,omitempty"`
	HealthChecks                  []*HealthCheck               `protobuf:"bytes,8,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	MaxRequestsPerConnection      *google_protobuf.UInt32Value `protobuf:"bytes,9,opt,name=max_requests_per_connection,json=maxRequestsPerConnection" json:"max_requests_per_connection,omitempty"`
	CircuitBreakers               *CircuitBreakers             `protobuf:"bytes,10,opt,name=circuit_breakers,json=circuitBreakers" json:"circuit_breakers,omitempty"`
	TlsContext                    *UpstreamTlsContext          `protobuf:"bytes,11,opt,name=tls_context,json=tlsContext" json:"tls_context,omitempty"`
	// Types that are valid to be assigned to ProtocolOptions:
	//	*Cluster_TcpProtocolOptions
	//	*Cluster_HttpProtocolOptions
	//	*Cluster_Http2ProtocolOptions
	//	*Cluster_GrpcProtocolOptions
	ProtocolOptions    isCluster_ProtocolOptions  `protobuf_oneof:"protocol_options"`
	DnsRefreshRate     *google_protobuf2.Duration `protobuf:"bytes,16,opt,name=dns_refresh_rate,json=dnsRefreshRate" json:"dns_refresh_rate,omitempty"`
	DnsLookupFamily    Cluster_DnsLookupFamily    `protobuf:"varint,17,opt,name=dns_lookup_family,json=dnsLookupFamily,enum=envoy.api.v2.Cluster_DnsLookupFamily" json:"dns_lookup_family,omitempty"`
	DnsResolvers       []*Address                 `protobuf:"bytes,18,rep,name=dns_resolvers,json=dnsResolvers" json:"dns_resolvers,omitempty"`
	OutlierDetection   *Cluster_OutlierDetection  `protobuf:"bytes,19,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	CleanupInterval    *google_protobuf2.Duration `protobuf:"bytes,20,opt,name=cleanup_interval,json=cleanupInterval" json:"cleanup_interval,omitempty"`
	UpstreamBindConfig *BindConfig                `protobuf:"bytes,21,opt,name=upstream_bind_config,json=upstreamBindConfig" json:"upstream_bind_config,omitempty"`
	LbSubsetConfig     *Cluster_LbSubsetConfig    `protobuf:"bytes,22,opt,name=lb_subset_config,json=lbSubsetConfig" json:"lb_subset_config,omitempty"`
	// Types that are valid to be assigned to LbConfig:
	//	*Cluster_RingHashLbConfig_
	LbConfig        isCluster_LbConfig `protobuf_oneof:"lb_config"`
	TransportSocket *TransportSocket   `protobuf:"bytes,24,opt,name=transport_socket,json=transportSocket" json:"transport_socket,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

type isCluster_ProtocolOptions interface {
	isCluster_ProtocolOptions()
}
type isCluster_LbConfig interface {
	isCluster_LbConfig()
}

type Cluster_TcpProtocolOptions struct {
	TcpProtocolOptions *TcpProtocolOptions `protobuf:"bytes,12,opt,name=tcp_protocol_options,json=tcpProtocolOptions,oneof"`
}
type Cluster_HttpProtocolOptions struct {
	HttpProtocolOptions *Http1ProtocolOptions `protobuf:"bytes,13,opt,name=http_protocol_options,json=httpProtocolOptions,oneof"`
}
type Cluster_Http2ProtocolOptions struct {
	Http2ProtocolOptions *Http2ProtocolOptions `protobuf:"bytes,14,opt,name=http2_protocol_options,json=http2ProtocolOptions,oneof"`
}
type Cluster_GrpcProtocolOptions struct {
	GrpcProtocolOptions *GrpcProtocolOptions `protobuf:"bytes,15,opt,name=grpc_protocol_options,json=grpcProtocolOptions,oneof"`
}
type Cluster_RingHashLbConfig_ struct {
	RingHashLbConfig *Cluster_RingHashLbConfig `protobuf:"bytes,23,opt,name=ring_hash_lb_config,json=ringHashLbConfig,oneof"`
}

func (*Cluster_TcpProtocolOptions) isCluster_ProtocolOptions()   {}
func (*Cluster_HttpProtocolOptions) isCluster_ProtocolOptions()  {}
func (*Cluster_Http2ProtocolOptions) isCluster_ProtocolOptions() {}
func (*Cluster_GrpcProtocolOptions) isCluster_ProtocolOptions()  {}
func (*Cluster_RingHashLbConfig_) isCluster_LbConfig()           {}

func (m *Cluster) GetProtocolOptions() isCluster_ProtocolOptions {
	if m != nil {
		return m.ProtocolOptions
	}
	return nil
}
func (m *Cluster) GetLbConfig() isCluster_LbConfig {
	if m != nil {
		return m.LbConfig
	}
	return nil
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetType() Cluster_DiscoveryType {
	if m != nil {
		return m.Type
	}
	return Cluster_STATIC
}

func (m *Cluster) GetEdsClusterConfig() *Cluster_EdsClusterConfig {
	if m != nil {
		return m.EdsClusterConfig
	}
	return nil
}

func (m *Cluster) GetConnectTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *Cluster) GetPerConnectionBufferLimitBytes() *google_protobuf.UInt32Value {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return nil
}

func (m *Cluster) GetLbPolicy() Cluster_LbPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return Cluster_ROUND_ROBIN
}

func (m *Cluster) GetHosts() []*Address {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Cluster) GetHealthChecks() []*HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *Cluster) GetMaxRequestsPerConnection() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return nil
}

func (m *Cluster) GetCircuitBreakers() *CircuitBreakers {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

func (m *Cluster) GetTlsContext() *UpstreamTlsContext {
	if m != nil {
		return m.TlsContext
	}
	return nil
}

func (m *Cluster) GetTcpProtocolOptions() *TcpProtocolOptions {
	if x, ok := m.GetProtocolOptions().(*Cluster_TcpProtocolOptions); ok {
		return x.TcpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetHttpProtocolOptions() *Http1ProtocolOptions {
	if x, ok := m.GetProtocolOptions().(*Cluster_HttpProtocolOptions); ok {
		return x.HttpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetHttp2ProtocolOptions() *Http2ProtocolOptions {
	if x, ok := m.GetProtocolOptions().(*Cluster_Http2ProtocolOptions); ok {
		return x.Http2ProtocolOptions
	}
	return nil
}

func (m *Cluster) GetGrpcProtocolOptions() *GrpcProtocolOptions {
	if x, ok := m.GetProtocolOptions().(*Cluster_GrpcProtocolOptions); ok {
		return x.GrpcProtocolOptions
	}
	return nil
}

func (m *Cluster) GetDnsRefreshRate() *google_protobuf2.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *Cluster) GetDnsLookupFamily() Cluster_DnsLookupFamily {
	if m != nil {
		return m.DnsLookupFamily
	}
	return Cluster_AUTO
}

func (m *Cluster) GetDnsResolvers() []*Address {
	if m != nil {
		return m.DnsResolvers
	}
	return nil
}

func (m *Cluster) GetOutlierDetection() *Cluster_OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *Cluster) GetCleanupInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.CleanupInterval
	}
	return nil
}

func (m *Cluster) GetUpstreamBindConfig() *BindConfig {
	if m != nil {
		return m.UpstreamBindConfig
	}
	return nil
}

func (m *Cluster) GetLbSubsetConfig() *Cluster_LbSubsetConfig {
	if m != nil {
		return m.LbSubsetConfig
	}
	return nil
}

func (m *Cluster) GetRingHashLbConfig() *Cluster_RingHashLbConfig {
	if x, ok := m.GetLbConfig().(*Cluster_RingHashLbConfig_); ok {
		return x.RingHashLbConfig
	}
	return nil
}

func (m *Cluster) GetTransportSocket() *TransportSocket {
	if m != nil {
		return m.TransportSocket
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cluster) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cluster_OneofMarshaler, _Cluster_OneofUnmarshaler, _Cluster_OneofSizer, []interface{}{
		(*Cluster_TcpProtocolOptions)(nil),
		(*Cluster_HttpProtocolOptions)(nil),
		(*Cluster_Http2ProtocolOptions)(nil),
		(*Cluster_GrpcProtocolOptions)(nil),
		(*Cluster_RingHashLbConfig_)(nil),
	}
}

func _Cluster_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cluster)
	// protocol_options
	switch x := m.ProtocolOptions.(type) {
	case *Cluster_TcpProtocolOptions:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpProtocolOptions); err != nil {
			return err
		}
	case *Cluster_HttpProtocolOptions:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HttpProtocolOptions); err != nil {
			return err
		}
	case *Cluster_Http2ProtocolOptions:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http2ProtocolOptions); err != nil {
			return err
		}
	case *Cluster_GrpcProtocolOptions:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GrpcProtocolOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cluster.ProtocolOptions has unexpected type %T", x)
	}
	// lb_config
	switch x := m.LbConfig.(type) {
	case *Cluster_RingHashLbConfig_:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RingHashLbConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cluster.LbConfig has unexpected type %T", x)
	}
	return nil
}

func _Cluster_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cluster)
	switch tag {
	case 12: // protocol_options.tcp_protocol_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TcpProtocolOptions)
		err := b.DecodeMessage(msg)
		m.ProtocolOptions = &Cluster_TcpProtocolOptions{msg}
		return true, err
	case 13: // protocol_options.http_protocol_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Http1ProtocolOptions)
		err := b.DecodeMessage(msg)
		m.ProtocolOptions = &Cluster_HttpProtocolOptions{msg}
		return true, err
	case 14: // protocol_options.http2_protocol_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Http2ProtocolOptions)
		err := b.DecodeMessage(msg)
		m.ProtocolOptions = &Cluster_Http2ProtocolOptions{msg}
		return true, err
	case 15: // protocol_options.grpc_protocol_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GrpcProtocolOptions)
		err := b.DecodeMessage(msg)
		m.ProtocolOptions = &Cluster_GrpcProtocolOptions{msg}
		return true, err
	case 23: // lb_config.ring_hash_lb_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_RingHashLbConfig)
		err := b.DecodeMessage(msg)
		m.LbConfig = &Cluster_RingHashLbConfig_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Cluster_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cluster)
	// protocol_options
	switch x := m.ProtocolOptions.(type) {
	case *Cluster_TcpProtocolOptions:
		s := proto.Size(x.TcpProtocolOptions)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_HttpProtocolOptions:
		s := proto.Size(x.HttpProtocolOptions)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Http2ProtocolOptions:
		s := proto.Size(x.Http2ProtocolOptions)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_GrpcProtocolOptions:
		s := proto.Size(x.GrpcProtocolOptions)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// lb_config
	switch x := m.LbConfig.(type) {
	case *Cluster_RingHashLbConfig_:
		s := proto.Size(x.RingHashLbConfig)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Cluster_EdsClusterConfig struct {
	EdsConfig   *ConfigSource `protobuf:"bytes,1,opt,name=eds_config,json=edsConfig" json:"eds_config,omitempty"`
	ServiceName string        `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *Cluster_EdsClusterConfig) Reset()                    { *m = Cluster_EdsClusterConfig{} }
func (m *Cluster_EdsClusterConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_EdsClusterConfig) ProtoMessage()               {}
func (*Cluster_EdsClusterConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 0} }

func (m *Cluster_EdsClusterConfig) GetEdsConfig() *ConfigSource {
	if m != nil {
		return m.EdsConfig
	}
	return nil
}

func (m *Cluster_EdsClusterConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type Cluster_OutlierDetection struct {
	Consecutive_5Xx          *google_protobuf.UInt32Value `protobuf:"bytes,1,opt,name=consecutive_5xx,json=consecutive5xx" json:"consecutive_5xx,omitempty"`
	Interval                 *google_protobuf2.Duration   `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	BaseEjectionTime         *google_protobuf2.Duration   `protobuf:"bytes,3,opt,name=base_ejection_time,json=baseEjectionTime" json:"base_ejection_time,omitempty"`
	MaxEjectionPercent       *google_protobuf.UInt32Value `protobuf:"bytes,4,opt,name=max_ejection_percent,json=maxEjectionPercent" json:"max_ejection_percent,omitempty"`
	EnforcingConsecutive_5Xx *google_protobuf.UInt32Value `protobuf:"bytes,5,opt,name=enforcing_consecutive_5xx,json=enforcingConsecutive5xx" json:"enforcing_consecutive_5xx,omitempty"`
	EnforcingSuccessRate     *google_protobuf.UInt32Value `protobuf:"bytes,6,opt,name=enforcing_success_rate,json=enforcingSuccessRate" json:"enforcing_success_rate,omitempty"`
	SuccessRateMinimumHosts  *google_protobuf.UInt32Value `protobuf:"bytes,7,opt,name=success_rate_minimum_hosts,json=successRateMinimumHosts" json:"success_rate_minimum_hosts,omitempty"`
	SuccessRateRequestVolume *google_protobuf.UInt32Value `protobuf:"bytes,8,opt,name=success_rate_request_volume,json=successRateRequestVolume" json:"success_rate_request_volume,omitempty"`
	SuccessRateStdevFactor   *google_protobuf.UInt32Value `protobuf:"bytes,9,opt,name=success_rate_stdev_factor,json=successRateStdevFactor" json:"success_rate_stdev_factor,omitempty"`
}

func (m *Cluster_OutlierDetection) Reset()                    { *m = Cluster_OutlierDetection{} }
func (m *Cluster_OutlierDetection) String() string            { return proto.CompactTextString(m) }
func (*Cluster_OutlierDetection) ProtoMessage()               {}
func (*Cluster_OutlierDetection) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 1} }

func (m *Cluster_OutlierDetection) GetConsecutive_5Xx() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Consecutive_5Xx
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetBaseEjectionTime() *google_protobuf2.Duration {
	if m != nil {
		return m.BaseEjectionTime
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetMaxEjectionPercent() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxEjectionPercent
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetEnforcingConsecutive_5Xx() *google_protobuf.UInt32Value {
	if m != nil {
		return m.EnforcingConsecutive_5Xx
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetEnforcingSuccessRate() *google_protobuf.UInt32Value {
	if m != nil {
		return m.EnforcingSuccessRate
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetSuccessRateMinimumHosts() *google_protobuf.UInt32Value {
	if m != nil {
		return m.SuccessRateMinimumHosts
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetSuccessRateRequestVolume() *google_protobuf.UInt32Value {
	if m != nil {
		return m.SuccessRateRequestVolume
	}
	return nil
}

func (m *Cluster_OutlierDetection) GetSuccessRateStdevFactor() *google_protobuf.UInt32Value {
	if m != nil {
		return m.SuccessRateStdevFactor
	}
	return nil
}

type Cluster_LbSubsetConfig struct {
	FallbackPolicy  Cluster_LbSubsetConfig_LbSubsetFallbackPolicy `protobuf:"varint,1,opt,name=fallback_policy,json=fallbackPolicy,enum=envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	DefaultSubset   *google_protobuf4.Struct                      `protobuf:"bytes,2,opt,name=default_subset,json=defaultSubset" json:"default_subset,omitempty"`
	SubsetSelectors []*Cluster_LbSubsetConfig_LbSubsetSelector    `protobuf:"bytes,3,rep,name=subset_selectors,json=subsetSelectors" json:"subset_selectors,omitempty"`
}

func (m *Cluster_LbSubsetConfig) Reset()                    { *m = Cluster_LbSubsetConfig{} }
func (m *Cluster_LbSubsetConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_LbSubsetConfig) ProtoMessage()               {}
func (*Cluster_LbSubsetConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 2} }

func (m *Cluster_LbSubsetConfig) GetFallbackPolicy() Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return Cluster_LbSubsetConfig_NO_FALLBACK
}

func (m *Cluster_LbSubsetConfig) GetDefaultSubset() *google_protobuf4.Struct {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *Cluster_LbSubsetConfig) GetSubsetSelectors() []*Cluster_LbSubsetConfig_LbSubsetSelector {
	if m != nil {
		return m.SubsetSelectors
	}
	return nil
}

type Cluster_LbSubsetConfig_LbSubsetSelector struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) Reset() {
	*m = Cluster_LbSubsetConfig_LbSubsetSelector{}
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) String() string { return proto.CompactTextString(m) }
func (*Cluster_LbSubsetConfig_LbSubsetSelector) ProtoMessage()    {}
func (*Cluster_LbSubsetConfig_LbSubsetSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2, 2, 0}
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Cluster_RingHashLbConfig struct {
	MinimumRingSize *google_protobuf.UInt64Value           `protobuf:"bytes,1,opt,name=minimum_ring_size,json=minimumRingSize" json:"minimum_ring_size,omitempty"`
	DeprecatedV1    *Cluster_RingHashLbConfig_DeprecatedV1 `protobuf:"bytes,2,opt,name=deprecated_v1,json=deprecatedV1" json:"deprecated_v1,omitempty"`
}

func (m *Cluster_RingHashLbConfig) Reset()                    { *m = Cluster_RingHashLbConfig{} }
func (m *Cluster_RingHashLbConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_RingHashLbConfig) ProtoMessage()               {}
func (*Cluster_RingHashLbConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 3} }

func (m *Cluster_RingHashLbConfig) GetMinimumRingSize() *google_protobuf.UInt64Value {
	if m != nil {
		return m.MinimumRingSize
	}
	return nil
}

func (m *Cluster_RingHashLbConfig) GetDeprecatedV1() *Cluster_RingHashLbConfig_DeprecatedV1 {
	if m != nil {
		return m.DeprecatedV1
	}
	return nil
}

type Cluster_RingHashLbConfig_DeprecatedV1 struct {
	UseStdHash *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=use_std_hash,json=useStdHash" json:"use_std_hash,omitempty"`
}

func (m *Cluster_RingHashLbConfig_DeprecatedV1) Reset()         { *m = Cluster_RingHashLbConfig_DeprecatedV1{} }
func (m *Cluster_RingHashLbConfig_DeprecatedV1) String() string { return proto.CompactTextString(m) }
func (*Cluster_RingHashLbConfig_DeprecatedV1) ProtoMessage()    {}
func (*Cluster_RingHashLbConfig_DeprecatedV1) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{2, 3, 0}
}

func (m *Cluster_RingHashLbConfig_DeprecatedV1) GetUseStdHash() *google_protobuf.BoolValue {
	if m != nil {
		return m.UseStdHash
	}
	return nil
}

func init() {
	proto.RegisterType((*UpstreamBindConfig)(nil), "envoy.api.v2.UpstreamBindConfig")
	proto.RegisterType((*CircuitBreakers)(nil), "envoy.api.v2.CircuitBreakers")
	proto.RegisterType((*CircuitBreakers_Thresholds)(nil), "envoy.api.v2.CircuitBreakers.Thresholds")
	proto.RegisterType((*Cluster)(nil), "envoy.api.v2.Cluster")
	proto.RegisterType((*Cluster_EdsClusterConfig)(nil), "envoy.api.v2.Cluster.EdsClusterConfig")
	proto.RegisterType((*Cluster_OutlierDetection)(nil), "envoy.api.v2.Cluster.OutlierDetection")
	proto.RegisterType((*Cluster_LbSubsetConfig)(nil), "envoy.api.v2.Cluster.LbSubsetConfig")
	proto.RegisterType((*Cluster_LbSubsetConfig_LbSubsetSelector)(nil), "envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector")
	proto.RegisterType((*Cluster_RingHashLbConfig)(nil), "envoy.api.v2.Cluster.RingHashLbConfig")
	proto.RegisterType((*Cluster_RingHashLbConfig_DeprecatedV1)(nil), "envoy.api.v2.Cluster.RingHashLbConfig.DeprecatedV1")
	proto.RegisterEnum("envoy.api.v2.Cluster_DiscoveryType", Cluster_DiscoveryType_name, Cluster_DiscoveryType_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbPolicy", Cluster_LbPolicy_name, Cluster_LbPolicy_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_DnsLookupFamily", Cluster_DnsLookupFamily_name, Cluster_DnsLookupFamily_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy", Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name, Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterDiscoveryService service

type ClusterDiscoveryServiceClient interface {
	StreamClusters(ctx context.Context, opts ...grpc.CallOption) (ClusterDiscoveryService_StreamClustersClient, error)
	FetchClusters(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type clusterDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterDiscoveryServiceClient(cc *grpc.ClientConn) ClusterDiscoveryServiceClient {
	return &clusterDiscoveryServiceClient{cc}
}

func (c *clusterDiscoveryServiceClient) StreamClusters(ctx context.Context, opts ...grpc.CallOption) (ClusterDiscoveryService_StreamClustersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterDiscoveryService_serviceDesc.Streams[0], c.cc, "/envoy.api.v2.ClusterDiscoveryService/StreamClusters", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterDiscoveryServiceStreamClustersClient{stream}
	return x, nil
}

type ClusterDiscoveryService_StreamClustersClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type clusterDiscoveryServiceStreamClustersClient struct {
	grpc.ClientStream
}

func (x *clusterDiscoveryServiceStreamClustersClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterDiscoveryServiceStreamClustersClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterDiscoveryServiceClient) FetchClusters(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := grpc.Invoke(ctx, "/envoy.api.v2.ClusterDiscoveryService/FetchClusters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterDiscoveryService service

type ClusterDiscoveryServiceServer interface {
	StreamClusters(ClusterDiscoveryService_StreamClustersServer) error
	FetchClusters(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterClusterDiscoveryServiceServer(s *grpc.Server, srv ClusterDiscoveryServiceServer) {
	s.RegisterService(&_ClusterDiscoveryService_serviceDesc, srv)
}

func _ClusterDiscoveryService_StreamClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterDiscoveryServiceServer).StreamClusters(&clusterDiscoveryServiceStreamClustersServer{stream})
}

type ClusterDiscoveryService_StreamClustersServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type clusterDiscoveryServiceStreamClustersServer struct {
	grpc.ServerStream
}

func (x *clusterDiscoveryServiceStreamClustersServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterDiscoveryServiceStreamClustersServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClusterDiscoveryService_FetchClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterDiscoveryServiceServer).FetchClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.ClusterDiscoveryService/FetchClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterDiscoveryServiceServer).FetchClusters(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.ClusterDiscoveryService",
	HandlerType: (*ClusterDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchClusters",
			Handler:    _ClusterDiscoveryService_FetchClusters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamClusters",
			Handler:       _ClusterDiscoveryService_StreamClusters_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/cds.proto",
}

func init() { proto.RegisterFile("api/cds.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 1789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0xb7, 0x64, 0x27, 0xb1, 0x47, 0xff, 0xe8, 0xb5, 0xe3, 0x28, 0x4a, 0x72, 0xbd, 0xa8, 0xed,
	0x21, 0x68, 0x01, 0xa5, 0x51, 0xce, 0x57, 0x5c, 0xee, 0x7a, 0x85, 0xfe, 0xd9, 0x56, 0xab, 0x93,
	0x7c, 0x4b, 0x3a, 0x4e, 0x7a, 0x40, 0xb7, 0x14, 0xb9, 0x92, 0x58, 0x53, 0x24, 0xcb, 0x5d, 0xaa,
	0x52, 0x1e, 0x8b, 0x3e, 0xf4, 0xb5, 0xe8, 0xd7, 0xe9, 0xb7, 0xe8, 0x7b, 0x9f, 0x0a, 0xb4, 0x1f,
	0xa3, 0xd8, 0xe5, 0x4a, 0x96, 0x28, 0xdb, 0x51, 0x81, 0xbe, 0x71, 0x67, 0x7f, 0xbf, 0x9f, 0x86,
	0xc3, 0xd9, 0x99, 0x59, 0x41, 0xce, 0x0c, 0x9c, 0x97, 0x96, 0xcd, 0x2a, 0x41, 0xe8, 0x73, 0x1f,
	0x65, 0xa9, 0x37, 0xf1, 0x67, 0x15, 0x33, 0x70, 0x2a, 0x93, 0x6a, 0x69, 0x5f, 0x6c, 0x9a, 0xb6,
	0x1d, 0x52, 0xa6, 0x00, 0xa5, 0xbc, 0x30, 0xf5, 0x4d, 0x46, 0xd5, 0xfa, 0x40, 0xac, 0x6d, 0x87,
	0x59, 0xfe, 0x84, 0x86, 0x33, 0x65, 0x3c, 0x12, 0xc6, 0x11, 0x35, 0x5d, 0x3e, 0x22, 0xd6, 0x88,
	0x5a, 0x57, 0xca, 0x8e, 0x84, 0x5d, 0x3e, 0x5a, 0xbe, 0xab, 0x6c, 0xd2, 0x01, 0x36, 0x77, 0xa0,
	0xf4, 0x74, 0xe8, 0xfb, 0x43, 0x97, 0xbe, 0x94, 0xbf, 0xec, 0x79, 0x3e, 0x37, 0xb9, 0xe3, 0x7b,
	0xf3, 0xdd, 0x4f, 0xd4, 0xae, 0x5c, 0xf5, 0xa3, 0xc1, 0x4b, 0x3b, 0x0a, 0x25, 0x20, 0xc1, 0x5e,
	0xec, 0x33, 0x1e, 0x46, 0x16, 0xbf, 0x8d, 0xfd, 0xc7, 0xd0, 0x0c, 0x02, 0x1a, 0x2a, 0xf5, 0x32,
	0x06, 0x74, 0x11, 0x30, 0x1e, 0x52, 0x73, 0x5c, 0x77, 0x3c, 0xbb, 0xe1, 0x7b, 0x03, 0x67, 0x88,
	0xbe, 0x86, 0x3c, 0xf3, 0xa3, 0xd0, 0xa2, 0x44, 0x45, 0xa2, 0x98, 0xfa, 0x34, 0xf5, 0x22, 0x53,
	0x7d, 0x58, 0x59, 0x8e, 0x55, 0xa5, 0x16, 0x6f, 0xe2, 0x5c, 0x0c, 0x56, 0xcb, 0xf2, 0xdf, 0xb7,
	0xa1, 0xd0, 0x70, 0x42, 0x2b, 0x72, 0x78, 0x3d, 0xa4, 0xe6, 0x15, 0x0d, 0x19, 0x3a, 0x03, 0xe0,
	0xa3, 0x90, 0xb2, 0x91, 0xef, 0xda, 0x42, 0x6d, 0xfb, 0x45, 0xa6, 0xfa, 0x62, 0x55, 0x2d, 0x41,
	0xa9, 0x18, 0x0b, 0x3c, 0x5e, 0xe2, 0x96, 0xfe, 0x99, 0x06, 0xb8, 0xde, 0x42, 0x5f, 0xc2, 0x6e,
	0x10, 0x3a, 0x7e, 0xe8, 0xf0, 0x99, 0x74, 0x32, 0x5f, 0x7d, 0xb6, 0x2a, 0x8b, 0xfd, 0x88, 0x3b,
	0xde, 0xf0, 0x5c, 0x81, 0xf0, 0x02, 0x8e, 0x5a, 0x50, 0x18, 0x9b, 0x53, 0x62, 0xf9, 0x9e, 0x47,
	0x2d, 0x19, 0xf2, 0x62, 0x5a, 0xbe, 0xe6, 0xd3, 0x4a, 0x1c, 0xb5, 0xca, 0x3c, 0x6a, 0x95, 0x8b,
	0xb6, 0xc7, 0x5f, 0x57, 0xdf, 0x9a, 0x6e, 0x44, 0x71, 0x7e, 0x6c, 0x4e, 0x1b, 0xd7, 0x1c, 0xd4,
	0x85, 0x43, 0x21, 0x13, 0x50, 0xcf, 0x76, 0xbc, 0x21, 0x09, 0xe9, 0x1f, 0x22, 0xca, 0x38, 0x2b,
	0x6e, 0x6f, 0xa0, 0x85, 0xc6, 0xe6, 0xf4, 0x3c, 0x26, 0x62, 0xc5, 0x43, 0xbf, 0x84, 0xac, 0xd0,
	0x5b, 0xe8, 0xec, 0x6c, 0xa0, 0x93, 0x19, 0x9b, 0xd3, 0x85, 0xc0, 0x2f, 0x20, 0x13, 0x0b, 0xf0,
	0xd0, 0xa1, 0xac, 0x78, 0x6f, 0x03, 0x3e, 0x48, 0xbe, 0xc4, 0x97, 0xff, 0xf2, 0x14, 0x1e, 0x34,
	0xdc, 0x88, 0x71, 0x1a, 0x22, 0x04, 0x3b, 0x9e, 0x39, 0xa6, 0x32, 0xb2, 0x7b, 0x58, 0x3e, 0xa3,
	0x9f, 0xc3, 0x0e, 0x9f, 0x05, 0x54, 0xc6, 0x2a, 0x5f, 0xfd, 0x61, 0xe2, 0x23, 0xc6, 0xc4, 0x4a,
	0x73, 0x7e, 0x3c, 0x8c, 0x59, 0x40, 0xb1, 0x24, 0x20, 0x03, 0x10, 0xb5, 0x19, 0xb1, 0x62, 0x88,
	0x88, 0xfb, 0xc0, 0x19, 0xaa, 0x30, 0x7d, 0x76, 0xb3, 0x4c, 0xcb, 0x66, 0xea, 0x31, 0xce, 0x4c,
	0xac, 0xd1, 0x84, 0x05, 0xd5, 0xa1, 0xa0, 0xbe, 0x20, 0xe1, 0xce, 0x98, 0xfa, 0x11, 0x57, 0x11,
	0x7b, 0xbc, 0xf6, 0xc6, 0x4d, 0x75, 0x72, 0x70, 0x5e, 0x31, 0x8c, 0x98, 0x80, 0x06, 0xf0, 0x3c,
	0x88, 0x3d, 0x52, 0x5f, 0x95, 0xf4, 0xa3, 0xc1, 0x80, 0x86, 0xc4, 0x75, 0xc6, 0x0e, 0x27, 0xfd,
	0x19, 0xdf, 0x30, 0x8e, 0xcf, 0x02, 0xe9, 0x97, 0x52, 0xa9, 0x4b, 0x91, 0x8e, 0xd0, 0xa8, 0x0b,
	0x09, 0xf4, 0x15, 0xec, 0xb9, 0x7d, 0x12, 0xf8, 0xae, 0x63, 0xcd, 0x8a, 0xf7, 0x65, 0xfc, 0x3e,
	0xb9, 0xf9, 0xc5, 0x3b, 0xfd, 0x73, 0x89, 0xc2, 0xbb, 0xae, 0x7a, 0x42, 0x3f, 0x85, 0x7b, 0x23,
	0x5f, 0x24, 0xc4, 0x03, 0x79, 0x7a, 0x6e, 0x39, 0x8b, 0x31, 0x06, 0x7d, 0x03, 0xb9, 0xe5, 0x62,
	0xc4, 0x8a, 0xbb, 0x92, 0xf4, 0x78, 0x95, 0x74, 0x26, 0x21, 0x0d, 0x81, 0xc0, 0xd9, 0xd1, 0xf5,
	0x82, 0xa1, 0xef, 0xe1, 0xc9, 0x72, 0x12, 0x92, 0xd5, 0xf0, 0x14, 0xf7, 0x36, 0x88, 0x45, 0x71,
	0x29, 0x27, 0xcf, 0x97, 0xc3, 0x82, 0xce, 0x40, 0xb3, 0xe2, 0xc3, 0x4e, 0xfa, 0xea, 0xb4, 0x17,
	0x41, 0x2a, 0x3e, 0xbb, 0xb3, 0x24, 0xe0, 0x82, 0x95, 0x28, 0x2b, 0x35, 0xc8, 0x70, 0x97, 0x09,
	0xcf, 0x38, 0x9d, 0xf2, 0x62, 0x46, 0x8a, 0x7c, 0xba, 0x2a, 0x32, 0xaf, 0x6f, 0x86, 0xcb, 0x1a,
	0x31, 0x0e, 0x03, 0x5f, 0x3c, 0x23, 0x03, 0x0e, 0xb9, 0x15, 0x90, 0x79, 0x89, 0x26, 0x7e, 0x10,
	0x97, 0x82, 0xec, 0x4d, 0x5a, 0x86, 0x15, 0x9c, 0x2b, 0x60, 0x2f, 0xc6, 0x9d, 0x6d, 0x61, 0xc4,
	0xd7, 0xac, 0xe8, 0x1d, 0x3c, 0x1c, 0x71, 0x7e, 0x83, 0x6c, 0x4e, 0xca, 0x96, 0x13, 0xdf, 0x81,
	0xf3, 0xe0, 0xd5, 0xba, 0xf0, 0x81, 0x90, 0x48, 0x2a, 0xff, 0x06, 0x8e, 0x84, 0xb9, 0xba, 0x2e,
	0x9d, 0xbf, 0x4d, 0xba, 0xba, 0x2e, 0x7d, 0x38, 0xba, 0xc1, 0x8e, 0x2e, 0xe1, 0xe1, 0x30, 0x0c,
	0xac, 0x75, 0xe9, 0x82, 0x94, 0x7e, 0xbe, 0x2a, 0x7d, 0x1a, 0x06, 0xd6, 0x0d, 0x4e, 0x0f, 0xd7,
	0xcd, 0xa8, 0x01, 0x9a, 0xed, 0x31, 0x12, 0xd2, 0x81, 0x28, 0xdc, 0x24, 0x34, 0x39, 0x2d, 0x6a,
	0x1f, 0x3d, 0xa5, 0xb6, 0xc7, 0x70, 0xcc, 0xc0, 0x26, 0xa7, 0xe8, 0x3b, 0xd8, 0x17, 0x22, 0xae,
	0xef, 0x5f, 0x45, 0x01, 0x19, 0x98, 0x63, 0xc7, 0x9d, 0x15, 0xf7, 0xe5, 0x29, 0xfa, 0xf1, 0x2d,
	0x55, 0xc8, 0x63, 0x1d, 0x89, 0x3e, 0x91, 0x60, 0x5c, 0xb0, 0x57, 0x0d, 0xe8, 0x0d, 0xe4, 0x62,
	0xbf, 0x98, 0xef, 0x4e, 0x44, 0x1a, 0xa2, 0xbb, 0xce, 0x56, 0x56, 0x3a, 0xa4, 0xa0, 0x48, 0x87,
	0x7d, 0x3f, 0xe2, 0xae, 0x43, 0x43, 0x62, 0x53, 0xae, 0x0e, 0xc6, 0xc1, 0x5d, 0xd5, 0xac, 0x17,
	0xc3, 0x9b, 0x73, 0x34, 0xd6, 0xfc, 0x84, 0x05, 0x35, 0x41, 0xb3, 0x5c, 0x6a, 0x7a, 0x51, 0x40,
	0x1c, 0x8f, 0xd3, 0x70, 0x62, 0xba, 0xc5, 0xc3, 0x8f, 0x05, 0xaa, 0xa0, 0x28, 0x6d, 0xc5, 0x40,
	0xbf, 0x82, 0xc3, 0x48, 0x65, 0x3d, 0xe9, 0x3b, 0x9e, 0x3d, 0xaf, 0xb5, 0x0f, 0xa5, 0x52, 0x71,
	0xd5, 0xbb, 0xeb, 0xbe, 0x8f, 0x51, 0xb4, 0x3e, 0x0b, 0x74, 0x41, 0x73, 0xfb, 0x84, 0x45, 0x7d,
	0x46, 0xf9, 0x5c, 0xe7, 0x48, 0xea, 0xfc, 0xe8, 0xb6, 0xd2, 0xa5, 0x4b, 0xb0, 0xd2, 0xcc, 0xbb,
	0x2b, 0x6b, 0x74, 0x09, 0x07, 0xa1, 0xe8, 0x93, 0x23, 0x93, 0x8d, 0x88, 0xdb, 0x9f, 0x4b, 0x3e,
	0xba, 0x2b, 0x70, 0xd8, 0xf1, 0x86, 0x67, 0x26, 0x1b, 0x75, 0xfa, 0xb1, 0xc8, 0x59, 0x0a, 0x6b,
	0x61, 0xc2, 0x26, 0xaa, 0x0a, 0x0f, 0x4d, 0x8f, 0x05, 0x7e, 0xc8, 0x09, 0xf3, 0xad, 0x2b, 0xca,
	0x8b, 0xc5, 0x9b, 0xaa, 0x8a, 0x31, 0x47, 0xe9, 0x12, 0x84, 0x0b, 0x7c, 0xd5, 0x50, 0x0a, 0x40,
	0x4b, 0x36, 0x1e, 0xf4, 0x25, 0x80, 0x6c, 0x5e, 0xb1, 0xb7, 0xf1, 0x38, 0x54, 0x4a, 0x78, 0x2b,
	0xf7, 0x74, 0x39, 0x0b, 0xe1, 0x3d, 0xd1, 0xa8, 0x62, 0xea, 0x73, 0xc8, 0x32, 0x1a, 0x4e, 0x1c,
	0x8b, 0x12, 0xd9, 0x4c, 0xd3, 0xb2, 0x99, 0x66, 0x94, 0xad, 0x6b, 0x8e, 0x69, 0xe9, 0x3f, 0xf7,
	0x40, 0x4b, 0x66, 0x87, 0x98, 0x4f, 0x2c, 0xdf, 0x63, 0xd4, 0x8a, 0xb8, 0x33, 0xa1, 0xe4, 0x78,
	0x3a, 0x55, 0xbf, 0xfb, 0x91, 0xf9, 0x64, 0x89, 0x74, 0x3c, 0x9d, 0xa2, 0x63, 0xd8, 0x5d, 0xa4,
	0x52, 0xfa, 0x63, 0xa9, 0xb4, 0x80, 0xa2, 0x53, 0x40, 0x62, 0xe6, 0x25, 0xf4, 0xf7, 0xaa, 0x25,
	0x8a, 0xee, 0xaa, 0xba, 0xf5, 0x1d, 0x02, 0x9a, 0x20, 0xb5, 0x14, 0x47, 0xf4, 0xd7, 0xf9, 0x7c,
	0xb4, 0xd0, 0x09, 0x68, 0x68, 0x51, 0x8f, 0x6f, 0x34, 0xd7, 0x88, 0xf9, 0x68, 0x2e, 0x76, 0x1e,
	0xf3, 0xd0, 0x3b, 0x78, 0x4c, 0xbd, 0x81, 0x1f, 0x5a, 0x22, 0x8b, 0x92, 0x01, 0xda, 0xa4, 0x49,
	0x3f, 0x5a, 0xd0, 0x1b, 0xab, 0x91, 0xc2, 0x70, 0x74, 0xad, 0xcc, 0x22, 0xcb, 0xa2, 0x8c, 0xc5,
	0xb5, 0xea, 0xfe, 0x06, 0xb2, 0x87, 0x0b, 0xae, 0x1e, 0x53, 0x65, 0xd1, 0x7a, 0x0f, 0xa5, 0x65,
	0x25, 0x32, 0x76, 0x3c, 0x67, 0x1c, 0x8d, 0xc9, 0xbc, 0x95, 0x6f, 0xe0, 0x2e, 0xbb, 0x96, 0xfb,
	0x36, 0x66, 0x9f, 0xc9, 0x1e, 0xff, 0x3d, 0x3c, 0x59, 0x91, 0x56, 0xcd, 0x9a, 0x4c, 0x7c, 0x37,
	0x1a, 0xd3, 0xe2, 0xee, 0x26, 0x3d, 0x7a, 0x49, 0x5b, 0xf5, 0xea, 0xb7, 0x92, 0x8d, 0x2e, 0xe1,
	0xf1, 0x8a, 0x38, 0xe3, 0x36, 0x9d, 0x90, 0x81, 0x69, 0x71, 0x3f, 0xdc, 0xa8, 0xfd, 0x1f, 0x2d,
	0x49, 0xeb, 0x82, 0x7c, 0x22, 0xb9, 0xa5, 0xbf, 0x6e, 0x43, 0x7e, 0xb5, 0x44, 0x20, 0x1b, 0x0a,
	0x03, 0xd3, 0x75, 0xfb, 0xa6, 0x75, 0x35, 0x1f, 0x8e, 0xe2, 0x51, 0xfe, 0xab, 0x4d, 0x2a, 0xcc,
	0x62, 0x79, 0xa2, 0x34, 0xd4, 0xe4, 0x94, 0x1f, 0xac, 0xac, 0xd1, 0x37, 0x90, 0xb7, 0xe9, 0xc0,
	0x8c, 0x5c, 0xae, 0xaa, 0x99, 0x3a, 0x0d, 0x8f, 0xd6, 0x5e, 0x43, 0x97, 0x37, 0x28, 0x9c, 0x53,
	0xf0, 0x58, 0x1d, 0xfd, 0x0e, 0x34, 0x55, 0x05, 0x19, 0x75, 0xa9, 0x78, 0x17, 0x31, 0xe3, 0x8b,
	0x76, 0x71, 0xfc, 0x3f, 0xb9, 0xa9, 0x2b, 0x36, 0x2e, 0xb0, 0x95, 0x35, 0x2b, 0x7d, 0x06, 0x5a,
	0x12, 0x24, 0x26, 0xf0, 0x2b, 0x3a, 0x8b, 0xaf, 0x4c, 0x7b, 0x58, 0x3e, 0x97, 0x7b, 0x70, 0x74,
	0xf3, 0x3b, 0xa3, 0x02, 0x64, 0xba, 0x3d, 0x72, 0x52, 0xeb, 0x74, 0xea, 0xb5, 0xc6, 0xaf, 0xb5,
	0x2d, 0xa4, 0x41, 0xb6, 0xd6, 0x7d, 0x4f, 0x5a, 0xdd, 0xe6, 0x79, 0xaf, 0xdd, 0x35, 0xb4, 0x14,
	0x42, 0x90, 0x6f, 0xb6, 0x4e, 0x6a, 0x17, 0x1d, 0x83, 0xe8, 0x17, 0x75, 0xbd, 0x65, 0x68, 0xe9,
	0xd2, 0x9f, 0xd3, 0xa0, 0xe1, 0xf5, 0x7a, 0xba, 0x3f, 0x4f, 0x56, 0x59, 0xb0, 0x99, 0xf3, 0x81,
	0xde, 0x59, 0x80, 0xbe, 0xf8, 0x3c, 0xfe, 0xf2, 0x05, 0x45, 0x13, 0x8a, 0xba, 0xf3, 0x81, 0xa2,
	0x77, 0x90, 0xb3, 0x69, 0x10, 0x52, 0xcb, 0xe4, 0xd4, 0x26, 0x93, 0x57, 0x2a, 0xf0, 0xaf, 0x37,
	0x2b, 0xf6, 0x95, 0xe6, 0x82, 0xfb, 0xf6, 0x15, 0xce, 0xda, 0x4b, 0xab, 0x52, 0x07, 0xb2, 0xcb,
	0xbb, 0xe8, 0x6b, 0xc8, 0x46, 0x4c, 0x26, 0xab, 0xec, 0x2f, 0x8b, 0x3a, 0x9d, 0x74, 0xb7, 0xee,
	0xfb, 0xae, 0xba, 0xf9, 0x44, 0x4c, 0xa4, 0xa7, 0xf8, 0xc1, 0xf2, 0x25, 0xe4, 0x56, 0xee, 0x2d,
	0x08, 0xe0, 0xbe, 0x6e, 0xd4, 0x8c, 0x76, 0x43, 0xdb, 0x42, 0x79, 0x00, 0xdd, 0xc0, 0xed, 0x86,
	0x41, 0x9a, 0x5d, 0x5d, 0x4b, 0x89, 0x50, 0x77, 0x7a, 0xa7, 0xed, 0x46, 0xad, 0x23, 0x0d, 0x69,
	0xf4, 0x00, 0xb6, 0x5b, 0x4d, 0x5d, 0xdb, 0x16, 0x31, 0xef, 0xe1, 0xf6, 0x69, 0xbb, 0x2b, 0xb6,
	0x74, 0x43, 0xdb, 0x29, 0xff, 0x16, 0x76, 0xe7, 0x03, 0xbd, 0xe0, 0xe1, 0xde, 0x45, 0xb7, 0x49,
	0x70, 0xaf, 0xde, 0xee, 0x6a, 0x5b, 0x68, 0x1f, 0x72, 0x9d, 0x56, 0x4d, 0x37, 0x08, 0x6e, 0x7d,
	0x77, 0xd1, 0xd2, 0xc5, 0x37, 0xca, 0xc1, 0x1e, 0x6e, 0x77, 0x4f, 0xc9, 0x59, 0x4d, 0x3f, 0xd3,
	0xd2, 0xc2, 0x0d, 0x5c, 0xeb, 0x36, 0x7b, 0xdf, 0x6a, 0xdb, 0xe8, 0x00, 0x0a, 0xcb, 0xe2, 0xa4,
	0x53, 0xd7, 0x76, 0xca, 0xc7, 0x50, 0x48, 0x8c, 0x3a, 0x68, 0x17, 0x76, 0x6a, 0x17, 0x46, 0x4f,
	0xdb, 0x42, 0x19, 0x78, 0xf0, 0xf6, 0x73, 0xd2, 0xeb, 0x76, 0xde, 0x6b, 0x29, 0xb9, 0xf8, 0x22,
	0x5e, 0xa4, 0xeb, 0x08, 0xb4, 0xe4, 0xa4, 0x57, 0xcf, 0xc8, 0x2b, 0x4a, 0xdc, 0xe6, 0xaa, 0xff,
	0x4e, 0xc1, 0x23, 0xf5, 0x59, 0x16, 0x81, 0xd1, 0xe3, 0xb6, 0x85, 0x2e, 0x21, 0xaf, 0xcb, 0x59,
	0x41, 0x01, 0x18, 0x4a, 0x5c, 0x65, 0x16, 0x0c, 0x55, 0x58, 0x4a, 0x3f, 0xb8, 0x75, 0x9f, 0x05,
	0xa2, 0x10, 0x97, 0xb7, 0x5e, 0xa4, 0x7e, 0x96, 0x42, 0x0c, 0x72, 0x27, 0x94, 0x5b, 0xa3, 0xff,
	0x9f, 0xee, 0xf3, 0x3f, 0xfd, 0xe3, 0x5f, 0x7f, 0x4b, 0x3f, 0x29, 0x1f, 0xbd, 0x9c, 0x54, 0xaf,
	0xff, 0xb8, 0x79, 0xa3, 0x2e, 0xa2, 0xec, 0x4d, 0xea, 0x27, 0xfd, 0xfb, 0x32, 0x10, 0xaf, 0xff,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x91, 0xf9, 0x92, 0x1c, 0x1c, 0x12, 0x00, 0x00,
}
